Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 451-452 | Added on Tuesday, 26 July 2022 16:49:16

THEN BE PREPARED TO BE A PART OF THAT WORLD TOO. BE PREPARED TO BE AN EXPERT IN SOMETHING BESIDES FILMMAKING.
==========
﻿Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 697-698 | Added on Tuesday, 26 July 2022 23:57:02

STORIES ARE DEFINED BY CAUSE AND EFFECT.
==========
﻿Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 917-919 | Added on Thursday, 28 July 2022 17:48:18

FEET – WHAT DOES THE PERSON LOOK LIKE? WHAT ARE THE FACTS OF THEIR FAMILY HISTORY? WHERE HAVE THEY LIVED? WHERE DID THEY GO TO SCHOOL? WERE THEY POOR? DO THEY HAVE TATTOOS? WHO IS THEIR BEST FRIEND? WHAT IS THEIR OCCUPATION?
==========
﻿Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 920-921 | Added on Thursday, 28 July 2022 17:48:31

GROIN – WHAT DOES THE PERSON WANT? HOW DOES THEIR SEXUALITY MANIFEST ITSELF? WHAT ABOUT THEM IS BASE AND PUERILE? GREED? APPROVAL? ESTEEM? GLUTTONY?
==========
﻿Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 923-924 | Added on Thursday, 28 July 2022 17:48:44

HEART - WHAT DOES THE PERSON NEED? WHAT WILL MAKE THEM A MORE FUNCTIONAL PERSON? DO THEY NEED TO FIND SELF-CONFIDENCE? DO THEY NEED TO PROVIDE FOR THEIR FAMILY? DO THEY NEED TO FIND THEIR HUMILITY?
==========
﻿Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 930-930 | Added on Thursday, 28 July 2022 17:48:57

THROAT – HOW DOES THE PERSON SOUND? NOT JUST THE LITERAL VOICE, BUT HOW DOES THE PERSON PROJECT THEMSELVES?
==========
﻿Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 932-933 | Added on Thursday, 28 July 2022 17:49:26

LEFT CHEEK – WHAT IS THEIR INTELLIGENCE? HOW DOES IT MANIFEST ITSELF? WHAT IS THEIR PRACTICALITY? HOW DO THEY SOLVE PROBLEMS?
==========
﻿Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 934-935 | Added on Thursday, 28 July 2022 17:49:38

RIGHT CHEEK - WHAT IS THEIR IDEALISTIC / ARTISTIC CAPACITY? WHAT IS THEIR CONSCIENCE AND MORALITY? WHAT IS THEIR UN-PRACTICALITY?
==========
﻿Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 936-940 | Added on Thursday, 28 July 2022 17:50:57

CROWN – NOW, THIS ONE IS THE MOST IMPORTANT BECAUSE THIS IS WHERE WE LOOK AT ALL THE BODY PARTS LISTED AND PIECE THEM TOGETHER TO SEE HOW THEY WORK AS AN ACTUAL PSYCHOLOGY. AND THAT’S WHEN YOU KNOW YOU’RE CREATING A COMPLEX PERSON WITH A CONSCIOUS MIND AND A SUBCONSCIOUS ID.  IT’S ALSO WHERE YOU CAN START TO PIECE TOGETHER WHAT REALLY MATTERS ABOUT THIS CHARACTER TO YOUR STORY. WHAT ARE THEIR DEFINING MEMORIES? WHAT IS THEIR PATHOLOGY? THE CROWN ESSENTIALLY ALLOWS YOU TO ANSWER THE QUESTION:   WHO IS THIS CHARACTER?
==========
﻿Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 968-969 | Added on Thursday, 28 July 2022 20:59:05

KNOW THIS: JUST BECAUSE A CHARACTER IS REAL DOESN'T MAKE THEM FEEL REAL.
==========
கம்ப்யூட்டர் கிராமம் / Computer Gramam (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight at location 847-847 | Added on Friday, 5 August 2022 21:22:08

‘லேடியோ.’
==========
கரையெல்லாம் செண்பகப்பூ / Karaiyellam Senbagappoo (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 186 | location 3546-3546 | Added on Sunday, 14 August 2022 15:56:38

இணைந்துகொண்டன. முதல் தினம் மாடியில் நாற்காலி
==========
பிரிவோம் சந்திப்போம் / Pirivom Sandhippom (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 12 | location 172-173 | Added on Monday, 15 August 2022 09:28:47

கல்யாண ரிசப்ஷன் போல லேசாகத் தூறல் தெளித்தது.
==========
பிரிவோம் சந்திப்போம் / Pirivom Sandhippom (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 49 | location 854-855 | Added on Monday, 15 August 2022 13:45:56

‘காதல்ங்கறது Nature's way of ensuring a pregnancy!’
==========
பிரிவோம் சந்திப்போம் / Pirivom Sandhippom (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 245 | location 4562-4563 | Added on Tuesday, 16 August 2022 21:58:24

‘காதல்ங்கறது Natures way of ensuring pregnancy!'
==========
பிரிவோம் சந்திப்போம் / Pirivom Sandhippom (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 321 | location 6039-6039 | Added on Wednesday, 17 August 2022 13:53:13

தூக்கத்தை துக்கம் தடுத்தது.
==========
பிரிவோம் சந்திப்போம் / Pirivom Sandhippom (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 386 | location 7324-7325 | Added on Wednesday, 17 August 2022 22:20:48

அவசரமாகத் திறந்து பார்த்ததில் அப்பாதான்! அப்பாடா!
==========
பிரிவோம் சந்திப்போம் / Pirivom Sandhippom (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 496 | location 9454-9457 | Added on Friday, 19 August 2022 00:13:09

எந்தக் காரியத்திலும் யாரையாவது மனம் புண்படுத்தித்தான் ஆகணும். கொஞ்சமேனும் யாராவது நொந்து போய்த்தான் ஆகணும். எல்லாருக்கும் எல்லாவிதத்திலும் சந்தோஷம் கொடுக்கிற செய்கைன்னு உலகத்தில ஒண்ணுமே கிடையாது.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 12 | location 170-172 | Added on Wednesday, 24 August 2022 22:42:43

Why does the bank want higher deposits? Because your money is lent out to others – loans earn the bank anywhere between 10 per cent to 18 per cent, while you get a 4 per cent interest on your savings deposit. The difference between what you get and what the bank earns, minus costs, is the bank’s profit.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 11 | location 165-167 | Added on Wednesday, 24 August 2022 22:43:00

Once your salary hits your Income Account, within thirty minutes (OK, take a day – but do it) move out your monthly expenditure to your Spend-it Account. And whatever is left, move it to your Invest-it Account. Salary accounts are usually zero-balance accounts, so sweeping all the money out is possible.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 17 | location 255-255 | Added on Thursday, 25 August 2022 23:39:47

Chennai-like floods needing a full replacement of the basement furniture and gadgets.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 26 | location 398-399 | Added on Friday, 26 August 2022 14:12:49

One, ensure that you have a policy that does not have something called a ‘co-pay’ clause. This is called ‘co-pay’ because you agree to pay a certain percentage of a bill to share the costs with the insurance company.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 27 | location 406-407 | Added on Friday, 26 August 2022 14:14:03

Two, check for a ‘pre-existing’ disease clause. Insurance companies will not cover diseases that you already have when you take the policy.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 28 | location 417-418 | Added on Friday, 26 August 2022 14:15:17

Three, check if your policy has a ‘disease waiting period’. Many companies have a cool-off period of thirty to ninety days during which they will not pay any claim.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 28 | location 420-422 | Added on Friday, 26 August 2022 14:16:07

Four, check if your policy has ‘sub-limits’. A friend was admitted for a knee surgery to one of Delhi’s upmarket hospitals. Confident of a Rs 4-lakh cover, she selected a single deluxe room. When the time for the payout came, the insurance company refused to pay the room rent, which was over Rs 8,000 a day.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 29 | location 430-431 | Added on Friday, 26 August 2022 14:18:16

Five, check for exclusions. A policy will list out diseases, conditions and medical services that the policy does not cover.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 29 | location 432-433 | Added on Friday, 26 August 2022 14:19:01

What you can’t do much about is when the policy you buy excludes something at some future point in the policy.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 29 | location 435-435 | Added on Friday, 26 August 2022 14:19:38

Six, ask how much of the costs before and after hospitalization the policy will cover.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 29 | location 438-439 | Added on Friday, 26 August 2022 14:20:12

Seven, ask for a list of ‘day-care’ procedures that don’t need you to stay for twenty-four hours in a hospital any more.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 29 | location 441-442 | Added on Friday, 26 August 2022 14:20:54

Eight, look at the ‘no-claims bonus’ feature. When you don’t make a claim in a year, you get rewarded by the insurance company.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 30 | location 450-451 | Added on Friday, 26 August 2022 23:45:40

One, how many claims does the company settle? Out of 100, if the company’s claims history does not settle more than ninety-five claims, don’t buy from the firm.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 30 | location 453-454 | Added on Friday, 26 August 2022 23:46:10

Two, look at the claim-complaints data and look for a policy that has less than thirty complaints on every 10,000 claims made.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 40 | location 604-607 | Added on Saturday, 27 August 2022 08:53:52

An easy way to cut through the tyranny of being hit by large numbers is to use the Rule of 72. This is a versatile rule that we shall use many times in the book. To know the rate of return every year of a double-your-money proposition, simply ask the question: Over what time does my money double? Then divide 72 by that number.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 45 | location 683-684 | Added on Saturday, 27 August 2022 16:57:10

Your provident fund contribution of up to Rs 1.5 lakhs will be taken as the tax-saving amount – giving you the same benefit as a dud insurance plan.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 46 | location 692-695 | Added on Saturday, 27 August 2022 16:58:07

Rule One: Get a cheap plan. The online plans are the cheapest since they remove the agent commission (up to 42 per cent of your first-year premium) – from the price of the insurance. When term plans were launched online some years ago, the prices dropped by almost half! A policy sold by an agent costs twice as much as the policy you buy online.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 46 | location 698-701 | Added on Saturday, 27 August 2022 16:59:07

Rule Two: When buying a term cover, check the claims experience of the insurance firm. Shortlist three or four policies that you like in terms of low prices for your age, cover and tenure, and then start looking at the claims experience. This is not so easy to find. A claims experience of over 95 per cent is fine. This means that the company pays 95 per cent of the claims filed. Do a simple google search on this metric to see which firms show up.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 51 | location 773-775 | Added on Saturday, 27 August 2022 18:48:05

Not having money to invest is one of the four big reasons we put off the investing decision. At number two is the desire to keep money in a liquid form for a future emergency. Third is the fear of making a mistake and fourth is the lack of knowledge.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 60 | location 916-917 | Added on Saturday, 27 August 2022 23:05:02

There are three asset classes that we need to understand. Debt, equity and real assets.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 60 | location 917-920 | Added on Saturday, 27 August 2022 23:05:53

Debt is just an umbrella term for all financial products that are based on borrowing. Equity is ownership of a business and the risk that it brings, either directly (through stocks) or indirectly (through mutual funds). Real assets are those that can be physically seen. Debt and equity are called ‘financial assets’, while real estate and gold are called ‘real assets’. Each of these three buckets has certain features and you need parts of all three in your money box.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 69 | location 1048-1063 | Added on Saturday, 27 August 2022 23:28:38

To understand equity, we need to understand how a business works. There are two ways by which entrepreneurs can fund their businesses – debt and equity. Imagine that your friend makes the best biryani in Delhi. But she makes it at home for her friends and family. You and others egg her on and she sets up a small home takeaway service. The biryani delivery is a runaway hit. She wants to expand the business – she wants to set up five kitchens in different parts of the city and grow the business fivefold. Now she will have to rent the kitchen premises, hire more people and get more equipment. The cost of this expansion is Rs 30 lakhs. She can borrow the money from a bank, but you and a few more friends decide to stake her out. Four of you contribute Rs 5 lakhs each; she puts in another Rs 10 lakhs. On a pro-rata basis, each of you now owns a slice of the biryani business; she owns twice your one-sixth share. You four have one share each and she has two shares in the business. The business does well. At the end of the year the profit is Rs 12 lakhs. Each ‘share’ in the business makes a profit of Rs 2 lakhs. You decide not to take home the profit, but invest it further in the business. From the Rs 12-lakh profit, she opens even more kitchens. The profit in year two is Rs 20 lakhs. One friend is going abroad and wants to sell his ‘share’. He had paid Rs 5 lakhs for his share and is now willing to sell. Will he sell for Rs 5 lakhs or more? More, right? Because the company is profitable and has gathered value; the price at which he will sell will be more than Rs 5 lakhs. If you want to buy his share, you will look at what potential this biryani business has to earn profits and then you will make an offer. You will do the maths and may be willing to pay Rs 8 lakhs. This Rs 3 lakhs he has made is his ‘profit’. He had invested Rs 5 lakhs and he is selling his share at Rs 8 lakhs. This is what ‘capital appreciation’ means in the language of the stock market.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 73 | location 1119-1121 | Added on Saturday, 27 August 2022 23:38:47

The Sensex and Nifty50 are broad market indices and are also called large-cap indices. You must have heard the term ‘market cap’ or ‘market capitalization’ – this is just the number of shares of the company multiplied by the price. If the firm has 100 shares in the market and they currently sell at Rs 50 per share, then the market cap is Rs 5,000.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 76 | location 1158-1162 | Added on Saturday, 27 August 2022 23:44:51

Why do I say that stocks are the best route to get inflation-adjusted returns? Or returns that are higher than the rise in prices. Remember that FD returns usually get you returns that destroy your purchasing power. What is it about stock prices that make it inflation-adjusted? Again, go back to basics. As inflation rises in the system – the input costs for the firms go up – they are passed on to the consumers in the form of higher final prices. The ‘margins’ or the profits of the firm, therefore, get protection from the effect of input price inflation.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 76 | location 1163-1166 | Added on Saturday, 27 August 2022 23:46:13

Each time I show one slide in my workshops, lectures and talks, the audience gasps. There is disbelief on the faces at what they see. What is this slide? It shows the value of Rs 1 lakh invested in 1980 today in four different products. One, a fixed deposit. Two, gold. Three, public provident fund. Four, Sensex. Rs 1 lakh invested in each of these products and left to compound is worth Rs 19.35 lakhs in the fixed deposit, Rs 16.10 lakhs in gold, Rs 32.78 lakhs in PPF and, hold your breath, Rs 2.3 crores in the Sensex.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 80 | location 1225-1226 | Added on Saturday, 27 August 2022 23:56:16

and don’t want to take the risk of choosing a fund manager, go with an exchange-traded fund (ETF) or an index fund linked to a broad market index or a mid-cap index.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 83 | location 1265-1268 | Added on Sunday, 28 August 2022 09:25:33

So what are mutual funds? These are also stocks, right? No. They are not. They invest only in equity, right? No. They invest in many things; equity or shares is just one of the many things funds buy. They invest in bonds, gold and soon real estate. You can build your entire portfolio by buying mutual funds across these asset classes. And from within the asset class, you can build a diversified portfolio for all your short-, medium- and long-term needs.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 86 | location 1313-1314 | Added on Sunday, 28 August 2022 10:14:37

Today you can buy three kinds of asset classes through mutual funds – debt, gold and equity. Real estate will soon be available through special mutual funds called real estate investment trusts (REITs).
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 87 | location 1322-1324 | Added on Sunday, 28 August 2022 10:15:35

Debt funds buy debt papers issued by either the government or firms, or both. What is a debt paper? While there are many kinds of debt papers in the market, we need to understand the basic function of a debt paper – let’s call it a bond.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 88 | location 1337-1338 | Added on Sunday, 28 August 2022 10:17:35

Investment horizon, or the time for which we want to invest our money, can also be called ‘tenor’.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 88 | location 1342-1343 | Added on Sunday, 28 August 2022 10:18:48

There are two ways to slice the debt fund market. One, according to tenor, or the holding period of the bond. Two, according to the quality of debt paper bought by the fund.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 89 | location 1351-1356 | Added on Sunday, 28 August 2022 10:21:11

If there is a banking product that is like a liquid fund, it is the savings deposit. The purpose of a liquid fund is to keep money, well, liquid, or ready for use. The bonds that a liquid fund buys are short-maturity bonds, or bonds that will mature within an average of three months. ‘Average maturity’ will be a term you will come across when you go to buy a debt fund. All that it means is that the average holding period of all the bonds is about three months. Some bonds may be maturing tomorrow, some in a week, some in two months and some may mature in four months. The average of all these different maturing dates is three months.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 93 | location 1421-1423 | Added on Sunday, 28 August 2022 13:23:54

Why not just buy a blue-chip stock – or maybe three – and sit on it? You can do that but you will have to track the stock to see when it stops being a blue chip. Also, the growth that a blue chip sees may be slower than smaller and more aggressive firms, which also carry higher risk. And sometimes blue chips can tank.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 94 | location 1440-1444 | Added on Sunday, 28 August 2022 13:26:40

An active fund is like the taxi – you are choosing a mutual fund where the fund manager has a view on the market, chooses his stocks to fit the investment mandate, and then manages the money by trading every day. Just as your experience of the taxi ride depends a lot on your driver, so also the performance of an active fund depends a lot on the fund manager. Just as the taxi driver works in the overall corporate environment of a taxi firm – Uber, for instance – so also the fund manager according to the rules set up by the fund.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 95 | location 1448-1451 | Added on Sunday, 28 August 2022 13:29:21

A passive fund is like taking the metro. You know the cost, you know the distance and you know when you will reach – you don’t have to choose the driver, you just need to get to the station and board the right train. A passive fund just buys the index and stays with it. Passive funds don’t invest in large research desks, or brokers and dealers, since all they are doing is buying an index and sticking with it.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 96 | location 1468-1469 | Added on Sunday, 28 August 2022 13:35:48

An ETF also tracks an index like the Sensex but lists its units on a stock exchange, unlike a mutual fund. To buy and sell mutual funds you don’t need to have a demat account. But to invest in an ETF, you need a demat account.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 100 | location 1526-1528 | Added on Sunday, 28 August 2022 13:44:40

Today there are three kinds of balanced funds – conservative, balanced and aggressive. Conservative funds have between 10 and 25 per cent in equity, balanced have between 40 and 60 per cent in equity and aggressive about 65–80 per cent in equity. Conservative balanced funds are also called monthly income plans (MIPs).
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 101 | location 1534-1539 | Added on Sunday, 28 August 2022 13:52:51

Imagine there are 100 investors and each has put in Rs 1,000 in an equity mutual fund. Each bought a unit for the price of Rs 10; therefore, each investor holds 100 units. A sum of Rs 1 lakh is invested by the mutual fund in different stocks. A year later the value of the portfolio is Rs 1.5 lakhs, giving a profit of Rs 50,000. This will be shared equally by the units, but before that costs will be removed. If the cost is Rs 10,000, the profit that goes to the unit holders is Rs 40,000. This gets reflected in the NAV that goes from Rs 10 to Rs 14. Your 100 units are now worth Rs 1,400. Multiply the NAV with the number of units you hold to get the value of your mutual fund holding per scheme.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 101 | location 1548-1555 | Added on Sunday, 28 August 2022 14:31:49

In its simplest form, a market-linked investment product carries three kinds of costs. One, the cost to enter the product, also called a front load. If you invest Rs 100, and Rs 2 from that is cut out so that Rs 98 is invested, the Rs 2 is called a load. A load is part of the price of the product, or is embedded in the price – it is an invisible charge because it is not usually disclosed. Mutual funds have zero loads and are an extremely investor-friendly product. The question to ask when buying a market-linked investment product is: How much of the money I invest goes to work? Two, an ongoing cost or the annual fees that you need to pay to have experts manage your money. To take care of the running costs and profits of investment managers each year, some fees are deducted from your money. The cost to you of handing over your money to professionals is captured in a number called the ‘expense ratio’. This is the fees that a mutual fund charges investors for its costs and the profits it makes.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 103 | location 1565-1568 | Added on Sunday, 28 August 2022 14:34:54

Three, an exit cost, or the cost of selling the product. To take care of expenses of selling the investment you made or to act as a deterrent to frequent churning of money, funds levy exit charges. This is a percentage of your corpus and usually falls off to zero after about one or two years. Ask this question: What does it cost to redeem this product after one, two, three years and so on over the life of the product?
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 111 | location 1696-1697 | Added on Sunday, 28 August 2022 18:12:09

Do ask: What is the exit load and the period that would be considered an early exit? Or look it up online. I find the website valueresearchoneline.com a useful database to look at.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 115 | location 1754-1756 | Added on Sunday, 28 August 2022 18:24:33

You need a mix of assets in your portfolio. Debt gives you the stable core. Include products like your PF, PPF, FDs, bonds and debt funds in the debt part of your portfolio. Equity gives the return kicker – it is the only asset class that gives you returns that beat inflation, at the lowest cost. You can include gold in this, but I prefer to stay with just debt and equity.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 116 | location 1767-1773 | Added on Sunday, 28 August 2022 18:32:09

Cash flow cell You need three bank accounts when you are starting out. As you get more used to the cash flow system, you can use just two. Your salary account is your income account where all inflows drop. The Spend-it account can be a joint account with your partner or parent or child – whoever shares the routine household expenses with you. It is a good idea for both partners to contribute to running of the house. It is usual for a woman to use her salary to run the house and the man his to build the assets. Unfortunately, in a divorce situation, the law awards assets to the person that paid for them. So share the routine expenses and build assets in both names.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 118 | location 1803-1807 | Added on Sunday, 28 August 2022 18:43:47

Medical insurance cell This is a really tough one. You need either a really good financial planner who will choose for you, or you need some kind of help to compare policies so that you can choose the right one. As I said earlier in the chapter on medical insurance, Mint collaborated with SecureNow Insurance brokers to rate medical policies, and you will need to spend thirty minutes with Mint SecureNow Mediclaim Ratings to get the best out of them. You can see them here: https://bit.ly/2reeTTN
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 122 | location 1867-1871 | Added on Sunday, 28 August 2022 18:55:57

for your near-term goals within three years, you invest in ultra-short-term or conservative hybrid mutual funds; for your medium-term goals that are about three to seven years in the future, you invest in aggressive hybrid and diversified equity mutual funds; for your long-term goals that are seven or more years away, you invest in a mix of diversified equity, multi-cap, mid-cap and small-cap funds.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 124 | location 1901-1902 | Added on Sunday, 28 August 2022 20:15:08

The first one uses your current income which I call ‘Save Your Age’. The second one – ‘Multiply Your Spend’ – uses your current expenditure to forecast what you will need in the future and how much you need to have.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 127 | location 1944-1945 | Added on Sunday, 28 August 2022 20:34:55

At age sixty, you need between eighteen to thirty-five times your annual expenses at retirement to retire with the lifestyle you are used to.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 129 | location 1964-1968 | Added on Sunday, 28 August 2022 20:40:19

At age forty, you should have three times your annual income as your retirement corpus already. If you earn Rs 15 lakhs a year at age forty, you should have Rs 45 lakhs in your retirement corpus. At fifty, you should have six times your annual income. If you have an annual income of Rs 40 lakhs at age fifty, you should already have Rs 2.4 crores in your corpus. At age sixty, or at retirement, you should have eight times your annual salary. Earning a crore at sixty, you must have Rs 8 crores as corpus. The Fidelity numbers assume a US scenario with social security and other benefits, but the multipliers roughly work out to a rule of thumb for India as well.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 129 | location 1977-1983 | Added on Sunday, 28 August 2022 20:44:58

Next, count all the balances in your provident fund, your public provident fund, your fixed deposits, gold, any real estate other than the home you live in. Include the value of your mutual funds if any; find out what the value of the endowment or money-back policies are and count those in as well. The more you have already, the less you need to target. Do not underestimate the power of order in your money box. Two, remember that you are already saving 24 per cent of your basic income through your employees’ provident fund (EPF) deductions. You contribute 12 per cent and your employer matches that. By age thirty, most people have begun to do at least their tax-saving investments, if not a bit more. Count that in when you think about the 30 per cent or 40 per cent number we read about in the ‘Save your age’ section above.
==========
Let's Talk Money (Monika Halan)
- Your Highlight on page 133 | location 2034-2036 | Added on Sunday, 28 August 2022 21:24:27

There is a rule of thumb on how much equity you should hold: 100 minus your age. At age thirty, you should have 70 per cent of your holdings in equity and at age seventy, you should have 30 per cent of your holdings in equity. It is a good idea to do an annual audit of your money box to see if you are on track.
==========
Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 1649-1650 | Added on Monday, 19 September 2022 23:25:45

LIKE CHARACTER ARCS, PERSONAL MOTIVATION, RELATIONSHIPS, CONFLICTS, TURNS, REVEALS, AND PROPULSION. NONE OF IT IS IN THERE!
==========
Screenwriting 101 by Film Crit Hulk! (FILM CRIT HULK)
- Your Highlight at location 1795-1800 | Added on Wednesday, 21 September 2022 23:14:45

PEOPLE LOOOOOOOOVE TO TALK ABOUT QUENTIN TARANTINO’S NON-LINEAR STORYTELLING AS A COUNTER EXAMPLE TO TRADITIONAL “ACT-BASED” STORYTELLING, PARTICULARLY WITH PULP FICTION. BUT GUESS WHAT EVERYONE? THAT MOVIE HAS EXACTLY 5 ACTS, WHICH ARE ALL DISTINCTLY SEPARATED WITH TITLE CARDS. OH, AND RESERVOIR DOGS? 5 ACTS SEPARATED WITH TITLE CARDS. BOTH KILL BILLS? EACH ONE HAS 5 ACTS SEPARATED WITH TITLE CARDS. INGLOURIOUS BASTERDS? 5 ACTS SEPARATED WITH TITLE CARDS. DJANGO UNCHAINED? 5 ACTS WITH SUPER-IMPOSED SIGNIFIERS. YOU SENSE A THEME HERE?   HULK JUST CANNOT EMPHASIZE THIS ENOUGH.
==========
நில் கவனி தாக்கு / Nil, Kavani, Thaakku (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 134 | location 2637-2640 | Added on Monday, 7 November 2022 20:05:32

இனி வரப்போகும் கடைசி அத்தியாயத்தின் நிகழ்ச்சிகளை எதிர்பார்த்திருந்தீர்கள் என்றால் நீங்கள் புத்திசாலித்தனத்தில் சராசரிக்கு மிகவும் மேலே. எங்கள் ஆபீசில் வேலை செய்யத் தகுதி உடையவர்கள்.
==========
விரும்பிச் சொன்ன பொய்கள் / Virumbi Sonna Poigal (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 102 | location 2225-2229 | Added on Tuesday, 8 November 2022 23:26:48

அன்புள்ள வாசகருக்கு: இந்தக் கதையில் இன்னும் ஒரே ஒரு வார்த்தைதான் பாக்கியிருக்கிறது. அது என்ன வார்த்தை? ஆம். இல்லை. நீங்கள் எந்தப் பொய்யைச் சொல்ல விரும்புகிறீர்கள்?
==========
Building a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential (Tiago Forte)
- Your Highlight on page 19 | location 286-286 | Added on Saturday, 12 November 2022 17:56:29

You’re allowed to reference your notes at any time, provided you took them in the first place.
==========
Building a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential (Tiago Forte)
- Your Highlight on page 19 | location 289-290 | Added on Saturday, 12 November 2022 17:57:35

For modern, professional notetaking, a note is a “knowledge building block”—a discrete unit of information interpreted through your unique perspective and stored outside your head.
==========
Building a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential (Tiago Forte)
- Your Highlight on page 28 | location 415-416 | Added on Wednesday, 30 November 2022 23:36:17

It is in the power of remembering that the self’s ultimate freedom consists. I am free because I remember. —Abhinavagupta, tenth-century Kashmiri philosopher and mystic
==========
நில்லுங்கள் ராஜாவே / Nillungal Rajave (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 156 | location 2804-2807 | Added on Tuesday, 6 December 2022 19:14:28

பின் குறிப்பு : கதையை நம்ப முடியாதவர்களுக்கு நான் சிபாரிசு செய்யும் புத்தகம் Walter Bowart-ன் Operation Mind Control. அது கதைப் புத்தகமல்ல, முழுக்க முழுக்க நிஜம். 
-சுஜாதா.
==========
ரயில் புன்னகை / Rayil Punnagai (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 26 | location 493-494 | Added on Friday, 9 December 2022 21:48:06

‘குதிரை கடிக்கும்னு யாருக்குடி தெரியும் மூதேவி?’
==========
Save the Cat! (Blake Snyder)
- Your Highlight at location 39-40 | Added on Saturday, 10 December 2022 21:52:57

I also value Joseph Campbell's work. Hero With A Thousand Faces remains the best book about storytelling ever.
==========
ரயில் புன்னகை / Rayil Punnagai (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 68 | location 1305-1306 | Added on Sunday, 11 December 2022 00:15:35

பாபு சற்று உற்சாகப்பட்டு, ‘உம் பேர் என்னடா?’ என்றான். ‘போடா மயிரு’ என்றது.
==========
ரயில் புன்னகை / Rayil Punnagai (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 89 | location 1731-1734 | Added on Sunday, 11 December 2022 10:22:45

‘உள்ளே சென்ற எனக்கு எங்கிருந்தோ வெறி வந்து விட்டது. கையைக் காலை வேகமாக அசைக்கும்போது நீங்கள் போட்ட முடிச்சு, நீங்கள் எனக்குக் கட்டிய இரண்டாவது தாலி! மரணத் தாலி!
==========
ரயில் புன்னகை / Rayil Punnagai (Tamil Edition) (சுஜாதா / Sujatha)
- Your Highlight on page 110 | location 2175-2178 | Added on Sunday, 11 December 2022 13:05:28

‘நான் தமிழ்நாட்டில் இவளை வாங்கினேன். இருநூற்றைம்பது ரூபாய்! சுமார் நூற்றிருபது ப்ராங்க்! உங்கள் காட்டன் சட்டையைவிட விலை குறைவு’ என்று சிரித்தார்.
==========
the long walk (stephen king)
- Your Highlight at location 4355-4358 | Added on Monday, 2 January 2023 22:24:20

“Let him alone,” Stebbins said. “You made the promise like the rest of us.” “Fuck you,” Garraty said distinctly, and darted to McVries’s side. He touched McVries’s shoulders, setting him straight again. McVries looked up at him sleepily and smiled. “No, Ray. It’s time to sit down.” Terror pounded Garraty’s chest. “No! No way!”
==========
the long walk (stephen king)
- Your Highlight at location 4321-4326 | Added on Monday, 2 January 2023 22:24:45

“No—I can’t.” “All right.” “Maybe I’ll see you, man,” Baker said, and wiped slick blood from his face absently. Garraty lowered his head and wept. “Don’t watch ’em do it,” Baker said. “Promise me that, too.” Garraty nodded, beyond speech. “Thanks. You’ve been my friend, Garraty.” Baker tried to smile. He stuck his hand blindly out, and Garraty shook it with both of his. “Another time, another place,” Baker said.
==========
Guards! Guards! (Terry Pratchett)
- Your Highlight on page 49 | location 748-749 | Added on Wednesday, 22 March 2023 14:44:26

‘Right you are, Mr Secretary,’ he said. ‘I’ll see to it that he learns that arresting thieves is against the law.’
==========
Building a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential (Tiago Forte)
- Your Highlight on page 31 | location 464-466 | Added on Sunday, 23 April 2023 16:44:55

What are the chances that the most creative, most innovative approaches will instantly be top of mind? What are the odds that the best way to move forward is one of the first ways we come up with? This tendency is known as recency bias.4
==========
Building a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential (Tiago Forte)
- Your Highlight on page 32 | location 486-490 | Added on Sunday, 23 April 2023 16:48:06

When you feel stuck in your creative pursuits, it doesn’t mean that there’s something wrong with you. You haven’t lost your touch or run out of creative juice. It just means you don’t yet have enough raw material to work with. If it feels like the well of inspiration has run dry, it’s because you need a deeper well full of examples, illustrations, stories, statistics, diagrams, analogies, metaphors, photos, mindmaps, conversation notes, quotes—anything that will help you argue for your perspective or fight for a cause you believe in.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 462-462 | Added on Friday, 19 May 2023 15:50:14

The way it breaks down is this: One page of screenplay is approximately one minute of screen time.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 470-472 | Added on Saturday, 20 May 2023 08:32:19

In this unit of dramatic action, Act I, the screenwriter sets up the story, establishes character, launches the dramatic premise (what the story is about), illustrates the situation (the circumstances surrounding the action), and creates the relationships between the main character and the other characters who inhabit the landscape of his or her world.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 525-525 | Added on Saturday, 20 May 2023 08:38:15

Act III is that unit of action that resolvesthe story. It is not the ending
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 526-528 | Added on Saturday, 20 May 2023 08:38:35

Beginning, middle, and end; Act I, Act II, Act III. Set-Up, Confrontation, Resolution—these parts make up the whole. It is the relationship between these parts that determines the whole.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 533-534 | Added on Saturday, 20 May 2023 08:39:25

A Plot Point is always a function of the main character.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 630-631 | Added on Saturday, 20 May 2023 12:27:10

You need a subject to embody and dramatize the idea. A subject is defined as an action and a character. An action is what the story is about, and a character is who the story is about.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 738-738 | Added on Saturday, 20 May 2023 23:09:52

The principle rule of storytelling bears repetition: The more you know, the more you can communicate.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 776-777 | Added on Sunday, 21 May 2023 09:12:29

First, define the dramatic need of your character. What does your character want? What is his/her need? What drives him to the resolution of your story?
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 781-782 | Added on Sunday, 21 May 2023 09:26:59

The need of your character gives you a goal, a destination, an ending to your story. How your character achieves or does not achieve that goal becomes the action of your story.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 794-795 | Added on Sunday, 21 May 2023 09:29:01

Without conflict, there is no action. Without action, there is no character. Action is Character. What a person does is what he is, not what he says!
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 815-816 | Added on Sunday, 21 May 2023 16:43:25

What is character but the determination of incident? And what is incident but the illumination of character?
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 898-900 | Added on Sunday, 21 May 2023 17:08:03

Separate the components of his/her life into two basic categories: interior and exterior. The interior life of your character takes place from birth up until the time your story begins. It is a process that forms character.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 900-901 | Added on Sunday, 21 May 2023 17:08:22

The exterior life of your character takes place from the moment your film begins to the conclusion of the story. It is a process that reveals character.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 951-953 | Added on Sunday, 21 May 2023 18:44:42

The best way to do this is to separate your characters’ lives into three basic components—their professional life, their personal life, and their private life. These areas of your characters’ lives can be dramatized over the course of the screenplay.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 1135-1137 | Added on Monday, 22 May 2023 20:28:59

Reading it from this perspective, I saw four things, four essential qualities that seemed to go into the making of good characters: (1), the characters have a strong and defined dramatic need; (2), they have an individual point of view; (3), they personify an attitude; and (4), they go through some kind of change, or transformation.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 1237-1238 | Added on Monday, 22 May 2023 23:12:19

Film is behavior; action is character and character, action; what a person does is who he is, not what he says.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 1575-1576 | Added on Tuesday, 23 May 2023 20:45:56

establish three things to your reader or audience: (1) who is your main character? (2) what is the dramatic premise—that is, what’s your story about? and (3) what is the dramatic situation—the circumstances surrounding your story?
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 1736-1737 | Added on Wednesday, 24 May 2023 14:00:31

Before you write one shot, one word of dialogue on paper, you must know four things: your ending, your beginning, Plot Point I, and Plot Point II.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 1825-1828 | Added on Thursday, 25 May 2023 21:18:18

Determine the ending of your screenplay, then design your opening. The primary rule for the opening is: Does it set your story in motion? Does it establish your main character? Does it state the dramatic premise? Does it set up the situation? Does it establish or set up a problem that your character must confront and overcome? Does it state your character’s need?
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2183-2185 | Added on Saturday, 27 May 2023 17:19:32

One incident, the opening sex/ murder, is called the inciting incident, because it sets the story in motion;it is the first visual representation of the key incident, what the story is about, and draws the main character into the story line.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2231-2233 | Added on Saturday, 27 May 2023 23:56:28

the great eighteenth-century German philosopher, maintained that the essence of tragedy derives not from one character being right and the other being wrong, or from the conflict of good versus evil, but from a conflict in which both characters are right, and thus the tragedy is one of “right against right,” being carried to its logical conclusion.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2244-2245 | Added on Saturday, 27 May 2023 23:58:20

The inciting incident always leads us to the key incident, which is the hub of the story line, the engine that powers the story forward. The key incident reveals to us what the story is about.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2265-2265 | Added on Sunday, 28 May 2023 08:40:11

Many times the key incident and Plot Point I are the same.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2322-2325 | Added on Sunday, 28 May 2023 08:47:23

The first ten pages of your screenplay, as mentioned, establish three specific things. The main character is introduced so we know who the story is about. In Basic Instinct, after the murder, Michael Douglas is brought into the story when he investigates the crime scene. Who committed the murder and why? In American Beauty we know immediately that the story is about Lester Burnham; he is the main character. In Lord of the Rings: The Fellowship of the Ring, we immediately meet Frodo as Gandalf rides into the Shire.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2322-2323 | Added on Sunday, 28 May 2023 08:47:46

The first ten pages of your screenplay, as mentioned, establish three specific things. The main character is introduced so we know who the story is about.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2326-2328 | Added on Sunday, 28 May 2023 08:48:17

The second thing we create within this first ten-page unit of action is the dramatic premise. What is this story about? We can state it through dialogue, as in Chinatown, or show it visually, through the inciting incident, as in Crimson Tide. The third thing we need to establish is the situation, the circumstances surrounding the action, as in Mystic River,
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2326-2329 | Added on Sunday, 28 May 2023 08:48:29

The second thing we create within this first ten-page unit of action is the dramatic premise. What is this story about? We can state it through dialogue, as in Chinatown, or show it visually, through the inciting incident, as in Crimson Tide. The third thing we need to establish is the situation, the circumstances surrounding the action, as in Mystic River, or Finding Neverland, or Sideways.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2329-2330 | Added on Sunday, 28 May 2023 08:48:52

The two incidents provide the foundation of the story line. The inciting incident sets the story in motion and the key incident establishes the story;
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2418-2420 | Added on Sunday, 28 May 2023 16:13:46

but when you’re confronting 120 blank sheets of paper, you need to know only four things to structure your story line: the ending, the beginning, and Plot Points I and II.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2729-2731 | Added on Sunday, 28 May 2023 23:51:11

The purpose of the scene is twofold: Either it moves the story forward or it reveals information about the character. If the scene does not satisfy one, or both, of these two elements, then it doesn’t belong in the screenplay.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2815-2817 | Added on Monday, 29 May 2023 22:48:53

First create the context of the scene, then determine the content, what happens. What is the purpose of the scene? Why is it there? How does it move the story forward? What happens within the body of the scene? Where has the character just been before he or she enters the scene? What are the emotional forces working on the character during the scene? Do they impact the purpose of the scene?
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 2922-2923 | Added on Tuesday, 30 May 2023 00:00:09

the prosecution” look to me. It’s probably
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3062-3063 | Added on Friday, 2 June 2023 00:11:36

A screenplay is really a system of sorts, comprised of specific parts that are related and unified by action, character, and dramatic premise. We measure it, or evaluate it, in terms of how well it works or doesn’t work.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3067-3068 | Added on Friday, 2 June 2023 00:12:19

A sequence is a series of scenes connectedby one single idea with a definite beginning, middle, and end.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3107-3109 | Added on Friday, 2 June 2023 23:03:00

It’s an important concept to understand in the writing of a screenplay. It is the organizational framework, the form, the foundation,one of the major building blocks of the screenplay.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3128-3130 | Added on Friday, 2 June 2023 23:06:53

You can have as many or as few sequences as you want. There’s no rule about the number you need. All you need to know is the idea behind the sequence, the context; and then you can create a series of scenes, the content.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3351-3355 | Added on Tuesday, 13 June 2023 09:17:55

How do you build your storyline? By using 3 × 5 cards. Take a pack of 3 × 5 cards. Write the idea of each scene or sequence on a single card, and a few brief words of description (no more than five or six) to aid you while you’re writing. You need fourteen cards per thirty pages of screenplay. More than fourteen means you probably have too much material for Act I; less than fourteen means you may be too thin and need to add a few more scenes to fill out the Set-Up.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3384-3386 | Added on Tuesday, 13 June 2023 17:07:12

I suggest using fourteen cards per approximately thirty pages of screenplay. That means fourteen cards for Act I, fourteen cards for the First Half of Act II, fourteen cards for the Second Half of Act II, and fourteen cards for Act III. Why fourteen? Because it works.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3410-3411 | Added on Tuesday, 13 June 2023 17:17:05

I’ll say it once again: All drama is conflict. Without conflict, you have no action. Without action, you have no character; without character, you have no story. And without story, you ain’t got no screenplay.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3612-3615 | Added on Tuesday, 13 June 2023 22:58:38

The writer’s job is to write the screenplay and keep the reader turning pages, not to determine how a scene or sequence should be filmed. You don’t have to tell the director and cinematographer and film editor how to do their jobs. Your job is to write the screenplay, to give them enough visual information so they can bring those words on the page into life,
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3685-3686 | Added on Tuesday, 13 June 2023 23:06:21

Line 1—Called the slug line, or scene heading it states the general or specific locale. We are outside, EXT., somewhere in the ARIZONA DESERT; the time is DAY.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3686-3701 | Added on Tuesday, 13 June 2023 23:07:00

Line 2—Double-space, then, the action is single-spaced: your description of people, places, or action, from margin to margin. Descriptions of characters or places should not be longer than a few lines. And descriptive paragraphs, describing the action, should be no longer than four sentences. That’s not a hard-and-fast rule, it’s only a suggestion. The more “white space” you can have on the page, the better it looks. Line 3—Double-space; the general term Moving specifies a change in camera focus. (It is not a camera instruction. It is a “suggestion.”) Line 4—Double-space; there is a change from outside the jeep to inside. We are focusing on the character, Joe Chaco. He is the subject of the shot. Line 5—New characters introduced are always capitalized. Line 6—The character speaking is always capitalized and placed in the center of the page. Line 7—Stage directions for the actor are written in parentheses under the name of the character speaking, always single-spaced. Don’t abuse parentheses; use only when necessary. Line 8—Dialogue is placed in the center of the page, so the character speaking forms a block in the center of the page, surrounded by description from margin to margin. Several lines of dialogue are always single-spaced. Line 9—Stage directions also include what characters do within the scene—any kind of reactions, silent and otherwise. Line 10—Sound effects, or music effects, are always capitalized. This is an old tradition in the moviemaking process. Usually the last step in the filmmaking process is to give the film to the music and effects editors. The film is “locked”—that is, the picture track cannot be changed or altered.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3713-3713 | Added on Tuesday, 13 June 2023 23:11:31

Line 11—If you choose to indicate the end of a scene you may write “CUT TO:” or “DISSOLVE TO:”
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3713-3716 | Added on Tuesday, 13 June 2023 23:11:47

Line 11—If you choose to indicate the end of a scene you may write “CUT TO:” or “DISSOLVE TO:” (a dissolve is two images overlapping each other; one fades out as the other fades in) or “FADE OUT,” used to indicate a fade to black. It should be noted that optical effects like “fades” or “dissolves” are usually a film decision, made by the director or film editor. It is not the writer’s decision, but if it makes you feel more comfortable in terms of how to read the screenplay, do it.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 3983-3985 | Added on Wednesday, 14 June 2023 14:15:20

One of my favorite forms of resistance is sitting down to write and suddenly getting an idea for another screenplay—a much better idea, an idea so unique, so original, so exciting, you wonder what you’re doing writing this screenplay. You really think about it.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 4000-4006 | Added on Wednesday, 14 June 2023 14:16:41

Remember that dialogue is a function of character. Let’s review the purpose of dialogue. Dialogue: moves the story forward; reveals information about the characters—after all, they do have a history; communicates necessary facts and information to the reader; establishes character relationships, making them real, natural, and spontaneous; gives your characters depth, insight, and purpose; reveals the conflicts of the story and characters; reveals the emotional states of your characters; and comments on the action.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 4019-4021 | Added on Wednesday, 14 June 2023 14:18:35

The card system is your map and your guide; the Plot Points your checkpoints along the way, the “last-chance” gas station before you hit the high desert; the ending, your destination. What’s nice about the card system is that you can forget it. The cards have served their purpose.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 4069-4069 | Added on Wednesday, 14 June 2023 14:24:08

If you created the problem, you’ll be able to find a solution to it. All you have to do is look for it.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 4103-4103 | Added on Wednesday, 14 June 2023 22:00:59

If you don’t know whether your “choice” scenes work, they probably don’t.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 4285-4287 | Added on Wednesday, 14 June 2023 22:23:47

The hub of adaptation is finding a balance between the characters and the situation, yet keeping the integrity of the story. If you want to see a great adaptation, read Seabiscuit, then watch the movie, and notice the skill with which Gary Ross captured the integrity and inspiration of the source material.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 4775-4776 | Added on Thursday, 15 June 2023 09:56:50

If you decide to collaborate, design the writing experience into three stages: the ground rules, the preparation, and the mechanics of writing the material.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 4804-4811 | Added on Thursday, 15 June 2023 14:17:19

Which brings us to the subject of the rewrite. You know the adage “Writing is rewriting”; well, it’s true. The draft you send out into the marketplace is really three different drafts: the first “words on paper” draft; what I call “the mechanical draft”; and the third draft, “the polish.” This is the draft where most of the script gets written. After you complete the first “words on paper” draft, put it aside for a week. Then go back and reread the material from beginning to end in one sitting. Be sure to lock up all pens, pencils, and paper and to keep the computer turned off. You don’t want to take any notes as you read. You just want to read. When you go through the first “words on paper” draft, you’ll find yourself on the roller coaster of emotion. Some parts you think are terrible: The writing is poor, the story is all told in dialogue, the descriptions are too long, too thick, too cluttered, and what you’re reading feels weak, awkward, too direct, and just doesn’t work.
==========
_OceanofPDF.com_Screenplay_-_Syd_Field (Syd Field)
- Your Highlight at location 4865-4867 | Added on Thursday, 15 June 2023 14:25:12

Don’t do it. The title page is the title page. It should be simple and direct: “The Title” should be in the middle of the page, “A Screenplay by John Doe” directly under it, and your address or phone number in the lower-right-hand corner.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 12 | location 177-179 | Added on Thursday, 15 June 2023 21:57:02

The number one thing a good logline must have, the single most important element, is: irony. My good friend and former writing partner, the funny and fast-typing Colby Carr, pointed this out to me one time and he's IOO% correct. And that goes for whether it's a comedy or a drama.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 21 | location 317-323 | Added on Friday, 16 June 2023 15:18:24

In order to better create a good "What is it?" the spec screenwriter must be able to tell a good one-line or logline — a one- or two-sentence grabber that tells us everything. It must satisfy four basic elements to be effective: 1. Irony. It must be in some way ironic and emotionally involving — a dramatic situation that is like an itch you have to scratch. 2. A compelling mental picture. It must bloom in your mind when you hear it. A whole movie must be implied, often including a time frame. 3. Audience and cost. It must demarcate the tone, the target audience, and the sense of cost, so buyers will know if it can make a profit. 4. A killer title. The one-two punch of a good logline must include a great title, one that "says what it is" and does so in a clever way.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 27 | location 405-424 | Added on Friday, 16 June 2023 21:00:11

The 10 types of movies I have categorized here are: Monster in. the House — Of which Jaws, Tremors, Alien, The Exorcist, Fatal Attraction, and Panic Room are examples. Golden Fleece — This is the category of movie best exemplified by Star Wars; The Wizard of Oz; Planes, Trains and Automobiles; Back To The Future; and most "heist movies." Out of the Bottle — This incorporates films like Liar, Liar; Bruce Almighty; Love Potion ; Freaky Friday; Flubber; and even my own little kid hit from Disney, Blank Check. Dude with a Problem — This is a genre that ranges in style, tone, and emotional substance from Breakdown and Die Hard to Titanic and Schindler's List. Rites Of Passage — Every change-of-life story from IO to Ordinary People to Days of Wine and Roses makes this category. Buddy Love — This genre is about more than the buddy movie dynamic as seen in cop buddy pictures, Dumb & Dumber, and Rain Man — but also every love story ever made! Whydunit — Who cares who, it's why that counts. Includes Chinatown, China Syndrome, JFK, and The Insider. The Fool Triumphant — One of the oldest story types, this category includes Being There, Forrest Gump, Dave, The Jerk, Amadeus, and the work of silent clowns like Chaplin, Keaton, and Lloyd. Institutionalized. —Just like it sounds, this is about groups: Animal House, M*A*S*H, One Flew Over the Cuckoo's Nest, and "family" sagas such as American Beauty and The Godfather. Superhero — This isn't just about the obvious tales you'd think of, like Superman and Batman, but also includes Dracula, Frankenstein, even Gladiator and A Beautiful Mind. Are you thoroughly confused? Do you doubt my sanity when I tell you that Schindler's List and Die Hard are in the same category? Are you looking at me kinda funny when I tell you that buddy movies are just love stories in disguise? Good! Then let's dig further into the wonderful world of genre.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 51 | location 772-774 | Added on Monday, 19 June 2023 23:21:23

And let's be clear, the trick is to create heroes who: > Offer the most conflict in that situation > Have the longest way to go emotionally and... > Are the most demographically pleasing!
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 60 | location 908-912 | Added on Wednesday, 21 June 2023 23:56:36

The rule of thumb in all these cases is to stick to the basics no matter what. Tell me a story about a guy who... > I can identify with. > I can learn from. > I have compelling reason to follow. > I believe deserves to win and... > Has stakes that are primal and ring true for me.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 60 | location 908-913 | Added on Wednesday, 21 June 2023 23:56:49

The rule of thumb in all these cases is to stick to the basics no matter what. Tell me a story about a guy who... > I can identify with. > I can learn from. > I have compelling reason to follow. > I believe deserves to win and... > Has stakes that are primal and ring true for me. Follow that simple prescription for finding the hero of your movie and you can't go wrong. No matter what assignment, material, or sweeping canvas has been handed to you, you find the hero by finding the heart of the story.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 37 | location 565-566 | Added on Thursday, 22 June 2023 08:27:34

Slow down. The more you understand, the less you have to memorize.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 38 | location 569-570 | Added on Thursday, 22 June 2023 08:27:43

Do the exercises. Write your own notes.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 38 | location 573-573 | Added on Thursday, 22 June 2023 08:28:02

Read the “There Are No Dumb Questions.”
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 38 | location 576-576 | Added on Thursday, 22 June 2023 08:28:13

Make this the last thing you read before bed. Or at least the last challenging thing.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 38 | location 580-580 | Added on Thursday, 22 June 2023 08:28:32

Talk about it. Out loud.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 64 | location 981-989 | Added on Friday, 23 June 2023 08:08:46

THE BLAKE SNYDER BEAT SHEET PROJECT TITLE: GENRE: DATE: 1. Opening Image (1): 2. Theme Stated (5): 3. Set-up (1-10): 4. Catalyst (12): 5. Debate (12-25): 6. Break into Two (25) 7. B Story (30): 8. Fun and Games (30-55): 9. Midpoint (55): 10. Bad Guys Close In (55-75): 11. All Is Lost (75): 12. Dark Night of the Soul (75-85): 13. Break into Three (85): 14. Finale (85-110): 15. Final Image (no): Isn't this pure? And easy?
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 68 | location 1036-1037 | Added on Friday, 23 June 2023 13:47:38

The first 10 pages of the script, or first dozen pages at most, is called the "set-up."
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 69 | location 1054-1059 | Added on Friday, 23 June 2023 13:50:19

I like to think of movies as divided into three separate worlds. Most people call these three acts, I call em thesis, antithesis, and synthesis. The first IO pages and the rest of Act One is the movie's thesis; it's where we see the world as it is before the adventure starts. It is a full-fledged documentation of the hero's world labeled "before." There is a calm before the storm in this world, and especially in the set-up. If events that follow did not occur, it would pretty much stay this way. But there is a sense in the set-up that a storm's about to hit, because for things to stay as they are... is death. Things must change.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 72 | location 1090-1091 | Added on Friday, 23 June 2023 23:32:46

BREAK INTO TWO (25) It happens on page 25-1 have been in many arguments. Why not page 28? What's wrong with 30? Don't. Please.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 73 | location 1112-1114 | Added on Friday, 23 June 2023 23:43:39

The B story is also very often a brand new bunch of characters. We have not always met the B story players in the first IO pages of the screenplay. We did not even know they existed.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 73 | location 1119-1122 | Added on Friday, 23 June 2023 23:44:59

FUN AND GAMES (30-55) The fun and games section is that part of the screenplay that, I like to say, provides: The promise of the premise. It is the core and essence of the movie's poster. It is where most of the trailer moments of a movie are found. And it's where we aren't as concerned with the forward progress of the story — the stakes won't be raised until the midpoint — as we are concerned with having "fun."
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 76 | location 1157-1159 | Added on Saturday, 24 June 2023 00:03:19

After that I began to see how many movies had midpoints that changed the whole dynamic of the film. But the midpoint does more than present an "up" or "down." You will hear the phrase "the stakes are raised at the midpoint"
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 76 | location 1162-1164 | Added on Saturday, 24 June 2023 00:04:25

The midpoint has a matching beat in the BS? on Page 75 called "All Is Lost," which is described as "false defeat." These two points are a set. It's because the two beats are the inverse of each other. The rule is: It's never as good as it seems to be at the midpoint and it's never as bad as it seems at the All Is Lost point. Or vice versa!
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 77 | location 1167-1168 | Added on Saturday, 24 June 2023 00:05:36

The midpoint is either false victory or false defeat, and the All Is Lost is the opposite of it.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 77 | location 1169-1172 | Added on Saturday, 24 June 2023 00:06:10

BAD GUYS CLOSE IN (55-75) The section of script from page 55 to page 75, the midpoint to the All Is Lost, is the toughest part of the screenplay. (There's a hard bit of truth for you!) It never fails to be the most challenging for me, and there's no method to get through it other than to just to muscle your way. This is where your skills as a bullhead come in handy!
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 78 | location 1186-1189 | Added on Saturday, 24 June 2023 00:08:15

That is a classic example of what should happen in the Bad Guys Close In section of any script. The forces that are aligned against the hero, internal and external, tighten their grip. Evil is not giving up, and there is nowhere for the hero to go for help. He is on his own and must endure. He is headed for a huge fall, and that brings us to...
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 78 | location 1189-1192 | Added on Saturday, 24 June 2023 00:08:26

ALL IS LOST (75) As addressed above, the All Is Lost point occurs on page 75 of agood, well-structured screenplay. We know it is the opposite of the midpoint in terms of an "up" or a "down. " It's also the point of the script most often labeled "false defeat," for even though all looks black, it's just temporary. But it seems like a total defeat. All aspects of the hero's life are in shambles. Wreckage abounds. No hope.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 78 | location 1192-1196 | Added on Saturday, 24 June 2023 00:09:11

But here's my little trade secret that I put into every All Is Lost moment just for added spice, and it's something that many hit movies have. I call it the whiff of death. I started to notice how many great movies use the All Is Lost point to kill someone. Obi Wan in Star Wars is the best example — what will Luke do now?? All Is Lost is the place where mentors go to die, presumably so their students can discover "they had it in them all along." The mentor's death clears the way to prove that.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 80 | location 1212-1217 | Added on Saturday, 24 June 2023 00:11:48

DARK NIGHT OF THE SOUL (75-85) So now you're in the middle of a death moment at the All Is Lost point, but how does your character experiencing this moment feel about it? This question is answered in a section of the screenplay I call Dark Night of the Soul. It can last five seconds or five minutes. But it's in there. And it's vital. It's the point, as the name suggests, that is the darkness right before the dawn. It is the point just before the hero reaches way, deep down and pulls out that last, best idea that will save himself and everyone around him. But at the moment, that idea is nowhere in sight.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 80 | location 1223-1226 | Added on Saturday, 24 June 2023 00:12:56

BREAK INTO THREE (85) ... Hazzah! The solution! Thanks to the characters found in the B story (the love story), thanks to all the conversations discussing theme in the B story, and thanks to the hero's last best effort to discover a solution to beat the bad guys who've been closing in and winning in the A story, lo! the answer is found!!
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 81 | location 1231-1234 | Added on Saturday, 24 June 2023 00:14:03

FINALE (85-110) The finale is Act Three. This is where we wrap it up. It's where the lessons learned are applied. It's where the character tics are mastered. It's where A story and B story end in triumph for our hero. It's the turning over of the old world and a creation of a new world order — all thanks to the hero, who leads the way based on what he experienced in the upside-down, antithetical world of Act Two.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 81 | location 1239-1241 | Added on Saturday, 24 June 2023 00:15:06

FINAL IMAGE (110) As stated earlier, the final image in a movie is the opposite of the opening image. It is your proof that change has occurred and that it's real. If you don't have that final image, or you can't see how it applies, go back and check your math — there is something not adding up in Act Two.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 82 | location 1254-1300 | Added on Saturday, 24 June 2023 00:22:11

MISS CONGENIALITY___________________ (A $IOO million hit comedy in 15 beats) Opening Image: Miss Congeniality opens on Sandra Bullock's character in flashback as a playground tough. The image is: Sandra surrounded by boys. Sandra is a tomboy and she's beating them up. Sandra has issues. When we CUT TO: The Present, Sandra is still surrounded by boys, still a tomboy, but she's an FBI agent, at home in the world of Men — kind of. Theme Stated: When Sandra declares that she doesn't need to worry about being "feminine" because she's an FBI agent, that statement is the movie's theme. But is this statement true? We shall see. The movie will explore the subject of femininity. It is an essay on the pros and cons of being tough and a woman. Can you be both? That's what this movie is about. The Set-up: By page IO we have met everyone who will appear in the A story of the movie and "set up" the world. We've met Benjamin Bratt, whom Sandra kind of likes. But she is off his radar; he likes "classy" girls that Sandra scoffs at. We also meet Sandra's boss (Ernie Hudson) and the world of the FBI. It's tough, a boy's club, and Sandra fits right in. And though she is a wheezing nerd with bad hair and no social life, she seems happy — a classic set-up, with a sense a storm's about to hit. It can't stay like this. Stasis equals death. Catalyst: A classic call to adventure. News comes that there's been a murder threat at the American Miss Pageant. We also meet those in charge of the pageant, Candice Bergen and her son, and their "Bert Parks," William Shatner and his hairpiece — and a very sporty model it is! To stop the murders, they hatch a plan that calls for a female agent to go undercover as a contestant. After going through a database of every available female FBI agent... they pick Sandra. Debate: But can she pull it off? That is the debate question of this section. It is answered after several funny moments with Sandra's mentor (Michael Caine), who agrees to take on the challenge of turning Sandra into a sexy girl. Break into Two: Sandra strides from her makeover looking hot, hot, hot in her mini-skirt. Even Benjamin is impressed. Then she stumbles. This isn't going to be easy, but Sandra is ready to try. So let the act break and Act Two begin! Fun and Games: Classic promise of the premise, including all those funny trailer moments where a pistol-packing FBI agent is undercover at the American Miss pageant. Sandra's water-glass talent show demonstration ends as she leaps off the stage to nab a suspect, etc. The fish is out of water and the clash leads to jokes. This is why we came to this movie. This is what lured us when we saw the poster. And it's fun! B Story: The love story here is actually between Sandra and the girl contestants. Why? Because the theme of the movie is about femininity and Sandra does not know this world. It is full of funhouse mirror versions of femininity — each contestant has a talent and a quirk and each, to Sandra's surprise, needs and likes her. It is Sandra's interaction with the girls of Girl World that carries the message of the picture and is its heart. And while Sandra also gets to kiss Benjamin by the movie's end, it will be because of the girls that she learns and grows and discovers her feminine side. Midpoint: The fun and games are over as a new threat to the pageant is announced and Sandra's stakes are raised. We have seen all the fun stuff (Sandra and her water glasses), met the suspects, had the joy of watching a tomboy interact with the girls she once thought odd. Now the real trouble starts. Bad Guys Close In: Sandra's doubts about her femininity grow, her conflict with her mentor deepens, and, in this case, actual bad guys move closer, unseen in the shadows of the pageant. Though no one has died, there's a list of suspects. All Is Lost: Told by her boss to stand down, Sandra refuses. She has a lead on a suspect. But her boss delivers an ultimatum: Either quit the case or be fired. Sandra chooses to stay on at the pageant. Thus, she has reached a classic All Is Lost moment: She is worse off than when this movie started! The whiff of death is the death of her identity. Without being "the Girl with the Badge" — who is she? Not even her mentor (Caine) can help, but he does give her a last weapon: a new dress. Dark Night of the Soul: Sandra arrives for the pageant finale and is a total mess. She's lost in the netherworld of being neither FBI agent nor full-fledged woman. What to do? Break into Three: With help from friends she's made in Girl World, Sandra is put back together by the other contestants for the pageant finale. Embraced by what was once foreign to her, and confident that the girls really care, Sandra is revived. By helping Sandra, the girls also help themselves. Finale: The pageant itself. A classic bit of synthesis occurs when Sandra hangs in during the talent portion of her show by using her FBI skills on stage with Benjamin. The two worlds are fused together, answering the question raised in Theme Stated: Yes! She can be both tough and sexy. Sandra now catches the bad guys, Gandice and her son. (Candice's warped view of her own femininity is what caused her to sabotage the pageant.) Sandra has proven herself to be a woman among women. And she's brought the bad guys to justice. Final Image: Miss Congeniality closes with the opposite of the opening image: Sandra is surrounded by women. Sandra is awarded the coveted Miss Congeniality Award by her fellows — quite a change! The Real Happy Ending: $IOO million in domestic B.O. Now that you know that it works, you'll start to see how these beats can apply to your script.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 89 | location 1363-1366 | Added on Saturday, 24 June 2023 20:11:06

FIRST CARDS FIRST Once you've bought the size and type of board you feel most comfortable with, put it up on the wall and have a look. It's blank, isn't it? Now take three long strips of masking tape and make four equal rows. Or if you're more daring, use a magic marker instead. Either way it looks like this: 
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 90 | location 1366-1368 | Added on Saturday, 24 June 2023 20:11:24

Row #1 is Act One (pages 1-25); row #2 represents the first half of Act Two up to the midpoint (25-55); row #3 is the midpoint to the Break into Act Three (55-85); and row #4 is Act Three to the movie's final image (85-110).
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 92 | location 1399-1402 | Added on Saturday, 24 June 2023 20:16:50

I start with the midpoint. As discussed in the previous chapter, it's an "up" or "down. " Either your hero (or heroes) reach a dizzyingly false victory at page 55 or an equally false and dizzying defeat. In most cases, nailing the midpoint will help guide you — and it is the one decision you must make before you can go on. Most people can nail the break into Act Two. The set-up you've got, and the adventure, or at least the beginning of it, is the movie in your head. But where does it go from there? The midpoint tells you. And that's why figuring it out is so important.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 96 | location 1462-1467 | Added on Saturday, 24 June 2023 20:30:44

+/- AND >< Now that you have your 40 cards up on The Board and you're pretty sure this is how your story goes, you think you're done, but you're not. Here are two really important things you must put on each card and answer to your satisfaction before you can begin writing your screenplay: One is the symbol +/-. The other is the symbol ><. These two symbols should be written in a color pen you have not used and put at the bottom of each card like this: 
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 97 | location 1477-1480 | Added on Saturday, 24 June 2023 20:32:51

The other symbol, ><, denotes conflict. To understand what the conflict is, I always like to think of a scene like this: As the lights come up, two people walk into a room from opposite doors, meet in the middle, and begin to struggle past each other to reach the door on the other side. They each enter the scene with a goal and standing in their way is an obstacle. That's conflict.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 100 | location 1519-1520 | Added on Saturday, 24 June 2023 21:15:32

The worst thing that can happen in screenwriting is to not finish. Half-written screenplays never sell, that's for sure. And working out The Board in advance is your best guarantee that this won't happen.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 100 | location 1533-1545 | Added on Saturday, 24 June 2023 21:17:41

Are you excited? You should be. But let's just make sure you're set by going over the "Get Ready for Your Deep-Sea Dive" Checklist: 1. You have come up with a great idea. And I mean it's killer! You have a killer title, a KILLER logline, and you've tested it on friends and strangers, and every one of them can't wait to see your movie! 2. You have done your homework on genre. You've figured out what your movie is most like and screened every relevant Hollywood film in the past 20 years. You know what the filmmakers did right, what they did wrong, and more importantly how your movie will be a step forward and be the same thing... only different. And you are convinced you've got something new!! 3. You have figured out the perfect hero to take this journey. This is the character that offers the most conflict in that situation, has the longest way to go emotionally, and is the most demographically pleasing! And you've given your hero a primal goal and a real tad guy who wants to stop him from achieving it!!! 4. Finally you have beat out your movie using the BS2 and have put up all those great scenes on The Board, tried many ideas, themes, and storylines, and have whittled it all down to 40 actual scenes with each scene indicating its emotional change from beginning to end (+/-) and what the conflict is in each (><)!!!! Man, are you ready!! What's stopping you?
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 104 | location 1589-1592 | Added on Saturday, 24 June 2023 21:22:53

The adjunct to Save the Cat says: "A screenwriter must be mindful of getting the audience 'in sync' with the plight of the hero from the very start." To explain what I mean, let's take a look at a movie that definitely does not try to kiss up to the audience: Pulp Fiction. Scene One of Pulp Fiction, basically, is where we meet John Travolta and Samuel L. Jackson. These are the "heroes."
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 105 | location 1600-1601 | Added on Sunday, 25 June 2023 00:21:05

The Immutable Laws of Screenplay Physics tell us that when you have a semi-bad guy as your hero — just make his antagonist worse!! Alittle further on in the introductory scene of Pulp Fiction, Tarantino does just that.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 105 | location 1603-1605 | Added on Sunday, 25 June 2023 00:21:52

This is just another example of a great STC trick: When your hero is slightly damaged goods, or even potentially unlikable, make his enemy even more horrible. If you think Travolta is bad, well, look at the Boss. Travolta is a doll compared to that guy. And BINGO! The scales of whom we like versus whom we hate are adjusted to perfect balance. Let the rooting begin!
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 106 | location 1622-1622 | Added on Sunday, 25 June 2023 00:27:57

THE POPE IN THE POOL
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 108 | location 1654-1654 | Added on Sunday, 25 June 2023 00:29:47

DOUBLE MUMBO JUMBO Double Mumbo Jumbo is a favorite.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 108 | location 1655-1657 | Added on Sunday, 25 June 2023 15:06:10

I propose to you that, for some reason, audiences will only accept one piece of magic per movie. It's The Law. You cannot see aliens from outer space land in a UFO and then be bitten by a Vampire and now be both aliens and undead. That, my friends, is Double Mumbo Jumbo.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 110 | location 1684-1685 | Added on Sunday, 25 June 2023 15:13:13

LAYING PIPE Minority Report starring Tom Cruise did it. So did Along Came Polly
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 111 | location 1701-1702 | Added on Sunday, 25 June 2023 15:15:24

It took 40 minutes to get to the hook, which is: A detective discovers he is the criminal. Say it with me now, fellow students: That's a lot of pipe!!
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 112 | location 1716-1739 | Added on Sunday, 25 June 2023 15:18:02

BLACK VET A.K.A. TOO MUCH MARZIPAN When dealing with conceptual creativity, an offshoot of the Double Mumbo Jumbo rule is a rule I call Black Vet. You often fall in love with certain elements of a movie idea and cling to them. You can't let go. You're Lenny in Of Mice and Men and you're going to squeeze that little rodent to death. And usually when you find yourself in this situation, you must stop. This is when the Black Vet rule allows you to step back from the concept. What is Black Vet? Better to tell you where it came from. In the 1970s. comedian and now actor/writer/director, Albert Brooks, made several film parodies for Saturday Night Live. In one of his best, a piece that tweaked the nose of NBC and the silliness of network programming, Brooks did a hilarious fake promo for several upcoming shows that would be seen that fall on NBC. One of these was called Black Vet. In unctuous "NBC — Be There! " style, it showed a black actor who played a veterinarian cavorting with animals at his clinic. But this guy also has a past in the military. The punchline came when the narrator announced the name of the show and its fake promo line: "Black Vet: He's a veteran and a veterinarian!" Hilarious! But it is also so close to a real show on real TV, so much about the desperation of Hollywood types trying to squeeze 10 pounds of shit into a five-pound bag, that I found it to be brilliant. And I personally never forgot it. "Black Vet" is a joke, and yet you'd be surprised how often we creative folks get caught piling on our great concepts. Like eating too much marzipan, a little goes a long way where ideas are concerned. And more does not always mean better. In my career, my favorite example of this came when I was working with my first writing partner, the quick-witted and entrepreneurial Howard Burkons. We were young and energetic writers with a lot of great ideas — and a lot of bad ones. But Howard and I achieved early success and even earned our WGA cards while working together, a huge step forward for us both. Because we were working in TV, we had a TV series idea, and a good one I thought. Set in the 1950s, it followed the adventures of a blacklisted private eye. We called the show Lefty. Get it? Lefty referred to his political affiliation, but sounded tough and very '5°s- Okay. But Howard and I killed the idea when Howard insisted we also make our hero left-handed. And maybe, Howard suggested, he could also be an ex-boxer, a left-handed ex-boxer! So he's a Communist and an ex-boxer and he's left-handed? I kept asking. And Howard thought that was great. Well... to my mind it was "pick one." To Howard it was a matter of milking the idea for all it was worth. And while I usually trusted Howard's instinct on this stuff— Howard is brilliant when it comes to conceptualizing and a much smarter marketer than I — I just didn't get it. It was Too Much Marzipan. It was Black Vet.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 114 | location 1744-1749 | Added on Sunday, 25 June 2023 15:22:39

WATCH OUT FOR THAT GLACIER! Very often when bad guys are involved, they will be way off screen somewhere, far away from our hero, and "closing in." Sometimes they close in so slowly, the noose tightens so lackadaisically, you want to yell at the screen: Watch Out for That Glacier! Well, I do anyway. That's how the "danger" is coming toward your hero: s-l-o-w-l-y! One inch per year. That's how unthreatening your supposedly threatening horror is. And if you think this doesn't happen to the big boys as well as you and me, you're wrong. Slow danger happens to good movies all the time.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 116 | location 1771-1774 | Added on Sunday, 25 June 2023 15:26:02

THE COVENANT OF THE ARC The Covenant of the Arc is the screenwriting law that says: Every single character in your movie must change in the course of your story. The only characters who don't change are the bad guys. But the hero and his friends change a lot. And it's true.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 117 | location 1794-1797 | Added on Sunday, 25 June 2023 21:03:27

"Everybody arcs." That's one of the slogans I have written on a yellow Post-it note and have stuck to the top of my iMac computer whenever I am writing a screenplay. And before I sit down to write, I make notes on how all my characters are going to arc by charting their stories as they are laid out on The Board, with the milestones of change noted as each character progresses through the story.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 117 | location 1794-1800 | Added on Sunday, 25 June 2023 21:07:14

"Everybody arcs." That's one of the slogans I have written on a yellow Post-it note and have stuck to the top of my iMac computer whenever I am writing a screenplay. And before I sit down to write, I make notes on how all my characters are going to arc by charting their stories as they are laid out on The Board, with the milestones of change noted as each character progresses through the story. It is a must that you do the same. If your script feels flat, if you are getting the sense that something's not happening in the story, do a quick Covenant of the Arc check and see if you need to do more work on making everybody change and grow and transform. Everyone, that is, except the bad guy. KEEP THE PRESS OUTS
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 118 | location 1803-1810 | Added on Sunday, 25 June 2023 21:09:50

Keep the Press Out, the rule I learned from Steven Spielberg, was taught to me while we were developing a screenplay Jim Haggin and I had sold to Amblin called Nuclear Family. The premise of this movie is: A family camps out one night on a nuclear dumpsite and wakes up the next day with super powers. Nuclear Family is a wish-fulfillment comedy. Each family member has a need that their super-power quenches: Dad, an ad exec, gets the power to read minds and thus leaps ahead of his ratfink nemesis at work; Mom, a housewife, gets the power of telekinesis and becomes a super Mom who can move objects with her mind; Teen Son becomes The Flash and is suddenly his high school's star halfback; and Teen Daughter, forever behind in her schoolwork, gets a super brain and is now able to ace her SATs. It's a fun, special effects-laden fantasy — but it has a message, too. In the end, each of them gives up their powers. Being "successful" they find is not as important as being a family.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 120 | location 1829-1831 | Added on Sunday, 25 June 2023 22:37:28

The point is, bring the press in with care. Unless it's about the press, unless your movie involves a worldwide problem and we follow stories with characters all over the world, and it's important for them all to know about each other, take a tip from me... and Steven Spielberg: Keep the Press Out.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 120 | location 1837-1841 | Added on Sunday, 25 June 2023 22:40:05

Once you see these little tricks, the urge to put a label to them can't be far behind. This is why Save the Cat, the Pope in the Pool, Black Vet, and Keep the Press Out are memorable — to me anyway — and vital to be so. Yes, it's good, slangy fun. It's also a way not to forget what you've learned. And when you catch yourself drifting into a mistake, or pushing up against a rule you'd like to break, these pithy little lessons give you an instant assessment on the pros and cons of minding or breaking... The Law. How many times have I caught myself drifting into one or more of these errors during the course of creating and writing a screenplay? Well, many. But the point of all this is to learn shortcuts to save time.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 123 | location 1873-1876 | Added on Sunday, 25 June 2023 22:51:57

And it's really not all that hard. It's just a matter of being honest in your assessment and willing to do the work to fix all the problems. So, here are typical trouble spots that others have faced, long before you came along, that may help in your rewrite. THE HERO LEADS
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 123 | location 1884-1885 | Added on Sunday, 25 June 2023 22:58:49

Well if so, you've got to fix it, because if there's one thing we know for sure it's the truism that: The hero must be proactive. It's The Law. If he's not, he's not a hero.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 123 | location 1886-1886 | Added on Sunday, 25 June 2023 22:59:28

1. Is your hero's goal clearly stated in the set-up?
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 124 | location 1888-1889 | Added on Sunday, 25 June 2023 22:59:46

2. Do clues of what to do next just come to your hero or does he seek them out?
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 124 | location 1890-1890 | Added on Sunday, 25 June 2023 23:00:30

Is your hero active or passive?
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 124 | location 1893-1893 | Added on Sunday, 25 June 2023 23:01:29

4. Do other characters tell your hero what to do or does he tell them?
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 124 | location 1893-1895 | Added on Sunday, 25 June 2023 23:02:46

Here's a great rule of thumb: A hero never asks questions! The hero knows and others around him look to him for answers, not the other way around. If you see a lot of question marks in your hero's dialogue, there's a problem. The hero knows; he never asks.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 124 | location 1897-1901 | Added on Sunday, 25 June 2023 23:03:20

TALKING THE PLOT Another problem found in poorly executed screenplays is "talking the plot," and it's a dead giveaway that the writer is green. Characters will walk into scenes and say, "Well, you're my sister, you should know! " and "This sure isn't like the time I was the star fullback for the N.Y. Giants until my... accident." This kind of dialogue is... (say it with me) bad! And yet I completely understand why it's in there.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 125 | location 1906-1907 | Added on Sunday, 25 June 2023 23:05:24

Good dialogue tells us more about what's going on in its subtext than on its surface. Subtle is better. And talking the plot is like using a sledgehammer. It's overkill.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 126 | location 1920-1920 | Added on Sunday, 25 June 2023 23:14:43

MAKE THE BAD GUY BADDER
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 127 | location 1943-1945 | Added on Sunday, 25 June 2023 23:32:24

TURN,TURN, TURN This is another of those slogans that I have written on a faded Post-it '1 note. It's been stuck above my desk for 20 years. It was the first piece of wisdom I ever heard about screenwriting and I'll be damned if I know who told me.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 127 | location 1946-1948 | Added on Sunday, 25 June 2023 23:33:04

The basis of the "Turn, Turn, Turn" rule is: The plot doesn't just move ahead, it spins and intensifies as it goes. It is the difference between velocity (a constant speed) and acceleration (an increasing speed). And the rule is: It's not enough for the plot to go forward, it must go forward faster, and with more complexity, to the climax.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 129 | location 1967-1970 | Added on Sunday, 25 June 2023 23:36:04

THE EMOTIONAL COLOR WHEEL When they say a good movie is "like a roller-coaster ride," they mean that as an audience member watching the story unfold, your emotions have been wrung out. You've laughed; you've cried; you've been aroused; you've been scared; you've felt regret, anger, frustration, near-miss anxiety and, ultimately, breathtaking triumph. And when the lights come up, you walk out of the theater feeling absolutely drained.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 130 | location 1993-1995 | Added on Sunday, 25 June 2023 23:40:57

"Hi how are you I'm fine" tells us just how boring flat dialogue can be and what a waste of space it is. Flat dialogue is the kind that anyone can say. And odds are that if your script is full of lines that are right out of real life, that ring true but ring dull, you're not working hard enough to make the characters come to life. Because odds are that if your dialogue is flat, so are the people speaking it.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 131 | location 2002-2006 | Added on Sunday, 25 June 2023 23:42:20

Then Mike showed me this simple Bad Dialogue Test: Take a page of your script and cover up the names of the people speaking. Now read the repartee as it goes back and forth between two or more characters. Can you tell who is speaking without seeing the name above the dialogue? The first time I tried it, there in Mike's office at Barry & Enright, I was stunned. Damn it, he was right. I couldn't tell one of my characters from the others, and then and there I figured out something else too: All the characters had MY voice!! In a good script, every character must speak differently. Every character must have a unique way of saying even the most mundane "Hi How are you I'm fine" kind of chat.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 132 | location 2012-2015 | Added on Sunday, 25 June 2023 23:44:27

TAKE A STEP BACK I have just been involved in IO months of rewrites. My partner Sheldon and I were working on our Golden Fleece and it took seven — count 'em seven — drafts to get it right. One of the reasons it took so long is that we had made a basic mistake. We had broken the rule of "Take a Step Back." Just so you know, it happens to everybody — even the pros.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 133 | location 2029-2031 | Added on Sunday, 25 June 2023 23:48:36

Take a Step Back applies to all your characters. In order to show how everyone grows and changes in the course of your story, you must take them all back to the starting point. Don't get caught up in the end result and deny us the fun of how they get there. We want to see it happen. To everyone.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 133 | location 2036-2039 | Added on Sunday, 25 June 2023 23:49:33

A LIMP AND AN EYE PATCH Sometimes in a screenplay, the basics are done, your hero and bad guy are great, the plot explodes and intensifies after the midpoint, and everybody's got snappy dialogue. Everything's great except for one small problem: There seem to be too many minor characters. It's hard to tell one from another. Readers will confuse that guy with this other guy. And it bugs you! Isn't it obvious?!
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 135 | location 2060-2060 | Added on Sunday, 25 June 2023 23:52:22

IS IT PRIMAL?
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 136 | location 2077-2080 | Added on Sunday, 25 June 2023 23:54:05

Each of these is about a primal need that might be better seen as a biological need, the prime directive. The desire to win the lottery is, in fact, the desire to have more food, more wives, make more children, to be able to reproduce at will. The desire for revenge is, in fact, the desire to knock off a competing DNA carrier and propel your own DNA forward. The desire to find one's parent or child is the desire to shore up and defend existing DNA and survive.
==========
Save the Cat! (Blake Snyder)
- Your Highlight on page 136 | location 2085-2097 | Added on Sunday, 25 June 2023 23:55:41

Ask yourself these questions, the "Is It Broken?" Test: 1. Does my hero lead the action? Is he proactive at every stage of the game and fired up by a desire or a goal? 2. Do my characters "talk the plot"? Am I saying things a novelist would say through my characters instead of letting it be seen in the action of my screenplay? 3. Is the bad guy bad enough? Does he offer my hero the right kind of challenge? Do they both belong in this movie? 4. Does my plot move faster and grow more intense after the midpoint? Is more revealed about the hero and the bad guy as we come in to the Act Three finale? 5. Is my script one-note emotionally? Is it all drama? All comedy? All sadness? All frustration? Does it feel like it needs, but does not offer, emotion breaks? 6. Is my dialogue flat? After doing the Bad Dialogue Test does it seem like everyone talks the same? Can I tell one character from another just by how he or she speaks? 7. Do my minor characters stand out from each other, and are they easy to differentiate by how they look in the mind's eye? Is each unique in speech, look, and manner? 8. Does the hero's journey start as far back as it can go? Am I seeing the entire length of the emotional growth of the hero in this story? 9. Is it primal? Are my characters, at their core, reaching out for a primal desire — to be loved, to survive, to protect family, to exact revenge?
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 58 | location 886-887 | Added on Tuesday, 27 June 2023 07:28:10

Creating a Git repository involves running the git init command inside the top folder of your project.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 75 | location 1139-1140 | Added on Thursday, 29 June 2023 19:07:21

The first thing to know is that only the files that you add are committed.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 76 | location 1154-1157 | Added on Thursday, 29 June 2023 19:10:00

The commit object does not actually store your changes—well, not directly, anyway. Instead, Git stores your changes in a different location in the Git repository and simply records (in the commit) where your changes have been stored. Along with recording where it stored your changes, the commit records a bunch of other details: A pointer to the location inside the .git folder where Git has stored your changes, called a tree.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 77 | location 1168-1169 | Added on Thursday, 29 June 2023 19:22:22

Commit objects are stored by Git in binary format, making them very hard for humans to read but super safe and efficient for Git.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 77 | location 1175-1181 | Added on Thursday, 29 June 2023 19:25:10

The Git repository itself is divided into two parts—the first part is called the “index,” and the second part is what we will refer to as the “object database.” When we run git add <filename>, Git makes a copy of the file and puts it in the index. We can think of the index as the “staging area,” wherein we can put things till we are sure we want to commit to them. Now when we run the git commit command, it takes the contents of the staging area and stores those in the object database, also known as Git’s memory bank. To put it another way, the index is a place to temporarily house changes. Typically, you make some changes, add them to the index, and then decide if you are ready to commit—if yes, then you make a commit. Otherwise, you can continue making changes, add more changes to the staging area, and then when you feel you are in a good place, commit.
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 117-117 | Added on Thursday, 29 June 2023 22:09:35

Breathing is breathing: hard to describe when working fine, and when wrong, you can clearly spell out the discomfort and the panic it causes.
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 201-203 | Added on Thursday, 29 June 2023 22:20:09

‘Whatever happens tomorrow I just want God above to give us the World Cup.’ I was taking my sleeping tablet. ‘You know,’ I told Nitin, ‘He can take whatever he wants, take away my life, giving me pain … God, just give us the World Cup.’
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 218-221 | Added on Thursday, 29 June 2023 22:22:16

Did I ask for cancer? That night, when I was asking God to make a deal with me, did I tempt fate? When you are ill, when you are down, these questions can come and haunt you. But you should square your shoulders and look them in the eye. Look over your life. Count your blessings. Like me you will come around to the view that all in all, like in cricket, everything balances out and it all ends up OK.
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 329-329 | Added on Saturday, 1 July 2023 10:01:47

At thirteen I was thirteen, not Sachin Tendulkar at thirteen. Sachin Paaji is an exception.
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 589-590 | Added on Saturday, 1 July 2023 10:39:01

The break-up of the number of Tests I’ve played per year reads like a bank account number: 1-5-4-9-2-4-6-3-3. In this span I have three 100s and ten 50s. There is no consistency or pattern there that I could hang on to.
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 613-615 | Added on Saturday, 1 July 2023 10:42:52

Viru Lala had got a little carried away. It’s his style. First ball of the World Cup, and he stepped back and smashed a four. Good afternoon, Bangladesh. Hello, World Cup! Because he is always so satisfied and happy, I call Viru Viv Richards Sehwag, Lala. Always like a happy businessman going about his day’s work.
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 822-823 | Added on Saturday, 1 July 2023 11:57:47

Chennai is a great city, and if they had great weather it could be paradise, but it is not. Everything is top volume, be it heat, humidity, or the crowd’s ability to whistle. It is not a place for the faint-hearted.
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 839-841 | Added on Saturday, 1 July 2023 11:59:46

As far as we were concerned, it didn’t matter. We didn’t want to be third, fourth, or even second. We wanted to be world champions. We would have to beat the world champions to be world champions. That’s the way the dice had rolled, and so be it.
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 1078-1079 | Added on Sunday, 2 July 2023 10:21:37

What was more important life or the World Cup? My answer to myself was if life throws me back there again into the same stage, I will end up taking the same decision.
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 1666-1667 | Added on Wednesday, 5 July 2023 12:49:51

‘After three cycles,’ Dr Einhorn said, ‘you could walk out of here like a man who never had cancer.’ I never forgot those words.
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 1789-1791 | Added on Wednesday, 5 July 2023 23:21:35

I remembered what Kapil Dev had said to us in the dressing room once when he came to speak to us. He said that there is an old adage which is annoying to hear in good times and wonderful to hear in bad times and it is: ‘This too shall pass.’
==========
Singh, Y. - The Test of My Life_ from cricket to cancer and back-Random House Publishers India (2013) (Singh, Yuvraj)
- Your Highlight at location 2437-2439 | Added on Monday, 10 July 2023 19:48:08

As I stepped into the lights at Chepauk, I was hit in the gut by the sound of the crowd. It was thunderous and tremendous and the stadium was filled with whistles. No crowd in cricket can give an Indian cricketer such a loud, long and high-pitched whistle of approval as Chepauk does.
==========
Building a Second Brain: A Proven Method to Organize Your Digital Life and Unlock Your Creative Potential (Tiago Forte)
- Your Highlight on page 35 | location 522-525 | Added on Saturday, 22 July 2023 16:00:15

As people set out on their Second Brain journey, there are three stages of progress I often observe—and even encourage. Those stages are remembering, connecting, and creating. It takes time to fully unlock the value of using digital tools to enhance and extend what our minds are capable of, but there are also distinct benefits at every step along the way.
==========
JUST ONE DAMNED THING AFTER ANOTHER (Jodi Taylor)
- Your Highlight on page 112 | location 1708-1708 | Added on Thursday, 7 September 2023 09:03:55

He took a deep breath and exhaled, not looking at me. ‘I’m from the future.’
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 10 | location 104-105 | Added on Saturday, 23 September 2023 17:51:51

Money is your one true friend till your last breath. After that it does not matter. But till then, look after it.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 18 | location 202-203 | Added on Saturday, 23 September 2023 18:27:42

A fifth plus is the automatic diversification that a mutual fund scheme provides.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 16 | location 183-183 | Added on Saturday, 23 September 2023 18:28:01

A third reason that makes mutual funds attractive is the ease of comparison for investors. It
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 17 | location 193-194 | Added on Saturday, 23 September 2023 18:28:39

And then there is the issue of cost. Costs to enter, maintain and exit a product are important in a financial product specially if it is to be held for a long period of time.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 18 | location 208-209 | Added on Saturday, 23 September 2023 18:28:56

A sixth reason that works in favour of mutual funds is that they can be used to build very diversified portfolios across asset classes and within an asset class.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 19 | location 223-226 | Added on Saturday, 23 September 2023 18:31:32

You are doing okay if you understand that investing is not just about returns; investing is also about liquidity; investing is about diversification; investing is about costs; investing is about ease of transaction; and  investing is about having the money when you need it.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 22 | location 243-243 | Added on Saturday, 23 September 2023 18:41:11

Hoffland Finance, CRB, Saradha, Sahara are all names that are associated with vanished household savings.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 26 | location 285-286 | Added on Saturday, 23 September 2023 18:59:40

The biggest risk in a financial product is fraud, that the entity which collects the money runs away with it—diverting the sum into shell companies and then declaring itself bankrupt.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 26 | location 289-290 | Added on Saturday, 23 September 2023 19:00:21

the Indian mutual fund has a three-tier structure—sponsor, trust and asset management company (AMC).
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 26 | location 295-298 | Added on Saturday, 23 September 2023 19:03:15

The sponsors set up a company to manage funds called XYZ asset management company or AMC. The AMC is also called the mutual fund. So, the sponsor sets up the business, the AMC charges a fee for its services and the funds of the investor are held by the trustee company to be deployed in stocks, bonds, gold or any other securities and assets allowed by the regulator.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 27 | location 300-302 | Added on Saturday, 23 September 2023 19:04:50

Fund managers can take wrong calls, can try and charge too much and hide costs and performance, front run, and do many things that people who manage other people’s money do. But the one thing they cannot do is vanish with your money.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 27 | location 305-306 | Added on Saturday, 30 September 2023 05:47:53

While there are several important rule changes, I will document the big ones that affect your money the most.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 28 | location 309-309 | Added on Saturday, 30 September 2023 05:48:41

2006: SEBI kills the 6 per cent NFO laddoo
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 29 | location 330-331 | Added on Saturday, 30 September 2023 05:52:04

2009: SEBI removed upfront commissions
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 29 | location 331-332 | Added on Saturday, 30 September 2023 05:52:19

Till the year 2009, mutual fund investors paid an invisible charge called front load of 2.25 per cent each time they bought a scheme.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 30 | location 343-344 | Added on Saturday, 30 September 2023 05:54:34

2013: SEBI allows direct plans
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 31 | location 354-355 | Added on Saturday, 30 September 2023 05:55:58

2018: SEBI stops upfronting of trail commissions
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 32 | location 367-368 | Added on Saturday, 30 September 2023 05:57:42

2019: Reducing expense ratios on mutual funds
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 36 | location 410-412 | Added on Saturday, 7 October 2023 11:18:06

For example, the life insurance regulator allows life insurance firms to deduct your entire first premium if you do not pay the second one. If after five premiums you decide not to pay the sixth, the insurance industry is allowed by the regulator to eat up half your capital! We’re not talking returns here.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 41 | location 462-464 | Added on Thursday, 19 October 2023 17:11:48

When we choose, we use the one metric we know about market-linked financial products—high return—to evaluate and choose. But when we ignore other attributes such as risk, liquidity, tax impact, cost and exit options—to name a few—we end up making wrong choices.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 46 | location 491-493 | Added on Sunday, 22 October 2023 16:30:11

You need to belt up now for a deep dive into categories and their best-fit uses. I am trying to make you independent in choosing funds for all time to come—so if you crack this once, you will never ask questions like ‘is this a good time to buy mutual funds?’
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 48 | location 498-501 | Added on Sunday, 22 October 2023 16:56:09

We can divide the stocks in the market into three buckets based on their market cap. Market cap is just the number of stocks multiplied by the market price to give an indication of the size of the company rather than using turnover or profit. Large-cap stocks are the first 100 stocks listed on the stock exchanges in India. Mid-cap stocks lie between the 101st stock and the 250th stock. Small-caps are 251st stock onwards in terms of market cap.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 48 | location 508-508 | Added on Sunday, 22 October 2023 17:02:44

Next are the three cross-cap categories—multi-cap, flexi-cap and large- and mid-cap.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 49 | location 508-515 | Added on Sunday, 22 October 2023 17:05:34

Remember that SEBI’s exercise took place when there were already thousands of crores of investor money across categories. Flexi-cap and large- and mid-cap were two such categories. The flexi-cap category allows the fund manager to invest anywhere in the market across market-caps, the only restriction is that 65 per cent of the assets must be in equity. The fund manager can move dynamically between large-, mid- and small-cap stocks and this gives huge flexibility to the fund manager to predict the next cap cycle and time it to harvest the best returns for investors. If fund managers were really good at predicting the next winning cycle, this category of funds would have outperformed all the categories in equity, I imagine. But when we look at the evidence, this outperformance is not seen. On an average, the flexi-cap funds remain over-invested in large-caps.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 49 | location 515-517 | Added on Sunday, 22 October 2023 17:10:40

A multi-cap fund is more true to label as it has an investing floor built into the category mandate. The fund manager must invest at least 25 per cent of AUM in each of the three market caps. This typically works out to be 50 per cent in large-caps, 25 per cent in mid-caps and 25 per cent in small-caps. This category does not have enough performance history for us to judge how they have done.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 51 | location 541-545 | Added on Sunday, 22 October 2023 21:02:59

The next category is ELSS or equity linked saving scheme. This is a scheme notified by the government to be eligible for the Section 80C benefit. (Read more on page 169 in Chapter 8 on taxes.) There is a three-year lock-in before you can redeem these funds. A small piece of statistics here—the average ten-year annual return for the ELSS category is almost 15 per cent. The worst fund gave 12 per cent and the best 21 per cent as on 6 April 2023.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 52 | location 550-552 | Added on Sunday, 22 October 2023 21:06:56

While a sector fund, such as pharma or auto, can be a tactical investment for somebody who knows and understands the sector deeply, thematic funds are just well-dressed large-cap funds at heart. Best for a new investor to stay well away.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 52 | location 552-553 | Added on Sunday, 22 October 2023 21:09:12

From these eleven categories, six are useful for you: large-cap, mid-cap, small-cap, large- and mid-cap, ELSS and multi-cap funds.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 55 | location 561-562 | Added on Saturday, 28 October 2023 11:28:32

I will repeat this again and again: a good investment is not just about the highest return, but also about low costs, liquidity and having access to the money when needed.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 56 | location 574-577 | Added on Saturday, 28 October 2023 11:32:23

This means that all the bonds in this overnight fund will mature or pay back the principal along with the interest on the next day. We will understand the risk in a bond fund better in Chapter 7, but at the moment what we must know is that the closer to today the maturity of the bond is, the lower is the risk of an interest rate change and the further away from today the maturity is, the higher is the risk of such a change. So, overnight bond funds carry very little risk and give returns that are usually better than a savings deposit.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 57 | location 584-585 | Added on Saturday, 28 October 2023 11:35:26

When interest rates go up, bond prices fall.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 57 | location 584-588 | Added on Saturday, 28 October 2023 11:37:17

When interest rates go up, bond prices fall. Think it through—you are a fund manager holding bonds that give a 6 per cent interest, but due to a hike in policy rates, the new bonds are being issued at 8 per cent. You will want to sell the 6 per cent bonds and buy the 8 per cent ones for a higher return. Other fund managers will think the same thoughts and go to market to sell. When there is an excess of supply, the price will fall. The reverse happens when interest rates fall—therefore, interest rates and bond prices are inversely related.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 57 | location 584-588 | Added on Saturday, 28 October 2023 11:37:33

When interest rates go up, bond prices fall. Think it through—you are a fund manager holding bonds that give a 6 per cent interest, but due to a hike in policy rates, the new bonds are being issued at 8 per cent. You will want to sell the 6 per cent bonds and buy the 8 per cent ones for a higher return. Other fund managers will think the same thoughts and go to market to sell. When there is an excess of supply, the price will fall. The reverse happens when interest rates fall—therefore, interest rates and bond prices are inversely related.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 58 | location 597-600 | Added on Saturday, 28 October 2023 11:42:24

I like to use debt funds for money needs that are up to three or four years away. After that I prefer to use a mix of debt and equity. For near-term needs, I want certainty of the money being there when I want it. For my longer term needs, I use equity. But, let’s go through the categories just to know what is out there and why we don’t need most of them.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 58 | location 604-612 | Added on Saturday, 28 October 2023 11:43:36

To understand these mutual funds, we need to understand a concept called credit risk. This is the risk of the borrower not giving the due interest and principal back to the lender. When mutual funds buy corporate bond securities, they in effect lend money in return for interest and the promise to pay the principal back. When the government borrows, it does so at the lowest rates of interest because its credit risk is zero, which means that the government (at least in India) will always pay back its lenders. But imagine a high-risk sector like real estate. Why do you think real estate firms float deposits and issue bonds with very high rates of interest? Because their risk of default (not paying back interest and principal) is high. Debt funds that invest in non-government bonds are called corporate bond funds. These are meant for debt fund investors who are seeking a higher return than the categories mentioned above. The investor will have to match their ideal holding period to that of the scheme they choose out of all the ones on offer. These are typically ranked low to moderate on the Risk-o-Meter.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 59 | location 614-618 | Added on Saturday, 28 October 2023 11:46:05

For example, a triple A rating means the highest probability of the bond returning both interest and principal on time. A bond with a rating of D is essentially a junk bond—these will have to offer very high rates of interest to see any buyers in the market. Fund managers who want to play the high-risk, high-return game like to invest in the bonds with lower credit rating. SEBI decided to change the name of the category from credit opportunities to credit risk so that retail investors are better able to understand that the potential for a higher return is accompanied by much higher risk.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 60 | location 629-634 | Added on Saturday, 28 October 2023 11:49:01

Floater funds is a category that invests in bonds with interest tied to a benchmark that can move up or down. The returns will float up when rates in the economy rise and float down when the reverse happens. Seen as a lower risk way of investing in debt funds, it still leaves the investor open to credit risk. Investors must also know how to time the markets to best use this category of funds. My advice: use debt funds on the shorter end of the holding period for needs that are within three to four years. Leave the use of other categories to the debt fund experts or if you are working with a planner, use these for a rise in the overall return on the portfolio.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 63 | location 644-646 | Added on Saturday, 28 October 2023 15:20:47

These are good for income-seeking investors who have a large corpus in place and want to milk it for regular income. (For options that can be used to get a regular income, see Chapter 5, page 89.) Many investors use a systematic withdrawal plan (SWP) to draw a return from these funds.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 65 | location 662-665 | Added on Saturday, 4 November 2023 09:27:51

A popular category is balanced advantage fund, also called the dynamic asset allocation fund. This is a go-anywhere fund where the fund manager can move between debt and equity without any limits on either. The idea is that the fund manager is better able to judge the potentially winning asset class and will move money ahead of a bull run in either to harvest a higher return.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 65 | location 668-670 | Added on Saturday, 4 November 2023 09:28:36

A multi-asset allocation fund allows the fund manager to invest across three asset classes at least with a minimum of 10 per cent in each. Funds invest across equity, debt, commodities, cash, gold and real estate—a high-risk category that leaves a lot in the hands of the fund manager to get the asset allocation calls right.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 65 | location 672-673 | Added on Saturday, 4 November 2023 09:29:28

Arbitrage funds play on the price difference between spot and futures markets. A spot market is where the securities are traded today and a futures markets is one where the trade (delivery and payment) will happen in the future.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 65 | location 672-674 | Added on Saturday, 4 November 2023 09:30:09

Arbitrage funds play on the price difference between spot and futures markets. A spot market is where the securities are traded today and a futures markets is one where the trade (delivery and payment) will happen in the future. You need to understand two things about this category. One, you will get an average return that is above the liquid fund or ultra-short-duration funds and not equity returns.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 65 | location 672-674 | Added on Saturday, 4 November 2023 09:30:22

Arbitrage funds play on the price difference between spot and futures markets. A spot market is where the securities are traded today and a futures markets is one where the trade (delivery and payment) will happen in the future. You need to understand two things about this category. One, you will get an average return that is above the liquid fund or ultra-short-duration funds and not equity returns.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 66 | location 679-682 | Added on Saturday, 4 November 2023 09:32:01

Equity savings category invests a minimum of 65 per cent in equity, 10 per cent in debt and is allowed arbitrage between spot and futures. They give returns like conservative hybrid funds but because of the favourable tax treatment, might be preferred to those. Remember that any fund with over 65 per cent in equity (or equity-related instruments) will get the equity tax treatment. Therefore, a conservative hybrid is taxed as a debt fund.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 68 | location 697-699 | Added on Saturday, 4 November 2023 09:34:19

Index funds and ETFs have been put under the ‘Other Schemes’ category. These are very important funds for a fill-it–shut-it–forget-it minded investor and we need to spend time on this category. Get your beverage and prepare to dig in.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 68 | location 699-701 | Added on Saturday, 4 November 2023 09:34:53

Briefly, an index maps the change in the price of a basket of things. These things could be commodities that go into our consumption basket, and the index needed is the consumer price index.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 69 | location 703-707 | Added on Saturday, 4 November 2023 09:36:28

Index funds and ETFs are called passive funds as against active funds. Active funds are those where the fund manager takes calls of what stocks, bonds or other assets to buy, hold and sell. The fund manager, under the umbrella of the fund category and the investment mandate, must aim to give higher than benchmark index returns to investors. See page 131 in Chapter 6 to understand benchmarks. Active funds have the potential to give investors a much better return experience than simple index returns, though with much higher risk.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 71 | location 732-734 | Added on Saturday, 4 November 2023 09:47:46

Now, what is an ETF? Very simply, it is an index fund that is listed on the stock market and is available for trading all day at live prices through the day, unlike a mutual fund that is open for sale and repurchase at the closing price of the day.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 72 | location 741-743 | Added on Saturday, 4 November 2023 09:52:56

The ETF structure needs a buyer at the other end if you are selling, unlike an index fund. The lack of a buyer might prevent you from selling at the current NAV the quantity you want to sell. The ETFs might also not have the systematic investment plan (SIP) option, and all the other options of entry and exit that we will see in Chapter 5.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 73 | location 756-758 | Added on Sunday, 5 November 2023 09:33:46

These are also being used to offer ETFs to passive fund investors who do not want to go the ETF route—for example, Bharat Bond Fund of Funds only invests in Bharat Bond ETF.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 74 | location 773-776 | Added on Sunday, 5 November 2023 09:36:26

though there are thirty-seven categories, you don’t need them all; equity and debt have different attributes and you need a mix of them; you can choose categories to meet your short-, medium- and long-term needs; choosing a category first is much easier than looking at thousands of options; active funds expose you to fund-manager risk; and index funds are the least cost way to get broad market index returns.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 76 | location 780-788 | Added on Sunday, 5 November 2023 09:38:18

Think of a room, let’s call it trapped-you room, where a movie is playing. You can enter for a price, but once you enter, you are forced to sit for the entire three hours. No bathroom break. No cell phone break. If you really want to get out, you need to pay half the ticket fee. At the end of three hours, you can get out for free. If you did not like the movie, you have no option but to sit it out, or pay up to get out. The movie might turn out to be super good and you might have memories for a lifetime after watching it. Still, would you enter this room? There is another room, let’s call it your-choice room, in the same building, where there is no cost of entry, no cost of exit, but you need to pay a small fee to stay seated for the three hours every one hour. You can exit anytime you want. If you like the movie, after an hour you can pay and continue to sit. If you don’t, you can get out and not pay for the entire movie. Do you like this option? The trapped-you room is a standard endowment or money-back policy that insurance companies sell. The your-choice room is the most common type of mutual fund where there are no restrictions on entry and exit.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 77 | location 792-794 | Added on Sunday, 5 November 2023 09:39:12

We will first work through three kinds of mutual funds on offer—open-ended, close-ended and hybrid of open and close. Next, we will understand the various options in a mutual fund that you need to choose on entry and exit.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 77 | location 796-802 | Added on Sunday, 5 November 2023 09:41:10

Open-ended funds are forever funds that never shut down unless the fund house winds them down due to a variety of reasons such as lack of investor interest. Or, due to regulatory changes, the fund is merged with another or shut down fully. This means that the fund house can create an unlimited number of units over the lifetime of the scheme as more and more investors buy into that scheme. No, the value of the fund does not fall as more units are created—this is not a stock, but a unit that has little bits of shares and bonds of forty to seventy companies. You will understand this better when you read about the NAV on page 124 in Chapter 6. The assets under management of these funds can go on rising as more investors buy the fund, but they are divided into the bundles of stocks and bonds they invest in.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 78 | location 808-813 | Added on Sunday, 5 November 2023 09:42:54

Close-ended funds are those that have a subscription window after which you can only redeem your units at the date on which the scheme ends. These work like FDs or endowment plans without the guarantees, of course. The number of units remains the same over the lifetime of the fund. To give liquidity to investors, the rules make listing of close-ended schemes on a stock exchange mandatory. This means that investors don’t sell units to the fund house (the way they do in an open-ended scheme) but can sell to other investors on the stock market like you do in direct shares. At the close date of the scheme, investors redeem their units to the fund house and get their money back.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 80 | location 832-833 | Added on Sunday, 5 November 2023 09:49:23

Then, in a bid to show higher and higher returns, some fund houses began to lower the credit quality. We know that the higher the riskiness of a bond, the lower the credit rating and the higher the interest rate the bond will have to offer to attract investors.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 81 | location 841-843 | Added on Sunday, 5 November 2023 14:23:19

The industry innovated to bring to market a hybrid between an open-ended and a close-ended product and this was called an interval fund. It invests both in debt and equity, though it stays mostly in the debt space. This fund opens and shuts at periodic intervals and investors have an opportunity to exit.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 81 | location 843-844 | Added on Sunday, 5 November 2023 14:31:56

A new version of an interval fund is the target maturity fund (TMF) that is an open-ended passive debt fund with a stated maturity date.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 82 | location 855-856 | Added on Sunday, 5 November 2023 14:42:35

Of the two advantages of this hybrid fund, one got removed on 1 April 2023. This was the lower tax and indexation benefit if held for three years.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 83 | location 864-865 | Added on Sunday, 5 November 2023 14:57:53

You might have seen the words direct and regular in the names of the schemes you were browsing through. A regular plan is one that is sold by an intermediary like a distributor, a bank or even a platform. A direct plan is one that is bought directly from the fund house.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 83 | location 864-866 | Added on Sunday, 5 November 2023 14:58:57

You might have seen the words direct and regular in the names of the schemes you were browsing through. A regular plan is one that is sold by an intermediary like a distributor, a bank or even a platform. A direct plan is one that is bought directly from the fund house. The difference between the two is the reduction in the cost of distribution—the agent commission.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 84 | location 880-880 | Added on Sunday, 5 November 2023 15:08:33

So, you should always only invest in the direct plan, right? Wrong.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 84 | location 880-888 | Added on Sunday, 5 November 2023 15:10:45

So, you should always only invest in the direct plan, right? Wrong. Like I said, the highest return might not be the best route for you. This will differ from person to person. A good distributor will give many services starting from portfolio construction (a very complicated exercise for most people), maintaining the portfolio, updating you on changes in funds, managing the contact detail changes, the nominations, the tax work, the rebalancing and many other maintenance jobs that an active portfolio needs. For some super busy people or someone with no knowledge about funds, to go with a regular plan might be a better option than to struggle on your own using the direct option. Investing is not a one-time job, but an active portfolio needs to be looked after on a regular basis. The one situation in which a direct approach is always better is if you are only investing in a broad market index fund with a fill-it–shut-it–forget-it mindset. Then it makes no sense to pay commission to a seller. Or if the bank is doing nothing much in terms of all the services I had listed out, you are better off going direct. But there are distributors I know who add so much value that the higher expense ratio is fully worth it.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 86 | location 907-910 | Added on Sunday, 5 November 2023 15:22:12

Your reason for investing in a fund will determine the next set of choices you are faced with when you set out to buy a mutual fund—whether you want to periodically milk the portfolio, target a certain amount in the future, or just let the tree become an orchard. You have to choose between a growth plan and an income distribution with capital withdrawal plan or IDCW (called dividend plan earlier).
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 86 | location 910-916 | Added on Sunday, 5 November 2023 15:34:12

A growth plan allows the money invested to keep growing. The number of units remains the same (unless you buy more units, of course), but the net asset value (NAV) keeps growing over time in a well-performing fund. Read about NAV on page 124, Chapter 6. The NAV grows as the stocks and bonds bought by the mutual fund grow in value. If you do not redeem any units, then the value of your investment continues to grow over time because the number of units multiplied by NAV is the value of your investment, which grows as the NAV rises. For example, if you bought 10,000 units of a scheme at NAV of Rs 50, your invested amount is Rs 5 lakh and if the NAV grows to Rs 100, your money grows to Rs 10 lakh (Rs 100 × 10,000 units).
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 87 | location 917-921 | Added on Sunday, 5 November 2023 15:35:46

The income distribution and capital withdrawal (IDCW) option allows you to receive a mix of interest, dividend and profit at intervals that the mutual fund fixes. Quickly recall here that savings become investments when they are put in debt, equity and real assets. These assets can throw off income in the form of interest, dividend and rent. The assets also throw off profit which is called capital gain. This terminology is important, as we will see in Chapter 8 on taxation. In an IDCW option, the mutual fund will periodically dip into the gains and hand it out to you.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 88 | location 928-931 | Added on Sunday, 5 November 2023 15:43:43

In the case of the Franklin fund, Rs 5 lakh invested at Rs 10 NAV is now at Rs 3.4 crore in the growth option, but is worth Rs 18.9 lakh. Rs 3.2 crore has been distributed out to this investor over the lifetime of this fund as dividend or distributed income! Why do funds not distribute all of the gain? I would imagine, to keep the capital ahead of inflation would be just one easy explanation.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 89 | location 947-950 | Added on Sunday, 5 November 2023 17:58:56

Three kinds of IDCW There are three options to choose from on the income-distribution road. Overall, this set of options is not a good idea because of the tax disadvantage that dividends have over a short- or long-term capital gain route. (Read page 178 in Chapter 8.) Tax rules can change but we must still learn about them so that we are not taken by surprise when faced with the IDCW choices at the point of buying the funds.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 90 | location 950-951 | Added on Sunday, 5 November 2023 18:05:56

A variant of the IDCW is the reinvestment option. This was the dividend reinvestment option earlier.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 90 | location 957-961 | Added on Sunday, 5 November 2023 18:06:36

The third variant is the transfer option of the IDCW. The gain handed out under the IDCW option is parked in another fund so that the investor can use it at a later date. The logic of this option is like this: suppose you have a defined need of money in two years and you want to park some of the profits from your equity funds over these two years towards a part of that goal. Then you might choose the transfer option of the IDCW and ask the fund to park the money in an ultra-short-term debt fund or a money market fund. If you forgot what these are, go back to page 58 in Chapter 4 and just take another look.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 91 | location 964-966 | Added on Sunday, 5 November 2023 18:08:21

There is another option to take home your regular income and profits, and transfer the money for a more liquid product—which we will meet soon—called a systematic withdrawal plan. We will read about this in Chapter 8 on taxation. The IDCW option has yet more choice in the form of daily, weekly, fortnightly and monthly payouts.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 91 | location 966-968 | Added on Sunday, 5 November 2023 18:08:44

Which do you pick of the four routes? Pick the growth option. Only in cases where you are at a 10 per cent tax rate on income tax does the IDCW option become a better choice than growth under the current tax regime.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 99 | location 1070-1079 | Added on Sunday, 5 November 2023 21:10:04

This is done by using a systematic transfer plan (STP) that collects the lump sum in a low-risk debt scheme and at periodic intervals (decided by you) funds an equity scheme. If uncle had invested that Rs 7 lakh in end-March 2020, by May this money would have been worth Rs 5 lakh. He sold off in disgust and took home Rs 2 lakh of loss. Had he held on till the end of the year, he would have recovered the money and ended the twelve-month period up by Rs 50,000. But had he staggered the investment into Rs 58,000 a month over twelve months, he would have been sitting on Rs 8.3 lakh at the end of the year. You can use this facility by first choosing the equity fund you want to invest in and then from the same fund house, choose a liquid fund to park your lump sum in. Remember to choose a growth option, with low expense ratio with no exit load. Then set up the transfer choosing the amount you want to invest every month from the liquid to the equity. When I set up my first STP many years back, I make a rookie error of choosing a liquid fund of one fund house but an equity fund of another! The same fund house will allow a switch from one scheme to another and this facility is not there between two different fund houses (it should be, but that is another policy debate).
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 100 | location 1082-1089 | Added on Sunday, 5 November 2023 21:11:45

With how much can you begin an STP? The industry norm is a minimum corpus of Rs 12,000 that makes for twelve Rs 1,000 STP or six Rs 2,000 transactions. There is no upper limit on how much you can move and over what period of time between two schemes of the same fund house. Most investors use this facility to park their bonus money, large refunds, loans paid back by family or friends, profits from some investment liquidated like the sale of some property or inherited money. You can use the STP to move from equity to debt as well, though this is less used than the reverse. You can book profits from an equity fund if either you are rebalancing or have a goal approaching and you want to start milking the equity fund. These can be transferred into a low-risk liquid or a money market fund (choose the debt fund depending on when you need the money; see Chapter 10 on how to choose schemes). Again, you need to be careful to set this up between the schemes of the same fund house.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 103 | location 1109-1110 | Added on Monday, 6 November 2023 08:54:22

There are two routes to exit—one is to redeem a lump sum and the second is to set up a systematic withdrawal plan (SWP).
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 103 | location 1118-1120 | Added on Monday, 6 November 2023 08:56:45

The only thing the planner or advisor or you as a do-it-yourself investor needs to be careful about is that the rate of withdrawal should not be larger than the rate of growth of the fund. The SWP sees redemption of units, so over a long enough period of time, the units can go down to zero if the withdrawal rate is higher than the growth of the NAV.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 104 | location 1128-1129 | Added on Monday, 6 November 2023 08:58:26

therefore, set up your SWP a year before you need the money so that you are not charged the load.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 105 | location 1139-1144 | Added on Monday, 6 November 2023 09:01:16

A demat account will cost you an annual fee. You will need to sign up through a depository participant. There will be broker costs to buy and sell mutual fund units—something that you do not pay when you buy directly from the fund house. The setting up of SIPs, STPs and SWPs might be difficult via the demat route. This route is meant for distributors and corporate agents to set up their own platforms that will then offer these services. Each layer that you add between yourself and the mutual fund will eventually end up costing you something, even though it may be free today. The ETF investing requires a demat account and so do some direct bond purchases.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 106 | location 1144-1145 | Added on Monday, 6 November 2023 09:01:39

What to use: go for the direct holding with the mutual fund in the form of an account statement. It is lower cost and has all the entry and exit options mentioned in this chapter.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 106 | location 1149-1156 | Added on Monday, 6 November 2023 09:02:49

It is very important to get the choices right before you begin the process of investing in mutual funds. Innovation in the industry has resulted in a large number of options that you need to decide on at the point of scheme purchase. You are doing okay if you understand that open-ended funds are usually the best option as it prevents a lock-in; the growth option is better than the income-distribution option; a sensible SWP is a better option, under most conditions, to an income-distribution option; the direct option, instead of a regular one, saves you the ongoing trail commission embedded in the expense ratio; an SIP is a great way to match savings and investment rhythm; and an STP is a good way to turn a lump sum into an SIP.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 112 | location 1210-1211 | Added on Wednesday, 8 November 2023 14:51:52

Other than a stamp duty tax that costs the investor 0.005 per cent of the investment amount (read Chapter 8 for taxes and their impact), there is no hidden cost during the purchase process of a mutual fund.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 113 | location 1220-1223 | Added on Wednesday, 8 November 2023 14:54:11

The fund categories of overnight, liquid and ultra-short-term funds have no exit loads, neither typically do banking and PSU and gilt funds. Other debt funds will have a small exit load. You must check for an exit load when you are setting up an STP. And you must check for it when investing in any fund category to not be taken by surprise.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 113 | location 1227-1234 | Added on Thursday, 9 November 2023 14:08:25

An expense ratio is a percentage of your assets under management that is deducted by the fund house towards its costs and profits. An AMC sets up the business, hires offices, hires people for fund management, analysts, admin staff, support staff and needs to pay for all these in-house costs. There are costs of hired services such as fees to registrar and transfer agents, custodians, trustees and lawyers. I won’t waste time explaining each of these—they are an internet search away. The purpose is to give you a system to invest and not get caught in minute operational details. The expense ratio also includes the commissions paid to brokers and distributors for selling the funds. With no front loads in the product, the agents selling the funds need to be compensated for the business they bring to the fund house. Their commission is now a part of the expense ratio and is called a trail commission, or commission that trails the product rather than an upfront one. A trail commission works better for all parts of the market as it puts incentives in the right place. This ratio also includes the profits made by the AMC.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 115 | location 1243-1247 | Added on Thursday, 9 November 2023 14:13:32

The logic of a reducing cost as AUM rises is this: unlike a manufacturing firm of real goods and services, the costs of fund management do not increase as the AUM rises. A carmaker will have to spend more on raw material, parts, assembly lines and staff as the production of cars increases. But a rising AUM will have most of the costs as fixed with ever-rising profit margins. The cost of fund management does not rise as AUM rises therefore we see the cost ceilings going down as the assets under management go up for a scheme.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 118 | location 1262-1264 | Added on Thursday, 9 November 2023 14:20:38

Look out for the size of the scheme that you are buying and if it is larger than Rs 10,000 crore, but expense ratios are still hugging the regulatory limit on expenses, try and get a cheaper fund, with other things like risk and return remaining the same. We will revisit this when we choose schemes in Chapter 10.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 121 | location 1307-1312 | Added on Thursday, 9 November 2023 21:32:22

The other ways the mutual fund earns is through interest on the bonds it holds, through dividend it receives on shares. When the companies issue rights and bonus shares, those get added to the portfolio as well. So, the value of your money in the fund grows as it receives dividend, interest and makes profits. But all of that money does not belong to you—you need to pay for the costs of the mutual fund, that all sit beneath the expense ratio. These costs are deducted every day so that you can see the value of your money, net of costs, every day. Hence, net asset value.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 122 | location 1312-1317 | Added on Thursday, 9 November 2023 21:33:06

If the expense ratio is 2 per cent, then on a daily basis, 2 per cent divided by 365 is charged to the fund and your asset value adjusts for this. Mutual funds are ‘marked to market’ every day, which means the value of the portfolio is disclosed every day to show the gains and the losses. Of course, long-term equity investors need not track the NAV every day but once in six months to check on how your investments are doing. The NAV is disclosed every day for another reason—investors can sell their holdings and new investors can come in to buy every day that the market is open. Both need a price that reflects the value of the portfolio on that day. Hence the daily NAV.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 122 | location 1319-1322 | Added on Thursday, 9 November 2023 21:35:47

You must note two things about the NAV. One, when we calculate returns later on in this chapter, what we will get is net returns since the costs of fund management have already been accounted for in the NAV. So, when you compare NAV across time for the same scheme, it is possible to get a handle on the post-cost growth of your money. The same cannot be said of a product like the unit linked insurance plan (ULIP) that has costs such as the mortality cost (what the pure life insurance part costs) outside of the NAV.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 123 | location 1334-1339 | Added on Thursday, 9 November 2023 21:38:39

What NAV you get when you invest or redeem depends on the time of your order and the money reaching the fund house. Called cut-off time, this deadline determines which day’s NAV you will get when you buy or sell. Other than overnight and liquid funds, if you place the buy order and get the money to the fund house before 3 p.m. you get that day’s NAV. If your order or money reaches the fund house post this cut off time, you will get the NAV of the next working day. For a sale order placed before 3 p.m., you get the same day’s NAV; after 3 p.m., you get the next day’s NAV.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 124 | location 1339-1341 | Added on Thursday, 9 November 2023 21:39:02

For overnight and liquid funds, the cut-off times are different. If the order and funds are available in a buy order before 1.30 p.m., you get the previous day’s NAV. If the funds are available after 1.30 p.m., you get the same day’s NAV. For a sale order placed before 3 p.m., same day’s NAV and after 3 p.m., next day’s NAV.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 125 | location 1352-1365 | Added on Thursday, 9 November 2023 21:45:16

If the NAV moves from Rs 10 to Rs 50 over a period of three years, then the return has been 400 per cent over the period. On an annual basis it has been 71 per cent return. But where does the return come from? It comes from the underlying portfolio of stocks, bonds, gold and combinations of these that the mutual fund holds. A return is earned in three ways—interest, dividend and profit. Interest on the bonds the portfolio holds. Dividend on the stocks it holds. Profit will come from the gains on prices on stocks, bonds and gold held in the portfolio. How we count return and then what metrics we use become important as we get ready to start choosing mutual fund schemes. We will see in Chapter 12 why the scheme that gave the highest return last year may not be the best for you. But first we need to understand the various measures of return. In the example above, the 400 per cent return certainly looks better than the 71 per cent return, but both are giving you the same return, except in the first case you took a point-to-point return and disregarded the number of years in the middle. This is usually how endowment plans are sold—your Rs 1 lakh becomes Rs 5 lakh. They omit to tell you that this conversion happens over a twenty-year period if you stay in the product. The second measure, also called a compounded annual growth rate or CAGR, is a much better measure for it considers the number of years it took your Rs 10 to turn to Rs 50. The CAGR for the endowment plan is just 8.4 per cent. Using point-to-point returns is also how we evaluate our real estate investments. I’ve heard this said so often: ‘My Rs 30 lakh property became worth Rs 2 crore—such a great return!’ What they do not say is that this journey happened over a thirty-year period, giving a CAGR of 6.5 per cent. Did you know that the CAGR on the Sensex over thirty years has been 14.5 per cent?
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 126 | location 1365-1371 | Added on Thursday, 9 November 2023 21:46:19

The way that mutual fund returns are most often shown is through trailing returns. It gives the past CAGR return history over a time period you can define. Most often we see trailing returns over the past one, three, five, seven, ten, fifteen and twenty years. Each day that you look at the trailing returns, they can look different since they are being calculated with the latest NAV over the past period we select. Trailing returns give a good handle on consistency of performance and we will learn how to use these trailing returns to choose schemes in Chapter 10. But trailing returns have a flaw—they hide the true performance of a scheme over various time periods within a year itself. It will hide the volatility, or the sharp up and down movements of the NAV during the year.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 126 | location 1371-1373 | Added on Thursday, 9 November 2023 21:46:34

Another way to look at returns over a long period of time is to use rolling returns. This method shows the investor experience over the entire period chosen. It is a difficult concept that I have explained in Let’s Talk Money in Chapter 8—do refresh from there.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 127 | location 1376-1378 | Added on Thursday, 9 November 2023 21:47:14

We will use a combination of trailing returns, with some risk metrics and expense ratios to finally select funds in Chapter 10. An additional check can be done using a rolling return calculator (an internet search is your friend for this!) for those who want to be extra sure and want to do some more work.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 128 | location 1390-1396 | Added on Thursday, 9 November 2023 23:18:39

But from 1 February 2018, SEBI mandated that the benchmarks are a total return index rather than a price return index (PRI). A PRI only captures the capital gains (profits) of the securities (stocks and bonds) that it tracks. The total return index also counts interest, dividends along with the capital gains. You would have understood that a total return index will be higher than a PRI because it now includes more items of return. Fund houses would use the PRI to make their schemes look better than they actually were. The TRI would typically show returns that were about 1.5 percentage points higher than the PRI. So, a fund giving a three-year return of 11 per cent would outperform a PRI that showed a three-year return at 10 per cent, but not when compared to the TRI that mapped a 11.5 per cent return. Some fund houses were using the TRI even before the SEBI rule, but it needed regulatory action to bring uniformity in the market.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 129 | location 1400-1403 | Added on Thursday, 9 November 2023 23:21:34

The first benchmark in all categories is specified by SEBI and funds can choose one index provider out of the current four that are in the market. For example, the large-cap category can choose either the Nifty 100 or the S&P BSE 100 TRI as a benchmark. A conservative hybrid fund can choose either the Nifty 50 Hybrid Composite Debt 15:85 index or the CRISIL Hybrid 85+15 conservative index.4
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 130 | location 1415-1419 | Added on Thursday, 9 November 2023 23:24:42

Mutual funds need to buy the license to use the index they want to use. A part of the expense ratio of index funds and ETFs goes to pay these licensing fees. There are four index providers that funds can use. The regulator is now at the brink of regulating the index providers because they can get up to some sharp tricks as well. An update to this book will map those regulations in the future. I think I will need to do new editions regularly given the pace of the innovations in the industry and the regulations by SEBI, so watch out for updated editions along the way.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 131 | location 1427-1430 | Added on Thursday, 9 November 2023 23:26:05

other than a .005 per cent stamp duty, there is no cost of entry into a mutual fund; annual expense ratios are limited and most funds will charge below that; equity has higher expense ratios than debt; index funds have very low expense ratios; an NAV of 10 is not cheaper than an NAV of 250; and benchmarks are very important to judge returns.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 136 | location 1483-1484 | Added on Friday, 10 November 2023 09:15:27

This is the risk of a change in interest rate affecting bond prices. Bond prices move up when interest rates move down and they move down when interest rates go up.
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 138 | location 1503-1512 | Added on Friday, 10 November 2023 09:21:58

Credit risk This is the risk of the borrower not paying interest and principal either on time, or at all. Interest is the price that the borrower of money (through issuing a bond) pays to the lender. The lender needs to be compensated for three things: the risk that the borrower will not return the money,  <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 140 | location 1527-1529 | Added on Friday, 10 November 2023 14:27:55

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 142 | location 1555-1560 | Added on Friday, 10 November 2023 14:53:12

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 142 | location 1560-1573 | Added on Friday, 10 November 2023 14:57:18

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 144 | location 1573-1576 | Added on Friday, 10 November 2023 14:57:28

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 144 | location 1576-1591 | Added on Friday, 10 November 2023 19:45:52

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 145 | location 1595-1596 | Added on Friday, 10 November 2023 22:57:00

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 146 | location 1599-1600 | Added on Friday, 10 November 2023 23:00:17

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 146 | location 1601-1606 | Added on Friday, 10 November 2023 23:01:36

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 147 | location 1609-1611 | Added on Friday, 10 November 2023 23:05:19

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 147 | location 1612-1620 | Added on Saturday, 11 November 2023 10:15:30

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 150 | location 1653-1660 | Added on Saturday, 11 November 2023 10:24:07

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 151 | location 1660-1676 | Added on Saturday, 11 November 2023 10:28:36

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 152 | location 1676-1683 | Added on Saturday, 11 November 2023 10:39:08

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 153 | location 1688-1691 | Added on Saturday, 11 November 2023 10:39:32

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 154 | location 1698-1702 | Added on Saturday, 11 November 2023 10:40:16

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Note on page 158 | location 1730 | Added on Saturday, 11 November 2023 10:47:07

Taxes basic
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 157 | location 1724-1730 | Added on Saturday, 11 November 2023 10:47:07

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 158 | location 1730-1735 | Added on Saturday, 11 November 2023 11:20:31

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 159 | location 1748-1755 | Added on Saturday, 11 November 2023 11:42:44

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 161 | location 1764-1765 | Added on Saturday, 11 November 2023 11:49:42

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 163 | location 1791-1795 | Added on Saturday, 11 November 2023 12:03:41

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 165 | location 1821-1822 | Added on Saturday, 11 November 2023 12:24:40

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 165 | location 1821-1824 | Added on Saturday, 11 November 2023 12:26:10

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Note on page 167 | location 1845 | Added on Saturday, 11 November 2023 12:35:17

Indexation
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 166 | location 1824-1845 | Added on Saturday, 11 November 2023 12:35:17

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 168 | location 1857-1859 | Added on Saturday, 11 November 2023 12:43:20

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 168 | location 1859-1864 | Added on Saturday, 11 November 2023 12:44:36

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 171 | location 1890-1891 | Added on Saturday, 11 November 2023 12:59:30

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 171 | location 1891-1895 | Added on Saturday, 11 November 2023 12:59:54

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 172 | location 1900-1905 | Added on Saturday, 11 November 2023 13:04:56

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 177 | location 1956-1960 | Added on Sunday, 12 November 2023 09:43:07

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Note on page 178 | location 1977 | Added on Sunday, 12 November 2023 09:47:17

For "almost there" box
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 178 | location 1971-1977 | Added on Sunday, 12 November 2023 09:47:17

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 179 | location 1978-1981 | Added on Sunday, 12 November 2023 09:47:59

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Note on page 181 | location 2006 | Added on Sunday, 12 November 2023 09:52:49

For "in some time" box
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 181 | location 2001-2006 | Added on Sunday, 12 November 2023 09:52:49

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 182 | location 2012-2014 | Added on Sunday, 12 November 2023 09:53:59

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 185 | location 2042-2049 | Added on Sunday, 12 November 2023 13:14:25

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 188 | location 2073-2082 | Added on Sunday, 12 November 2023 13:28:12

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 188 | location 2082-2093 | Added on Sunday, 12 November 2023 14:10:38

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 190 | location 2095-2098 | Added on Sunday, 12 November 2023 14:12:59

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 196 | location 2126-2127 | Added on Sunday, 12 November 2023 14:33:58

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 196 | location 2128 | Added on Sunday, 12 November 2023 14:34:05


==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 196 | location 2131-2137 | Added on Sunday, 12 November 2023 14:35:34

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 212 | location 2244-2250 | Added on Sunday, 12 November 2023 17:14:04

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Note on page 197 | location 2138 | Added on Sunday, 12 November 2023 17:18:57

Risk measuring table
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 197 | location 2138 | Added on Sunday, 12 November 2023 17:18:57


==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 213 | location 2260-2264 | Added on Monday, 13 November 2023 10:58:05

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 217 | location 2291-2295 | Added on Monday, 13 November 2023 11:15:38

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 219 | location 2296-2299 | Added on Monday, 13 November 2023 11:15:55

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Note on page 220 | location 2306 | Added on Monday, 13 November 2023 11:18:50

Main point to be noted in index funds
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 219 | location 2300-2306 | Added on Monday, 13 November 2023 11:18:50

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 220 | location 2306-2309 | Added on Monday, 13 November 2023 11:19:55

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 221 | location 2312-2315 | Added on Monday, 13 November 2023 11:23:12

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 222 | location 2320-2326 | Added on Monday, 13 November 2023 11:25:14

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 224 | location 2343-2346 | Added on Monday, 13 November 2023 11:52:46

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 224 | location 2346-2349 | Added on Monday, 13 November 2023 11:58:09

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 226 | location 2372-2372 | Added on Monday, 13 November 2023 12:02:52

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 228 | location 2392-2392 | Added on Monday, 13 November 2023 13:32:09

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 228 | location 2397-2398 | Added on Monday, 13 November 2023 16:08:15

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 229 | location 2404-2405 | Added on Monday, 13 November 2023 16:09:54

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 229 | location 2407-2408 | Added on Monday, 13 November 2023 16:11:21

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 229 | location 2407-2412 | Added on Monday, 13 November 2023 16:12:15

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 230 | location 2421-2422 | Added on Monday, 13 November 2023 16:14:13

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 231 | location 2425-2431 | Added on Monday, 13 November 2023 16:16:05

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 231 | location 2425-2432 | Added on Monday, 13 November 2023 16:16:46

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 231 | location 2425-2432 | Added on Monday, 13 November 2023 16:16:58

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 232 | location 2437-2438 | Added on Monday, 13 November 2023 16:18:34

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 232 | location 2441-2443 | Added on Monday, 13 November 2023 16:19:18

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 234 | location 2469-2475 | Added on Monday, 13 November 2023 16:24:50

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 237 | location 2495-2501 | Added on Monday, 13 November 2023 16:28:28

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 242 | location 2555-2558 | Added on Monday, 13 November 2023 18:07:44

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 243 | location 2568-2578 | Added on Monday, 13 November 2023 18:15:58

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 245 | location 2588-2588 | Added on Monday, 13 November 2023 18:18:08

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 245 | location 2588-2590 | Added on Monday, 13 November 2023 18:18:20

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 246 | location 2603-2608 | Added on Monday, 13 November 2023 18:24:28

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 247 | location 2619-2625 | Added on Monday, 13 November 2023 18:35:19

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 250 | location 2641-2644 | Added on Monday, 13 November 2023 20:00:21

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 250 | location 2646-2647 | Added on Monday, 13 November 2023 20:00:48

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Note on page 251 | location 2654 | Added on Monday, 13 November 2023 20:02:35

For emergency funds
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 251 | location 2651-2654 | Added on Monday, 13 November 2023 20:02:35

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 253 | location 2663-2665 | Added on Monday, 13 November 2023 20:03:45

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Note on page 254 | location 2675 | Added on Monday, 13 November 2023 20:05:55

For immediate needs, ways
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 254 | location 2674-2676 | Added on Monday, 13 November 2023 20:05:55

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 254 | location 2677 | Added on Monday, 13 November 2023 20:06:04


==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 256 | location 2687 | Added on Monday, 13 November 2023 20:07:15


==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Note on page 258 | location 2704 | Added on Monday, 13 November 2023 20:10:07

For long term needs
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 258 | location 2704 | Added on Monday, 13 November 2023 20:10:07


==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 259 | location 2719-2725 | Added on Monday, 13 November 2023 20:15:52

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 261 | location 2733 | Added on Monday, 13 November 2023 20:17:33


==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 261 | location 2736-2737 | Added on Monday, 13 November 2023 20:18:17

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 262 | location 2740 | Added on Monday, 13 November 2023 20:19:43


==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Note on page 262 | location 2745 | Added on Monday, 13 November 2023 20:21:25

Forvreal estate investment 
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 262 | location 2741-2745 | Added on Monday, 13 November 2023 20:21:25

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 263 | location 2756-2763 | Added on Monday, 13 November 2023 20:23:04

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 265 | location 2766-2767 | Added on Monday, 13 November 2023 20:23:47

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 265 | location 2769-2772 | Added on Monday, 13 November 2023 20:24:23

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 267 | location 2780-2782 | Added on Monday, 13 November 2023 20:26:00

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 267 | location 2782-2784 | Added on Monday, 13 November 2023 20:26:31

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 267 | location 2784-2786 | Added on Monday, 13 November 2023 20:26:57

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 267 | location 2786-2788 | Added on Monday, 13 November 2023 20:27:13

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 269 | location 2797-2799 | Added on Monday, 13 November 2023 20:30:50

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 270 | location 2804-2806 | Added on Monday, 13 November 2023 20:32:06

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 270 | location 2806-2808 | Added on Monday, 13 November 2023 20:32:22

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 271 | location 2810-2812 | Added on Monday, 13 November 2023 20:33:00

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 271 | location 2815-2816 | Added on Monday, 13 November 2023 20:33:39

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 271 | location 2813-2815 | Added on Monday, 13 November 2023 20:33:53

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 271 | location 2816-2818 | Added on Monday, 13 November 2023 20:34:28

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 272 | location 2818-2819 | Added on Monday, 13 November 2023 20:35:06

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 272 | location 2821-2823 | Added on Monday, 13 November 2023 20:35:50

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 272 | location 2825-2826 | Added on Monday, 13 November 2023 20:36:20

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 273 | location 2826-2832 | Added on Monday, 13 November 2023 20:37:07

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 274 | location 2836-2837 | Added on Monday, 13 November 2023 20:39:15

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 274 | location 2839-2843 | Added on Monday, 13 November 2023 20:40:45

 <You have reached the clipping limit for this item>
==========
Let's Talk Mutual Funds (Halan, Monika)
- Your Highlight on page 275 | location 2843-2846 | Added on Monday, 13 November 2023 20:41:14

 <You have reached the clipping limit for this item>
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 81 | location 1228-1238 | Added on Monday, 13 November 2023 21:05:07

A peek behind the curtain We are going to let you in on Git’s little secret. When you add (one or more files) to Git’s index, Git doesn’t touch any of the files in your working directory. Instead, it copies the contents of those files to the index. This is an important point because it is crucial to how Git tracks the content of our files. NOTE We alluded to this in the previous pages. So what happens when we commit? Well, as we know, Git takes the contents of the index, tucks those safely into its memory bank, and represents that version with a commit object. This means that now Git has a third copy of your files contents in its object database! There can be up to three copies of any file in your working directory.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 81 | location 1240-1243 | Added on Monday, 13 November 2023 21:05:38

Git looks like: you make some edits to one or more files, then add them to the index, and when you are ready, you commit them. Now, as you are going through this workflow, Git is attempting to track the state of your files so it knows which files are part of your working directory, which files have been added to the index, and which files have already been committed to its object store. Throughout, keep in mind that Git is moving copies of your file from the working directory, to the index, to its object database.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 82 | location 1244 | Added on Monday, 13 November 2023 21:06:30


==========
Head First Git (Raju Gandhi)
- Your Highlight on page 82 | location 1248-1250 | Added on Friday, 17 November 2023 09:05:45

A file that Git has never seen before (that is, a file that has never been added to the index) is marked as “untracked.” Adding the file to the index is our way of telling Git, “Hey! We’d really like you to keep an eye on this file for us.” Any file that Git is watching for us is referred to as a “tracked” file.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 82 | location 1252-1256 | Added on Friday, 17 November 2023 09:08:09

consider adding a file to the index and then immediately making a commit. Git stores the contents of the index in its object database and then marks the file as “unmodified.” Why unmodified, you ask? Well, Git compares the copy it has in its object database with the one in the index and sees they are the same. It also compares the copy in the index with the one in the working directory and sees that they are the same. So the file has not been modified (or is unmodified) since the last commit.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 82 | location 1256 | Added on Friday, 17 November 2023 09:09:08


==========
Head First Git (Raju Gandhi)
- Your Highlight on page 82 | location 1257-1259 | Added on Friday, 17 November 2023 09:09:32

if we were to make a change to a file that we had previously committed, Git sees a difference between the file in the working directory and the index but no difference between the index and the object database. So Git marks the file as “modified,” but it also marks it as “not staged” because we haven’t added it to the index yet.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 83 | location 1260 | Added on Friday, 17 November 2023 09:10:03


==========
Head First Git (Raju Gandhi)
- Your Highlight on page 83 | location 1264 | Added on Friday, 17 November 2023 09:10:25


==========
Head First Git (Raju Gandhi)
- Your Highlight on page 83 | location 1266-1267 | Added on Friday, 17 November 2023 09:10:45

Recall that any file in your working directory is either untracked or tracked. Also, a tracked file can be either staged, unmodified, or modified.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 86 | location 1311-1313 | Added on Friday, 17 November 2023 09:14:18

Now if you add the file again, Git overwrites the index with the latest changes reflected in that file. In other words, the index is a temporary scratch pad—one you can use to stuff edits into till you are sure you want to commit.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 86 | location 1309-1313 | Added on Friday, 17 November 2023 09:14:29

Of course, we can continue editing the file even after adding it to the index. Now, we have two versions of the file—one in the working directory and one in the index. Now if you add the file again, Git overwrites the index with the latest changes reflected in that file. In other words, the index is a temporary scratch pad—one you can use to stuff edits into till you are sure you want to commit.
==========
A Symphony of Echoes (Jodi Taylor)
- Your Highlight on page 241 | location 3684-3684 | Added on Friday, 24 November 2023 22:25:00

If there was one thing she hated more than a patient – it was a happy patient.
==========
Immortals of Meluha (Amish Tripathi)
- Your Highlight on page 59 | location 898-898 | Added on Monday, 1 January 2024 02:50:11

any case, you could only see his eyes and his
==========
Immortals of Meluha (Amish Tripathi)
- Your Highlight on page 166 | location 2539-2543 | Added on Friday, 5 January 2024 15:02:58

‘Yes. Sangamtamil was then the richest and most powerful country in the world. Lord Manu’s family, the Pandyas, had ruled that land for many generations. However, from the records left by Lord Manu, we know that by his time the kings had lost their old code of honour. Having fallen on corrupt ways, they spent their days in the pleasures of their fabulous wealth rather than being focused on their duties and their spiritual life. Then a terrible calamity occurred. The seas rose and destroyed their entire civilisation.’ ‘My God!’ exclaimed Shiva.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 208-215 | Added on Sunday, 7 January 2024 18:30:51

A data-intensive application is typically built from standard building blocks that provide commonly needed functionality. For example, many applications need to: Store data so that they, or another application, can find it again later (databases) Remember the result of an expensive operation, to speed up reads (caches) Allow users to search data by keyword or filter it in various ways (search indexes) Send a message to another process, to be handled asynchronously (stream processing) Periodically crunch a large amount of accumulated data (batch processing)
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 282-285 | Added on Monday, 8 January 2024 14:26:20

If all those things together mean “working correctly,” then we can understand reliability as meaning, roughly, “continuing to work correctly, even when things go wrong.” The things that can go wrong are called faults, and systems that anticipate faults and can cope with them are called fault-tolerant or resilient.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 291-296 | Added on Monday, 8 January 2024 14:27:12

Note that a fault is not the same as a failure [2]. A fault is usually defined as one component of the system deviating from its spec, whereas a failure is when the system as a whole stops providing the required service to the user. It is impossible to reduce the probability of a fault to zero; therefore it is usually best to design fault-tolerance mechanisms that prevent faults from causing failures. In this book we cover several techniques for building reliable systems from unreliable parts.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 494-496 | Added on Tuesday, 9 January 2024 17:25:13

Latency and response time are often used synonymously, but they are not the same. The response time is what the client sees: besides the actual time to process the request (the service time), it includes network delays and queueing delays. Latency is the duration that a request is waiting to be handled—during which it is latent, awaiting service
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 527-533 | Added on Tuesday, 9 January 2024 17:28:34

In order to figure out how bad your outliers are, you can look at higher percentiles: the 95th, 99th, and 99.9th percentiles are common (abbreviated p95, p99, and p999). They are the response time thresholds at which 95%, 99%, or 99.9% of requests are faster than that particular threshold. For example, if the 95th percentile response time is 1.5 seconds, that means 95 out of 100 requests take less than 1.5 seconds, and 5 out of 100 requests take 1.5 seconds or more. This is illustrated in Figure 1-4.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 696-701 | Added on Wednesday, 10 January 2024 08:40:03

One of the best tools we have for removing accidental complexity is abstraction. A good abstraction can hide a great deal of implementation detail behind a clean, simple-to-understand façade. A good abstraction can also be used for a wide range of different applications. Not only is this reuse more efficient than reimplementing a similar thing multiple times, but it also leads to higher-quality software, as quality improvements in the abstracted component benefit all applications that use it.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1156-1161 | Added on Thursday, 11 January 2024 09:18:26

However, when it comes to representing many-to-one and many-to-many relationships, relational and document databases are not fundamentally different: in both cases, the related item is referenced by a unique identifier, which is called a foreign key in the relational model and a document reference in the document model [9]. That identifier is resolved at read time by using a join or follow-up queries. To date, document databases have not followed the path of CODASYL.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1199-1206 | Added on Thursday, 11 January 2024 22:29:00

Document databases are sometimes called schemaless, but that’s misleading, as the code that reads the data usually assumes some kind of structure—i.e., there is an implicit schema, but it is not enforced by the database [20]. A more accurate term is schema-on-read (the structure of the data is implicit, and only interpreted when the data is read), in contrast with schema-on-write (the traditional approach of relational databases, where the schema is explicit and the database ensures all written data conforms to it) [21].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1199-1212 | Added on Thursday, 11 January 2024 22:29:45

Document databases are sometimes called schemaless, but that’s misleading, as the code that reads the data usually assumes some kind of structure—i.e., there is an implicit schema, but it is not enforced by the database [20]. A more accurate term is schema-on-read (the structure of the data is implicit, and only interpreted when the data is read), in contrast with schema-on-write (the traditional approach of relational databases, where the schema is explicit and the database ensures all written data conforms to it) [21]. Schema-on-read is similar to dynamic (runtime) type checking in programming languages, whereas schema-on-write is similar to static (compile-time) type checking. Just as the advocates of static and dynamic type checking have big debates about their relative merits [22], enforcement of schemas in database is a contentious topic, and in general there’s no right or wrong answer.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1240-1247 | Added on Thursday, 11 January 2024 22:31:44

Schema changes have a bad reputation of being slow and requiring downtime. This reputation is not entirely deserved: most relational database systems execute the ALTER TABLE statement in a few milliseconds. MySQL is a notable exception—it copies the entire table on ALTER TABLE, which can mean minutes or even hours of downtime when altering a large table—although various tools exist to work around this limitation [24, 25, 26].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1369-1372 | Added on Friday, 12 January 2024 09:28:08

Declarative languages have a better chance of getting faster in parallel execution because they specify only the pattern of the results, not the algorithm that is used to determine the results. The database is free to use a parallel implementation of the query language, if appropriate [32].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1462-1466 | Added on Friday, 12 January 2024 10:20:06

In a web browser, using declarative CSS styling is much better than manipulating styles imperatively in JavaScript. Similarly, in databases, declarative query languages like SQL turned out to be much better than imperative query APIs.vi
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1609-1612 | Added on Friday, 12 January 2024 12:27:38

We saw earlier that many-to-many relationships are an important distinguishing feature between different data models. If your application has mostly one-to-many relationships (tree-structured data) or no relationships between records, the document model is appropriate.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1649-1656 | Added on Friday, 12 January 2024 14:52:26

Property Graphs In the property graph model, each vertex consists of: A unique identifier A set of outgoing edges A set of incoming edges A collection of properties (key-value pairs)
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1649-1667 | Added on Friday, 12 January 2024 14:52:53

Property Graphs In the property graph model, each vertex consists of: A unique identifier A set of outgoing edges A set of incoming edges A collection of properties (key-value pairs) Each edge consists of: A unique identifier The vertex at which the edge starts (the tail vertex) The vertex at which the edge ends (the head vertex) A label to describe the kind of relationship between the two vertices A collection of properties (key-value pairs) You can think of a graph store as consisting of two relational tables, one for vertices and one for edges, as shown in Example 2-2 (this schema uses the PostgreSQL json datatype to store the properties of each vertex or edge). The head and tail vertex are stored for each edge; if you want the set of incoming or outgoing edges for a vertex, you can query the edges table by head_vertex or tail_vertex, respectively.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 93 | location 1415-1419 | Added on Friday, 12 January 2024 15:06:15

There is one final detail about commits that you ought to know about. For every commit that you make (other than the very first one in a repository), the commit also records the commit ID of the commit that came just before it. That is to say, the commits form a chain, much like the branch of a tree, or a string of Christmas lights. This means, given a commit ID, Git can trace its lineage by simply following the “parent” pointer. This is referred to as the commit history and is an integral piece to how Git works.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 94 | location 1427-1429 | Added on Friday, 12 January 2024 15:07:39

The Git commit history is often referred to as a directed acyclic graph, or DAG for short, wherein the commits form the “nodes” and the pointers to the parent form the “edges.” They are directed because children point to parent, and acyclic because parents do not point back to their children.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 95 | location 1456-1459 | Added on Friday, 12 January 2024 15:09:22

A brand new file added to the working directory is marked as “untracked,” which suggests that Git does not know about this file. Adding a new file to Git’s index does two things—it marks the file as being “tracked” and creates a copy of that file into the index.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 100 | location 1525-1531 | Added on Friday, 12 January 2024 15:12:15

You create a new file in the repository called Hello.txt. You add Hello.txt to the index (using git add). You commit all the changes that you staged (using git commit). You edit Hello.txt with some new content. 
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1887-1887 | Added on Saturday, 13 January 2024 09:42:46

The triple-store model is mostly equivalent to the property graph model, using different words to describe the same ideas.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 1925-1932 | Added on Saturday, 13 January 2024 09:48:40

The semantic web If you read more about triple-stores, you may get sucked into a maelstrom of articles written about the semantic web. The triple-store data model is completely independent of the semantic web—for example, Datomic [40] is a triple-store that does not claim to have anything to do with it.vii But since the two are so closely linked in many people’s minds, we should discuss them briefly.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2011-2012 | Added on Saturday, 13 January 2024 09:53:10

SPARQL is a nice query language—even if the semantic web never happens, it can be a powerful tool for applications to use internally.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2051-2054 | Added on Saturday, 13 January 2024 09:55:40

Datalog’s data model is similar to the triple-store model, generalized a bit. Instead of writing a triple as (subject, predicate, object), we write it as predicate(subject, object). Example 2-10 shows how to write the data from our example in Datalog.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2145-2148 | Added on Saturday, 13 January 2024 10:04:05

One thing that document and graph databases have in common is that they typically don’t enforce a schema for the data they store, which can make it easier to adapt applications to changing requirements. However, your application most likely still assumes that data has a certain structure; it’s just a question of whether the schema is explicit (enforced on write) or implicit (handled on read).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2148-2150 | Added on Saturday, 13 January 2024 10:04:24

Each data model comes with its own query language or framework, and we discussed several examples: SQL, MapReduce, MongoDB’s aggregation pipeline, Cypher, SPARQL, and Datalog. We also touched on CSS and XSL/XPath, which aren’t database query languages but have interesting parallels.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 110 | location 1676-1680 | Added on Saturday, 13 January 2024 15:28:54

git switch is a relatively new command. If you get an error like “switch is not a git command”, be sure to check the version of Git you have installed with git version. You need to have a version greater than 2.23.0. Older versions of Git used the git checkout command to switch branches. While that still works, we prefer to show you the latest (and now correct) way to do things.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2351-2353 | Added on Saturday, 13 January 2024 15:33:19

We will examine two families of storage engines: log-structured storage engines, and page-oriented storage engines such as B-trees.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2400-2402 | Added on Saturday, 13 January 2024 15:39:27

This is an important trade-off in storage systems: well-chosen indexes speed up read queries, but every index slows down writes. For this reason, databases don’t usually index everything by default, but require you—the application developer or database administrator—to choose indexes manually, using your knowledge of the application’s typical query patterns.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2500-2502 | Added on Sunday, 14 January 2024 09:10:37

We call this format Sorted String Table, or SSTable for short. We also require that each key only appears once within each merged segment file (the compaction process already ensures that). SSTables have several big advantages over log segments with hash indexes:
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2537-2538 | Added on Sunday, 14 January 2024 09:15:15

When a write comes in, add it to an in-memory balanced tree data structure (for example, a red-black tree). This in-memory tree is sometimes called a memtable.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2541-2542 | Added on Sunday, 14 January 2024 09:15:53

In order to serve a read request, first try to find the key in the memtable, then in the most recent on-disk segment, then in the next-older segment, etc.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2544-2548 | Added on Sunday, 14 January 2024 09:16:21

This scheme works very well. It only suffers from one problem: if the database crashes, the most recent writes (which are in the memtable but not yet written out to disk) are lost. In order to avoid that problem, we can keep a separate log on disk to which every write is immediately appended, just like in the previous section. That log is not in sorted order, but that doesn’t matter, because its only purpose is to restore the memtable after a crash. Every time the memtable is written out to an SSTable, the corresponding log can be discarded.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2561-2565 | Added on Sunday, 14 January 2024 09:17:16

Similar storage engines are used in Cassandra and HBase [8], both of which were inspired by Google’s Bigtable paper [9] (which introduced the terms SSTable and memtable).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2565-2570 | Added on Sunday, 14 January 2024 09:17:39

Originally this indexing structure was described by Patrick O’Neil et al. under the name Log-Structured Merge-Tree (or LSM-Tree) [10], building on earlier work on log-structured filesystems [11]. Storage engines that are based on this principle of merging and compacting sorted files are often called LSM storage engines.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2586-2590 | Added on Sunday, 14 January 2024 09:18:47

In order to optimize this kind of access, storage engines often use additional Bloom filters [15]. (A Bloom filter is a memory-efficient data structure for approximating the contents of a set. It can tell you if a key does not appear in the database, and thus saves many unnecessary disk reads for nonexistent keys.)
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2601-2605 | Added on Sunday, 14 January 2024 09:19:51

Even though there are many subtleties, the basic idea of LSM-trees—keeping a cascade of SSTables that are merged in the background—is simple and effective. Even when the dataset is much bigger than the available memory it continues to work well. Since data is stored in sorted order, you can efficiently perform range queries (scanning all keys above some minimum and up to some maximum), and because the disk writes are sequential the LSM-tree can support remarkably high write throughput.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2611-2617 | Added on Sunday, 14 January 2024 09:20:09

B-Trees The log-structured indexes we have discussed so far are gaining acceptance, but they are not the most common type of index. The most widely used indexing structure is quite different: the B-tree.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2638-2642 | Added on Sunday, 14 January 2024 09:22:24

The number of references to child pages in one page of the B-tree is called the branching factor. For example, in Figure 3-6 the branching factor is six. In practice, the branching factor depends on the amount of space required to store the page references and the range boundaries, but typically it is several hundred.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2652-2653 | Added on Sunday, 14 January 2024 09:24:25

(A four-level tree of 4 KB pages with a branching factor of 500 can store up to 256 TB.)
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2668-2674 | Added on Sunday, 14 January 2024 09:25:37

In order to make the database resilient to crashes, it is common for B-tree implementations to include an additional data structure on disk: a write-ahead log (WAL, also known as a redo log). This is an append-only file to which every B-tree modification must be written before it can be applied to the pages of the tree itself. When the database comes back up after a crash, this log is used to restore the B-tree back to a consistent state [5, 20].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2700-2703 | Added on Sunday, 14 January 2024 10:14:34

B-tree variants such as fractal trees [22] borrow some log-structured ideas to reduce disk seeks (and they have nothing to do with fractals).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2707-2718 | Added on Sunday, 14 January 2024 10:42:50

Comparing B-Trees and LSM-Trees Even though B-tree implementations are generally more mature than LSM-tree implementations, LSM-trees are also interesting due to their performance characteristics. As a rule of thumb, LSM-trees are typically faster for writes, whereas B-trees are thought to be faster for reads [23]. Reads are typically slower on LSM-trees because they have to check several different data structures and SSTables at different stages of compaction. However, benchmarks are often inconclusive and sensitive to details of the workload. You need to test systems with your particular workload in order to make a valid comparison. In this section we will briefly discuss a few things that are worth considering when measuring the performance of a storage engine.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 118 | location 1807-1811 | Added on Sunday, 14 January 2024 12:19:02

What is a branch, really? Say it with us—a branch is simply a reference to a commit. So what makes a branch a branch? Let’s start with the role of a commit—a commit is a snapshot of the content you staged (that is, the files you added to the index). If you happen to be working on a task in which you have made two or more commits, then the commits are “strung” together. That is, every subsequent commit records the ID of the commit that came just before it.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 119 | location 1819-1820 | Added on Sunday, 14 January 2024 12:21:20

A branch is simply a reference to a commit via its ID. This reference is updated every time you make another commit on that branch.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 120 | location 1839-1841 | Added on Sunday, 14 January 2024 12:24:29

Every time you switch branches, Git rewrites your working directory to look like it did when you made the most recent commit on the branch you just switched to.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 121 | location 1844-1846 | Added on Sunday, 14 January 2024 12:30:29

This is particularly important if you have files open in your editor. It’s a good idea to either refresh the files in your editor or simply reopen the project after switching branches so you see the latest set of files.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 123 | location 1882-1883 | Added on Sunday, 14 January 2024 12:35:25

Merging in Git typically involves two branches—the branch that you are on (we’ll refer to this as the “proposer”) and the branch you wish to merge or “mix” in (we’ll call this the “proposee”).
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 126 | location 1928-1929 | Added on Sunday, 14 January 2024 19:59:23

Here is your memory trick of the day: “--help” has more characters in it than “-h”, just as the --help page has more characters and details than the -h page.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 130 | location 1979-1992 | Added on Sunday, 14 January 2024 20:26:05

Some merges are fast-forward When you merge two branches together, you are combining the work done in the individual branches: that is, you are bringing together two separate commit histories. You might have also noticed the “fast-forward” that appeared in your terminal output when you performed the merge between the master and the add-fall-menu branch. So what did Git actually do? Let’s start with the commit history, focusing only on master and add-fall-menu. For simplicity we’ll use letters in alphabetical order to represent the commit IDs. It looks something like this. In this scenario, we have two sticky notes to represent the two branches, each one pointing to the latest commit on that branch. The thing to notice here is that the add-fall-menu branch is based on the latest commit on the master branch. The master branch has not changed (no new commits on it) since the inception of the add-fall-menu branch. In other words, the add-fall-menu branch has everything the master branch does! Which means, for Git to make master (the proposer) look like add-fall-menu, Git could simply move master to the same commit as the last commit on the add-fall-menu branch. That is exactly what Git does. Git rewrites the master sticky note to point to the same commit that the add-fall-menu sticky note points to. This is referred to as a “fast-forward” merge—where a branch, in this case master, simply jumps forward.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 130 | location 1993-1996 | Added on Sunday, 14 January 2024 20:28:37

When merging, the fast-forward merge is the best-case scenario, since technically it’s not a merge at all. It’s simply one branch “catching up” with another. Look back and study the commit IDs you listed on the previous page. Notice that the add-fall-menu branch and the master branch both point to the same commit after the merge.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 138 | location 2116-2119 | Added on Sunday, 14 January 2024 20:54:22

It’s a merge commit We know, you are brimming with questions! Is this merge any different from our last merge? If it is, why? We have never seen an editor pop up to ask for a commit message before, so what’s different now?
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 139 | location 2127-2131 | Added on Sunday, 14 January 2024 20:58:51

When we try to merge add-thurs-menu into master, Git has to reconcile two different sets of changes into one. So Git pulls a fast one—it creates a new commit for us that represents the combined work from both branches. Here is what your commit history looks like before and after the merge: Notice
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 141 | location 2157-2163 | Added on Monday, 15 January 2024 09:27:42

A merge commit is like any other commit you have created so far. It records the work that resulted from bringing two branches together, along with some metadata. The metadata includes your name and email, the time when the commit was created, and the commit message you supplied when we performed the merge. Also, every commit (other than the very first one in a repository) records the ID of the commit that preceded it. However, merge commits have a few interesting characteristics. For one thing, remember that you did not create this commit explicitly—rather, Git did, when it merged two branches that had diverged away from one another. For another thing, a merge commit has two parents—the first parent is the last commit on the branch that is the proposer, and the second parent is the last commit from the proposee branch that was merged in. Looking back at the 80s-diner commit history:
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 143 | location 2182-2187 | Added on Monday, 15 January 2024 09:30:40

Merge conflicts result when we attempt to bring together commits that affect the same files in different ways. This is similar to our alternate universes crashing into one another—when that happens, how will you reconcile your humanitarian and villain selves? One such scenario is the one we just described—we have the same file in two different branches, continue to treat the master branch as the integration branch, and merge feat-a into the master branch. What happens? Git throws its hands up in surrender! Git has absolutely no way of determining which version to keep, so it stops the merge midway and reports a merge conflict.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2787-2791 | Added on Monday, 15 January 2024 09:40:12

A secondary index can easily be constructed from a key-value index. The main difference is that keys are not unique; i.e., there might be many rows (documents, vertices) with the same key. This can be solved in two ways: either by making each value in the index a list of matching row identifiers (like a postings list in a full-text index) or by making each key unique by appending a row identifier to it. Either way, both B-trees and log-structured indexes can be used as secondary indexes.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2797-2811 | Added on Monday, 15 January 2024 09:42:12

When updating a value without changing the key, the heap file approach can be quite efficient: the record can be overwritten in place, provided that the new value is not larger than the old value. The situation is more complicated if the new value is larger, as it probably needs to be moved to a new location in the heap where there is enough space. In that case, either all indexes need to be updated to point at the new heap location of the record, or a forwarding pointer is left behind in the old heap location [5]. In some situations, the extra hop from the index to the heap file is too much of a performance penalty for reads, so it can be desirable to store the indexed row directly within an index. This is known as a clustered index. For example, in MySQL’s InnoDB storage engine, the primary key of a table is always a clustered index, and secondary indexes refer to the primary key (rather than a heap file location) [31]. In SQL Server, you can specify one clustered index per table [32].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2812-2817 | Added on Monday, 15 January 2024 09:42:55

A compromise between a clustered index (storing all row data within the index) and a nonclustered index (storing only references to the data within the index) is known as a covering index or index with included columns, which stores some of a table’s columns within the index [33]. This allows some queries to be answered by using the index alone (in which case, the index is said to cover the query) [32].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2861-2868 | Added on Monday, 15 January 2024 09:47:12

Full-text search and fuzzy indexes All the indexes discussed so far assume that you have exact data and allow you to query for exact values of a key, or a range of values of a key with a sort order. What they don’t allow you to do is search for similar keys, such as misspelled words. Such fuzzy querying requires different techniques.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2906-2915 | Added on Monday, 15 January 2024 09:50:40

Products such as VoltDB, MemSQL, and Oracle TimesTen are in-memory databases with a relational model, and the vendors claim that they can offer big performance improvements by removing all the overheads associated with managing on-disk data structures [41, 42]. RAMCloud is an open source, in-memory key-value store with durability (using a log-structured approach for the data in memory as well as the data on disk) [43]. Redis and Couchbase provide weak durability by writing to disk asynchronously.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2948-2952 | Added on Monday, 15 January 2024 09:54:27

the basic access pattern remained similar to processing business transactions. An application typically looks up a small number of records by some key, using an index. Records are inserted or updated based on the user’s input. Because these applications are interactive, the access pattern became known as online transaction processing (OLTP).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2952-2954 | Added on Monday, 15 January 2024 09:55:01

However, databases also started being increasingly used for data analytics, which has very different access patterns. Usually an analytic query needs to scan over a huge number of records, only reading a few columns per record, and calculates aggregate statistics (such as count, sum, or average) rather than returning the raw data to the user.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2952-2966 | Added on Monday, 15 January 2024 09:55:35

However, databases also started being increasingly used for data analytics, which has very different access patterns. Usually an analytic query needs to scan over a huge number of records, only reading a few columns per record, and calculates aggregate statistics (such as count, sum, or average) rather than returning the raw data to the user. For example, if your data is a table of sales transactions, then analytic queries might be: What was the total revenue of each of our stores in January? How many more bananas than usual did we sell during our latest promotion? Which brand of baby food is most often purchased together with brand X diapers? These queries are often written by business analysts, and feed into reports that help the management of a company make better decisions (business intelligence). In order to differentiate this pattern of using databases from transaction processing, it has been called online analytic processing (OLAP) [47].iv The difference between OLTP and OLAP is not always clear-cut, but some typical characteristics are listed in Table 3-1.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2982-2986 | Added on Monday, 15 January 2024 09:56:36

At first, the same databases were used for both transaction processing and analytic queries. SQL turned out to be quite flexible in this regard: it works well for OLTP-type queries as well as OLAP-type queries. Nevertheless, in the late 1980s and early 1990s, there was a trend for companies to stop using their OLTP systems for analytics purposes, and to run the analytics on a separate database instead. This separate database was called a data warehouse.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2991-2995 | Added on Monday, 15 January 2024 09:58:14

These OLTP systems are usually expected to be highly available and to process transactions with low latency, since they are often critical to the operation of the business. Database administrators therefore closely guard their OLTP databases. They are usually reluctant to let business analysts run ad hoc analytic queries on an OLTP database, since those queries are often expensive, scanning large parts of the dataset, which can harm the performance of concurrently executing transactions.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 2991-3004 | Added on Monday, 15 January 2024 09:58:42

These OLTP systems are usually expected to be highly available and to process transactions with low latency, since they are often critical to the operation of the business. Database administrators therefore closely guard their OLTP databases. They are usually reluctant to let business analysts run ad hoc analytic queries on an OLTP database, since those queries are often expensive, scanning large parts of the dataset, which can harm the performance of concurrently executing transactions. A data warehouse, by contrast, is a separate database that analysts can query to their hearts’ content, without affecting OLTP operations [48]. The data warehouse contains a read-only copy of the data in all the various OLTP systems in the company. Data is extracted from OLTP databases (using either a periodic data dump or a continuous stream of updates), transformed into an analysis-friendly schema, cleaned up, and then loaded into the data warehouse. This process of getting data into the warehouse is known as Extract–Transform–Load (ETL) and is illustrated in Figure 3-8. Figure 3-8. Simplified outline of ETL into a data warehouse.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3008-3012 | Added on Monday, 15 January 2024 10:09:35

A big advantage of using a separate data warehouse, rather than querying OLTP systems directly for analytics, is that the data warehouse can be optimized for analytic access patterns. It turns out that the indexing algorithms discussed in the first half of this chapter work well for OLTP, but are not very good at answering analytic queries. In the rest of this chapter we will look at storage engines that are optimized for analytics instead.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 144 | location 2203-2204 | Added on Monday, 15 January 2024 10:10:01

Now it’s just a question of editing the files that have merge conflicts. You have four options....
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 145 | location 2209-2214 | Added on Monday, 15 January 2024 10:10:38

When you have a merge conflict, you have four choices. You can pick the changes introduced in the master branch, the changes in the feat-a branch, pick both (in this particular case), or ignore both and write something new altogether! Remember that the markers that Git put in there are just to highlight the conflicts—they are just there to help you out. Once you choose, this is what the file should look like: Your options: 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 148 | location 2270-2271 | Added on Monday, 15 January 2024 19:04:34

First things first: you can’t delete the branch that you are on! So if you happen to be on the branch you are about to delete, you need to switch to another branch.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 149 | location 2280-2282 | Added on Monday, 15 January 2024 19:05:22

If you suddenly realize you deleted the wrong branch, you can use a variation of the git branch command that lets you supply it the commit ID the branch should be based on, like so: git branch <branch-name> <base-commit-id>. This will allow you to undo an accidental delete.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 151 | location 2308-2316 | Added on Monday, 15 January 2024 19:10:21

Take a moment to think about what your commit history looks like after you finish merging: When you delete the feat-a branch, all Git does is to throw away the sticky note that represents the feat-a branch. As for commit “B”: notice that the merge commit “D” has two parents, “C” and “B,” and the master branch sticky note points to commit “D.” So “B” sticks around because your commit history needs it. (Remember, it acts as the second parent of commit “D.”) The thing to remember is that as long as a commit is “reachable”—that is, there is a reference to it (like a branch) or another commit pointing to it as a parent—it will stay in your commit history. In this case, the master branch points to commit “D,” and “D” points to “B.” So commit “B” stays. You can extend this logic to “A” as well—because it has two commits referencing it—“B” and “C.”
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 152 | location 2317-2329 | Added on Monday, 15 January 2024 19:11:42

Deleting unmerged branches You now understand the impact of deleting branches. Which is, if the branch you are deleting has been merged, then your commit history does not change! Only the sticky note that represents the branch disappears. But what if you try to delete a branch that hasn’t been merged yet? Let’s look at another hypothetical commit history where we have two branches, master and feat-b, but we haven’t merged them together yet. Notice that there is a commit “B” on the feat-b branch. Now, if we tried to delete the feat-b branch, this is what you’d see: Git notices that if you were to delete the feat-b branch, commit “B” would not be reachable. In other words, there is nothing (a sticky note, or another commit) referencing it. And so it refuses to! Now there is a chance that you created a branch just to try out an idea or approach a problem using a different tack, and you don’t care for it anymore. You can supply the branch command with the -D (yep, uppercase D) flag to force its deletion. NOTE Git will display the ID of the latest commit of the branch that you force deleted, so you can always recover it like we showed you a few pages ago.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 156 | location 2388-2391 | Added on Monday, 15 January 2024 22:21:38

The easiest kind of merge is called a “fast-forward merge,” in which one branch simply “catches up” with another branch. The other kind of merge is when you merge two branches that have diverged from one another, in which case Git will create a merge commit.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 156 | location 2392-2393 | Added on Monday, 15 January 2024 22:21:50

A merge commit is like any other commit, except it’s created by Git and has not one but two parents—the first parent is the latest commit on the integration branch, and the second parent is the latest commit on the feature branch.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 157 | location 2398-2403 | Added on Monday, 15 January 2024 22:22:20

If you attempt to delete a branch that has not been merged yet, Git will error out. If you are absolutely sure you want to delete an unmerged branch, you’ll have to use the -D (uppercase “D”) flag with the git branch command. A branch is always based on a commit. If you know the ID of the commit you want to use as the basis for a branch, you can supply it to the git branch command: git branch branch-name commit-ID
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3020-3021 | Added on Tuesday, 16 January 2024 08:41:02

Some databases, such as Microsoft SQL Server and SAP HANA, have support for transaction processing and data warehousing in the same product.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3051-3056 | Added on Tuesday, 16 January 2024 08:42:20

As explored in Chapter 2, a wide range of different data models are used in the realm of transaction processing, depending on the needs of the application. On the other hand, in analytics, there is much less diversity of data models. Many data warehouses are used in a fairly formulaic style, known as a star schema (also known as dimensional modeling [55]).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3056-3060 | Added on Tuesday, 16 January 2024 08:42:53

The example schema in Figure 3-9 shows a data warehouse that might be found at a grocery retailer. At the center of the schema is a so-called fact table (in this example, it is called fact_sales). Each row of the fact table represents an event that occurred at a particular time (here, each row represents a customer’s purchase of a product). If we were analyzing website traffic rather than retail sales, each row might represent a page view or a click by a user.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3066-3070 | Added on Tuesday, 16 January 2024 08:44:34

Some of the columns in the fact table are attributes, such as the price at which the product was sold and the cost of buying it from the supplier (allowing the profit margin to be calculated). Other columns in the fact table are foreign key references to other tables, called dimension tables. As each row in the fact table represents an event, the dimensions represent the who, what, where, when, how, and why of the event.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3066-3075 | Added on Tuesday, 16 January 2024 08:45:13

Some of the columns in the fact table are attributes, such as the price at which the product was sold and the cost of buying it from the supplier (allowing the profit margin to be calculated). Other columns in the fact table are foreign key references to other tables, called dimension tables. As each row in the fact table represents an event, the dimensions represent the who, what, where, when, how, and why of the event. For example, in Figure 3-9, one of the dimensions is the product that was sold. Each row in the dim_product table represents one type of product that is for sale, including its stock-keeping unit (SKU), description, brand name, category, fat content, package size, etc. Each row in the fact_sales table uses a foreign key to indicate which product was sold in that particular transaction. (For simplicity, if the customer buys several different products at once, they are represented as separate rows in the fact table.)
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3077-3079 | Added on Tuesday, 16 January 2024 08:45:43

The name “star schema” comes from the fact that when the table relationships are visualized, the fact table is in the middle, surrounded by its dimension tables; the connections to these tables are like the rays of a star.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3079-3084 | Added on Tuesday, 16 January 2024 08:46:16

A variation of this template is known as the snowflake schema, where dimensions are further broken down into subdimensions. For example, there could be separate tables for brands and product categories, and each row in the dim_product table could reference the brand and category as foreign keys, rather than storing them as strings in the dim_product table. Snowflake schemas are more normalized than star schemas, but star schemas are often preferred because they are simpler for analysts to work with [55].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3131-3134 | Added on Tuesday, 16 January 2024 08:49:45

The idea behind column-oriented storage is simple: don’t store all the values from one row together, but store all the values from each column together instead. If each column is stored in a separate file, a query only needs to read and parse those columns that are used in that query, which can save a lot of work. This principle is illustrated in Figure 3-10.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3153-3158 | Added on Tuesday, 16 January 2024 08:51:07

Take a look at the sequences of values for each column in Figure 3-10: they often look quite repetitive, which is a good sign for compression. Depending on the data in the column, different compression techniques can be used. One technique that is particularly effective in data warehouses is bitmap encoding, illustrated in Figure 3-11. Figure 3-11. Compressed, bitmap-indexed storage of a single column.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3158-3165 | Added on Tuesday, 16 January 2024 08:53:40

Often, the number of distinct values in a column is small compared to the number of rows (for example, a retailer may have billions of sales transactions, but only 100,000 distinct products). We can now take a column with n distinct values and turn it into n separate bitmaps: one bitmap for each distinct value, with one bit for each row. The bit is 1 if the row has that value, and 0 if not. If n is very small (for example, a country column may have approximately 200 distinct values), those bitmaps can be stored with one bit per row. But if n is bigger, there will be a lot of zeros in most of the bitmaps (we say that they are sparse). In that case, the bitmaps can additionally be run-length encoded, as shown at the bottom of Figure 3-11. This can make the encoding of a column remarkably compact.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3165-3169 | Added on Tuesday, 16 January 2024 08:54:29

Bitmap indexes such as these are very well suited for the kinds of queries that are common in a data warehouse. For example: WHERE product_sk IN (30, 68, 69): Load the three bitmaps for product_sk = 30, product_sk = 68, and product_sk = 69, and calculate the bitwise OR of the three bitmaps, which can be done very efficiently.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3219-3225 | Added on Tuesday, 16 January 2024 09:04:22

Another advantage of sorted order is that it can help with compression of columns. If the primary sort column does not have many distinct values, then after sorting, it will have long sequences where the same value is repeated many times in a row. A simple run-length encoding, like we used for the bitmaps in Figure 3-11, could compress that column down to a few kilobytes—even if the table has billions of rows. That compression effect is strongest on the first sort key. The second and third sort keys will be more jumbled up, and thus not have such long runs of repeated values. Columns further down the sorting priority appear in essentially random order, so they probably won’t compress as well. But having the first few columns sorted is still a win overall.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3247-3254 | Added on Tuesday, 16 January 2024 09:07:44

Fortunately, we have already seen a good solution earlier in this chapter: LSM-trees. All writes first go to an in-memory store, where they are added to a sorted structure and prepared for writing to disk. It doesn’t matter whether the in-memory store is row-oriented or column-oriented. When enough writes have accumulated, they are merged with the column files on disk and written to new files in bulk. This is essentially what Vertica does [62]. Queries need to examine both the column data on disk and the recent writes in memory, and combine the two. However, the query optimizer hides this distinction from the user. From an analyst’s point of view, data that has been modified with inserts, updates, or deletes is immediately reflected in subsequent queries.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3261-3266 | Added on Tuesday, 16 January 2024 09:08:15

Another aspect of data warehouses that is worth mentioning briefly is materialized aggregates. As discussed earlier, data warehouse queries often involve an aggregate function, such as COUNT, SUM, AVG, MIN, or MAX in SQL. If the same aggregates are used by many different queries, it can be wasteful to crunch through the raw data every time. Why not cache some of the counts or sums that queries use most often?
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3261-3270 | Added on Tuesday, 16 January 2024 09:08:26

Another aspect of data warehouses that is worth mentioning briefly is materialized aggregates. As discussed earlier, data warehouse queries often involve an aggregate function, such as COUNT, SUM, AVG, MIN, or MAX in SQL. If the same aggregates are used by many different queries, it can be wasteful to crunch through the raw data every time. Why not cache some of the counts or sums that queries use most often? One way of creating such a cache is a materialized view. In a relational data model, it is often defined like a standard (virtual) view: a table-like object whose contents are the results of some query. The difference is that a materialized view is an actual copy of the query results, written to disk, whereas a virtual view is just a shortcut for writing queries. When you read from a virtual view, the SQL engine expands it into
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3261-3271 | Added on Tuesday, 16 January 2024 09:08:33

Another aspect of data warehouses that is worth mentioning briefly is materialized aggregates. As discussed earlier, data warehouse queries often involve an aggregate function, such as COUNT, SUM, AVG, MIN, or MAX in SQL. If the same aggregates are used by many different queries, it can be wasteful to crunch through the raw data every time. Why not cache some of the counts or sums that queries use most often? One way of creating such a cache is a materialized view. In a relational data model, it is often defined like a standard (virtual) view: a table-like object whose contents are the results of some query. The difference is that a materialized view is an actual copy of the query results, written to disk, whereas a virtual view is just a shortcut for writing queries. When you read from a virtual view, the SQL engine expands it into the view’s underlying query on the fly and then processes the expanded query.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3261-3275 | Added on Tuesday, 16 January 2024 09:09:07

Another aspect of data warehouses that is worth mentioning briefly is materialized aggregates. As discussed earlier, data warehouse queries often involve an aggregate function, such as COUNT, SUM, AVG, MIN, or MAX in SQL. If the same aggregates are used by many different queries, it can be wasteful to crunch through the raw data every time. Why not cache some of the counts or sums that queries use most often? One way of creating such a cache is a materialized view. In a relational data model, it is often defined like a standard (virtual) view: a table-like object whose contents are the results of some query. The difference is that a materialized view is an actual copy of the query results, written to disk, whereas a virtual view is just a shortcut for writing queries. When you read from a virtual view, the SQL engine expands it into the view’s underlying query on the fly and then processes the expanded query. When the underlying data changes, a materialized view needs to be updated, because it is a denormalized copy of the data. The database can do that automatically, but such updates make writes more expensive, which is why materialized views are not often used in OLTP databases. In read-heavy data warehouses they can make more sense (whether or not they actually improve read performance depends on the individual case).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3276-3281 | Added on Tuesday, 16 January 2024 09:09:36

A common special case of a materialized view is known as a data cube or OLAP cube [64]. It is a grid of aggregates grouped by different dimensions. Figure 3-12 shows an example. Figure 3-12. Two dimensions of a data cube, aggregating data by summing.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3276-3296 | Added on Tuesday, 16 January 2024 09:11:29

A common special case of a materialized view is known as a data cube or OLAP cube [64]. It is a grid of aggregates grouped by different dimensions. Figure 3-12 shows an example. Figure 3-12. Two dimensions of a data cube, aggregating data by summing. Imagine for now that each fact has foreign keys to only two dimension tables—in Figure 3-12, these are date and product. You can now draw a two-dimensional table, with dates along one axis and products along the other. Each cell contains the aggregate (e.g., SUM) of an attribute (e.g., net_price) of all facts with that date-product combination. Then you can apply the same aggregate along each row or column and get a summary that has been reduced by one dimension (the sales by product regardless of date, or the sales by date regardless of product). In general, facts often have more than two dimensions. In Figure 3-9 there are five dimensions: date, product, store, promotion, and customer. It’s a lot harder to imagine what a five-dimensional hypercube would look like, but the principle remains the same: each cell contains the sales for a particular date-product-store-promotion-customer combination. These values can then repeatedly be summarized along each of the dimensions. The advantage of a materialized data cube is that certain queries become very fast because they have effectively been precomputed. For example, if you want to know the total sales per store yesterday, you just need to look at the totals along the appropriate dimension—no need to scan millions of rows. The disadvantage is that a data cube doesn’t have the same flexibility as querying the raw data. For example, there is no way of calculating which proportion of sales comes from items that cost more than $100, because the price isn’t one of the dimensions. Most data warehouses therefore try to keep as much raw data as possible, and use aggregates such as data cubes only as a performance boost for certain queries.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3306-3311 | Added on Tuesday, 16 January 2024 09:32:41

On the OLTP side, we saw storage engines from two main schools of thought: The log-structured school, which only permits appending to files and deleting obsolete files, but never updates a file that has been written. Bitcask, SSTables, LSM-trees, LevelDB, Cassandra, HBase, Lucene, and others belong to this group. The update-in-place school, which treats the disk as a set of fixed-size pages that can be overwritten. B-trees are the biggest example of this philosophy, being used in all major relational databases and also many nonrelational ones.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 175 | location 2678 | Added on Tuesday, 16 January 2024 16:49:30


==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3566-3569 | Added on Wednesday, 17 January 2024 09:24:35

Backward compatibility Newer code can read data that was written by older code. Forward compatibility Older code can read data that was written by newer code.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3582-3592 | Added on Wednesday, 17 January 2024 09:26:12

When you want to write data to a file or send it over the network, you have to encode it as some kind of self-contained sequence of bytes (for example, a JSON document). Since a pointer wouldn’t make sense to any other process, this sequence-of-bytes representation looks quite different from the data structures that are normally used in memory.i Thus, we need some kind of translation between the two representations. The translation from the in-memory representation to a byte sequence is called encoding (also known as serialization or marshalling), and the reverse is called decoding (parsing, deserialization, unmarshalling).ii
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3624-3626 | Added on Wednesday, 17 January 2024 09:28:32

For these reasons it’s generally a bad idea to use your language’s built-in encoding for anything other than very transient purposes.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3672-3675 | Added on Wednesday, 17 January 2024 09:33:10

JSON is less verbose than XML, but both still use a lot of space compared to binary formats. This observation led to the development of a profusion of binary encodings for JSON (MessagePack, BSON, BJSON, UBJSON, BISON, and Smile, to name a few) and for XML (WBXML and Fast Infoset, for example). These formats have been adopted in various niches, but none of them are as widely adopted as the textual versions of JSON and XML.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3719-3729 | Added on Wednesday, 17 January 2024 09:49:24

Both Thrift and Protocol Buffers require a schema for any data that is encoded. To encode the data in Example 4-1 in Thrift, you would describe the schema in the Thrift interface definition language (IDL) like this: struct Person {
  1: required string       userName,
  2: optional i64          favoriteNumber,
  3: optional list<string> interests
}
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3780-3782 | Added on Wednesday, 17 January 2024 10:26:48

We said previously that schemas inevitably need to change over time. We call this schema evolution. How do Thrift and Protocol Buffers handle schema changes while keeping backward and forward compatibility?
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3787-3794 | Added on Wednesday, 17 January 2024 10:28:32

You can add new fields to the schema, provided that you give each field a new tag number. If old code (which doesn’t know about the new tag numbers you added) tries to read data written by new code, including a new field with a tag number it doesn’t recognize, it can simply ignore that field. The datatype annotation allows the parser to determine how many bytes it needs to skip. This maintains forward compatibility: old code can read records that were written by new code. What about backward compatibility? As long as each field has a unique tag number, new code can always read old data, because the tag numbers still have the same meaning. The only detail is that if you add a new field, you cannot make it required. If you were to add a field and make it required, that check would fail if new code read data written by old code, because the old code will not have written the new field that you added. Therefore, to maintain backward compatibility, every field you add after the initial deployment of the schema must be optional or have a default value.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 177 | location 2703-2711 | Added on Wednesday, 17 January 2024 22:23:16

How does git log work? What happens when Brigitte looks at the log of her repository? Consider a hypothetical commit history—it is made up of three branches—master, feat-a, and feat-b. Suppose Brigitte is on the feat-a branch and executes the git log command: Since Brigitte is on the feat-a branch, which points to commit “C,” the output of the git log command starts with C. It then reads and displays the details of that commit. It sees that “B” is C’s parent, so it does the same for “B.” After displaying the details of commit “B,” Git proceeds to commit “A” since that is the parent commit of “B.” However, “A” is the first commit made in this repository, and it has no parent, so it stops. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 177 | location 2713-2721 | Added on Wednesday, 17 January 2024 22:24:08

Enough with the suspense! Let’s see what it takes Brigitte to see all her commits across all the branches in her repository. If you guessed more flags, then ding, ding, ding—you win the prize! We know we like the --oneline flag—this time around we are going to add two more flags, namely --all and --graph. The --all flag does exactly what it says on the tin—it displays all branches in the repository. The --graph flag asks the git log command to display the commits as a graph. This is how we use it: NOTE This graph is the “directed acyclic graph” that we mentioned in Chapter 1. We’ve come full circle! 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 181 | location 2764-2768 | Added on Wednesday, 17 January 2024 22:28:35

And remember—Git only knows what a file looks like if it’s tracking the file, in that, at some point, you either added a particular file to Git’s index, or committed it. NOTE We talked about untracked and tracked files in Chapter 1.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 182 | location 2781-2783 | Added on Wednesday, 17 January 2024 22:31:22

Running git diff in a repository compares the version that Git has in its index with the version of the file in the working directory. This ordering is important! You can think of it as the version in the index being the “old” version and the version in the working directory being the “new” version.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 182 | location 2790-2791 | Added on Wednesday, 17 January 2024 22:35:21

To put a button on it—the git diff command’s output is one file at a time, divvied up into separate areas of changes, each called a hunk. Next, let’s zoom in.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 183 | location 2799-2802 | Added on Wednesday, 17 January 2024 22:38:53

Next up on the agenda are two lines that you can think of as a legend—the git diff command output is telling us that if we see a line prefixed with a “-”, that line belongs to the “a” (old) version of the resume.md file. And any line prefixed with a “+” is from the “b” (new) version of the file. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 185 | location 2826-2828 | Added on Wednesday, 17 January 2024 22:45:52

It has a command called difftool that shows changes using external diff tools. It also allows you to configure which tool it should use to compare files. You can use git difftool --tool-help to see the flags available, and also to configure Git to use a particular tool to display diffs. However, in this book we are going to stick to the tools that Git gives you out of the box.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 185 | location 2835-2838 | Added on Wednesday, 17 January 2024 22:55:52

Making diffs easier on the eyes Most Git commands offer several flags. We’ve already seen a few that are available for the git log command. There is one flag you might want to consider that makes looking at diffs easier: 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 187 | location 2861-2865 | Added on Wednesday, 17 January 2024 23:01:44

Diffing staged changes The default behavior of the git diff command is to compare the contents of the files in the index with the contents of the working directory and show you the differences. Now, Brigitte has already added all the files in the working directory to the index. This is the state of the files in her repository: 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 187 | location 2861-2870 | Added on Wednesday, 17 January 2024 23:07:23

Diffing staged changes The default behavior of the git diff command is to compare the contents of the files in the index with the contents of the working directory and show you the differences. Now, Brigitte has already added all the files in the working directory to the index. This is the state of the files in her repository: Because the contents of the working directory and the index are identical since Brigitte added all the files to the index, the git diff command reports no difference. So how does she know what she is going to commit? Brigitte can still use the git diff command to compare the contents she had in her last commit with the index, except this time she will need to supply the “--cached” flag: When she runs this, the output she gets is shown below. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 187 | location 2861-2873 | Added on Wednesday, 17 January 2024 23:08:20

Diffing staged changes The default behavior of the git diff command is to compare the contents of the files in the index with the contents of the working directory and show you the differences. Now, Brigitte has already added all the files in the working directory to the index. This is the state of the files in her repository: Because the contents of the working directory and the index are identical since Brigitte added all the files to the index, the git diff command reports no difference. So how does she know what she is going to commit? Brigitte can still use the git diff command to compare the contents she had in her last commit with the index, except this time she will need to supply the “--cached” flag: When she runs this, the output she gets is shown below. Notice that the output isn’t so different from the first time she ran git diff (with no flag). The most significant difference between git diff and git diff --cached is that in the case of the former, we are comparing the index with the working directory; in the second, we are comparing the previously committed version with the index.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 190 | location 2910-2913 | Added on Wednesday, 17 January 2024 23:12:55

If Brigitte wants to merge the add-skills branch into the edit-per-scotty branch, then it makes sense to have the add-skills branch as a “source” and the edit-per-scotty branch as the “target.” To compare the two, specifying edit-per-scotty first makes it the target, and add-skills second makes it the source.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 191 | location 2915-2918 | Added on Wednesday, 17 January 2024 23:13:27

A branch is used to capture a single unit of work. Often, you’ll make several commits on the same branch before you are ready to merge your work into another branch. So what does it mean when Brigitte compares the add-skills branch to the edit-per-scotty branch? When you compare two branches, Git simply compares the latest commits on each branch—often referred to as the tips of the branches.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 192 | location 2936-2941 | Added on Wednesday, 17 January 2024 23:18:18

Q: I recall seeing the “a” and “b” file markers in our earlier experiments with the git diff command. Do those represent sets of changes as well? A: Yes! Whenever you run the git diff command, you always have two “sets” of changes that you are comparing. When you run git diff (with no arguments) you are comparing the index (marked as “a”) with the working directory (marked as “b”). Similarly, when you run git diff --cached, the object database is marked as “a” and the index marked as “b.” Feel free to revisit our earlier experiments with git diff and git diff --cached and see how the Venn diagram analogy works there as well.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 193 | location 2951-2958 | Added on Wednesday, 17 January 2024 23:21:18

Suppose you run this:   git diff add-skills  as compared to    git diff edit-per-scotty add-skills Since Git was only supplied one branch in the version on the left, it assumes you want to compare that branch with the working directory! That is, you are no longer comparing two branches. Instead, you are comparing the branch you supplied with the current state of your working directory. Furthermore, the order is now flipped!
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3826-3852 | Added on Thursday, 18 January 2024 09:14:33

Avro also uses a schema to specify the structure of the data being encoded. It has two schema languages: one (Avro IDL) intended for human editing, and one (based on JSON) that is more easily machine-readable. Our example schema, written in Avro IDL, might look like this: record Person {
    string               userName;
    union { null, long } favoriteNumber = null;
    array<string>        interests;
} The equivalent JSON representation of that schema is as follows: {
    "type": "record",
    "name": "Person",
    "fields": [
        {"name": "userName",       "type": "string"},
        {"name": "favoriteNumber", "type": ["null", "long"], "default": null},
        {"name": "interests",      "type": {"type": "array", "items": "string"}}
    ]
}
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3861-3865 | Added on Thursday, 18 January 2024 09:16:40

To parse the binary data, you go through the fields in the order that they appear in the schema and use the schema to tell you the datatype of each field. This means that the binary data can only be decoded correctly if the code reading the data is using the exact same schema as the code that wrote the data. Any mismatch in the schema between the reader and the writer would mean incorrectly decoded data. So, how does Avro support schema evolution?
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3874-3884 | Added on Thursday, 18 January 2024 09:18:24

The key idea with Avro is that the writer’s schema and the reader’s schema don’t have to be the same—they only need to be compatible. When data is decoded (read), the Avro library resolves the differences by looking at the writer’s schema and the reader’s schema side by side and translating the data from the writer’s schema into the reader’s schema. The Avro specification [20] defines exactly how this resolution works, and it is illustrated in Figure 4-6. For example, it’s no problem if the writer’s schema and the reader’s schema have their fields in a different order, because the schema resolution matches up the fields by field name. If the code reading the data encounters a field that appears in the writer’s schema but not in the reader’s schema, it is ignored. If the code reading the data expects some field, but the writer’s schema does not contain a field of that name, it is filled in with a default value declared in the reader’s schema. Figure 4-6. An Avro reader resolves differences between the writer’s schema and the reader’s schema.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3911-3913 | Added on Thursday, 18 January 2024 09:23:09

The answer depends on the context in which Avro is being used. To give a few examples: Large file with lots of records
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3916-3923 | Added on Thursday, 18 January 2024 09:23:50

Database with individually written records In a database, different records may be written at different points in time using different writer’s schemas—you cannot assume that all the records will have the same schema. The simplest solution is to include a version number at the beginning of every encoded record, and to keep a list of schema versions in your database. A reader can fetch a record, extract the version number, and then fetch the writer’s schema for that version number from the database. Using that writer’s schema, it can decode the rest of the record. (Espresso [23] works this way, for example.)
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3923-3928 | Added on Thursday, 18 January 2024 09:24:33

Sending records over a network connection When two processes are communicating over a bidirectional network connection, they can negotiate the schema version on connection setup and then use that schema for the lifetime of the connection. The Avro RPC protocol (see “Dataflow Through Services: REST and RPC”) works like this.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 3932-3937 | Added on Thursday, 18 January 2024 09:27:54

Dynamically generated schemas One advantage of Avro’s approach, compared to Protocol Buffers and Thrift, is that the schema doesn’t contain any tag numbers. But why is this important? What’s the problem with keeping a couple of numbers in the schema? The difference is that Avro is friendlier to dynamically generated schemas.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4013-4017 | Added on Thursday, 18 January 2024 09:33:07

In the rest of this chapter we will explore some of the most common ways how data flows between processes: Via databases (see “Dataflow Through Databases”) Via service calls (see “Dataflow Through Services: REST and RPC”) Via asynchronous message passing (see “Message-Passing Dataflow”
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4042 | Added on Thursday, 18 January 2024 09:37:50


==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4161-4164 | Added on Friday, 19 January 2024 09:17:57

A definition format such as OpenAPI, also known as Swagger [40], can be used to describe RESTful APIs and produce documentation.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4216-4218 | Added on Friday, 19 January 2024 09:23:12

for example, Thrift and Avro come with RPC support included, gRPC is an RPC implementation using Protocol Buffers, Finagle also uses Thrift, and Rest.li uses JSON over HTTP.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4316-4322 | Added on Friday, 19 January 2024 09:36:11

The actor model is a programming model for concurrency in a single process. Rather than dealing directly with threads (and the associated problems of race conditions, locking, and deadlock), logic is encapsulated in actors. Each actor typically represents one client or entity, it may have some local state (which is not shared with any other actor), and it communicates with other actors by sending and receiving asynchronous messages. Message delivery is not guaranteed: in certain error scenarios, messages will be lost. Since each actor processes only one message at a time, it doesn’t need to worry about threads, and each actor can be scheduled independently by the framework.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 210 | location 3216-3216 | Added on Friday, 19 January 2024 15:54:06

So how does Trinity recover from this?
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 211 | location 3222-3224 | Added on Friday, 19 January 2024 15:54:56

Git is our memory store. We already committed invitation-card.md. This means there is a copy of this file in the index and in the object database. We can ask Git to replace the copy in the working directory with the one in the index.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 211 | location 3229-3230 | Added on Friday, 19 January 2024 15:55:49

Yep. git restore is the opposite of git add. It takes the copy of a file in the index and moves it back into the working directory.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 211 | location 3235-3240 | Added on Friday, 19 January 2024 15:56:35

Trinity has to undo the changes she made to the working directory, by replacing her changes with the ones in the index. She can use the git restore command, supplying it the path to the file that is to be put back. If all goes well, Git will not report anything. The only way to find out is to resort to our good friend, git status. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 211 | location 3235-3244 | Added on Friday, 19 January 2024 15:56:55

Trinity has to undo the changes she made to the working directory, by replacing her changes with the ones in the index. She can use the git restore command, supplying it the path to the file that is to be put back. If all goes well, Git will not report anything. The only way to find out is to resort to our good friend, git status. The git restore command’s default behavior, as you can see, is the exact opposite of the git add command. The add command takes the version of a file that’s in the working directory and makes a copy of it in the index, overwriting the previous version. The restore command, on the other hand, takes the version of the file stored in the index, and overwrites the version in the working directory. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 214 | location 3281-3290 | Added on Friday, 19 January 2024 21:51:57

Undoing changes in the index When Trinity fixed her error, she had not yet added the invitation-card.md file to the index. But what if she had? How would she go about restoring her changes? When a file is added to the index, Git makes a copy of the file in the working directory and places it in the index. This is what the state of the working directory would look like for Trinity if she had added invitation-card.md to the index. The answer lies in the output of git status: Git tells us exactly what to do to fix this. We can use the same restore command, except this time we have to give it the --staged flag, followed by the filename, like so: 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 215 | location 3295-3301 | Added on Friday, 19 January 2024 21:56:47

The git restore with the --staged flag is the command you can use to restore files in the index to their previous state. But what does this command actually do? You know git restore (without any flags) replaces the contents of the working directory with the contents held by the index. When the git restore command is supplied with the --staged flag, Git takes the content of the file in the object database, specifically the contents as they were last recorded in a commit, and overwrites the contents of the file in the index with that content. This is what it looks like: 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 216 | location 3301-3305 | Added on Friday, 19 January 2024 21:57:48

Earlier we discussed that git restore is the opposite of git add—the latter copies the contents of a file from the working directory into the index, the former copies from the index into the working directory. You can think of git restore with the --staged flag as having the opposite effect on your files as the git commit command. The git commit command, as you know, takes the contents of the index and stores them in the object database. The git restore command takes the previously committed contents of a file and overwrites the index with them.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 216 | location 3306-3308 | Added on Friday, 19 January 2024 21:58:06

Note: git restore with the --staged flag is not undoing the commit! It’s simply copying the contents of the file as they were last committed into the index.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 219 | location 3358-3361 | Added on Friday, 19 January 2024 22:49:51

And this is the state of Trinity’s repository after she runs this command: Note that the object database is not affected. The question is—what is the status of the repository after we run the git rm command?
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 221 | location 3378-3381 | Added on Friday, 19 January 2024 22:52:37

Second, the git rm command only deletes files from the working directory and the index. Versions of the file that were previously committed remain as they were in the object database. This is because a commit represents the changes you made at the time of the commit. If a file existed at the time a commit was made, the commit will remember that for as long as the repository exists.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 221 | location 3386-3392 | Added on Friday, 19 January 2024 22:54:04

Remember that any changes you make, like adding, editing, or deleting files, only affect the working directory. In order to commit the deletion, you also need to remove the file from the index, because a commit only records changes in the index. If you choose to use the Finder (for Mac) or File Explorer (for Windows) to delete a file, you will then have to run the git add command with a special flag, -u or --update, to tell Git to record the name of the deleted file in the index: git add -u gift-registry.md The git rm command, as we have seen, updates the working directory and the index for us, saving us from having to run the git add command again. We feel it’s far more convenient to use the git rm command.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 222 | location 3396-3401 | Added on Friday, 19 January 2024 22:55:39

You mentioned that deleting a file does not remove it from the object database. Is there any way I can delete files from the object database? A: Recall that every commit records everything in the index, along with some metadata (like your name and email address) and the commit message. All this information is used to calculate the commit’s ID. Furthermore, this commit ID may be recorded as the parent of one or more child commits. In other words, removing one or more files from a commit involves recalculating that commit’s ID, as well as those of any child commits. Git does offer some advanced mechanisms to do this, but they fall well outside the scope of this book.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 224 | location 3428-3431 | Added on Saturday, 20 January 2024 00:07:39

As with removing files, you can always choose to rename files using the Finder or File Explorer, but you’ll still have to update the index to reflect the new filenames. However, like the git rm command, the git mv command not only updates the working directory for you, it also updates the index to reflect the change—so you’re just one step away from committing your changes.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 226 | location 3462-3468 | Added on Saturday, 20 January 2024 00:09:48

Be sure to have a clean working directory when amending commits. When amending commits, you should have a clean working directory. Specifically, you want no uncommitted changes in the index, or else the changes you’ve staged will be part of the amended commit! That is, you might accidentally add more changes to the commit than you intended to. Make it a practice to always check the git status prior to amending commits. But what if you have have already staged changes? The easiest thing to do here is to use the git restore command with the --staged flag for every file you have in the index, so that Git puts them back in the working directory. Only then should you amend the latest commit.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 227 | location 3469-3470 | Added on Saturday, 20 January 2024 00:10:05

No. Git only allows you to amend the latest commit on any branch, which we’ve referred to as the “tip” of the branch.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 228 | location 3487-3494 | Added on Saturday, 20 January 2024 00:11:35

When you ask Git to amend a commit, Git pulls a fast one. It essentially looks at the commit you are appending and copies all the changes you made in that commit back into the index. It leaves the original commit as is. It then runs git commit again, this time with the new commit message, which records the changes put in the index by the commit you are amending. You see, Git commits are immutable. That is, once you create a commit, that version of the commit is preserved. Any edits to the commit (like amending it) will create a new commit that replaces the old commit in your history. Think of it as like writing in pen versus pencil: with a pen, you can cross out your mistakes, but you can’t erase them. Immutable commits are one of Git’s biggest strengths, and a lot of the power in Git comes from this simple idea. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 228 | location 3487-3502 | Added on Saturday, 20 January 2024 00:12:42

When you ask Git to amend a commit, Git pulls a fast one. It essentially looks at the commit you are appending and copies all the changes you made in that commit back into the index. It leaves the original commit as is. It then runs git commit again, this time with the new commit message, which records the changes put in the index by the commit you are amending. You see, Git commits are immutable. That is, once you create a commit, that version of the commit is preserved. Any edits to the commit (like amending it) will create a new commit that replaces the old commit in your history. Think of it as like writing in pen versus pencil: with a pen, you can cross out your mistakes, but you can’t erase them. Immutable commits are one of Git’s biggest strengths, and a lot of the power in Git comes from this simple idea. This is why you should always check the status of your repository before you amend a commit. If by chance you’ve added files to the index and you proceed to amend a commit, all of the files in the index will show up in the new commit. That is, the new commit will record more changes (both the files you had in the index and the files Git added from the amended commit). As for the commit you amend? Git keeps it around for a while, but will eventually delete it from your repository. NOTE This is yet another instance of Git’s cautious nature. By keeping old commits around for a while, it gives you even more chances to recover. How you would go about doing that goes beyond the scope of the book. And don’t worry about those commits lying around—Git is very good at housekeeping.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 230 | location 3515-3530 | Added on Saturday, 20 January 2024 00:14:27

To rename a branch, you use the git branch command—except this time, you supply the -m (or --move) flag. Trinity wants to rename camping-trip to glamping-trip. There are two ways she can go about this. Switch to the branch you wish to fix, then rename: Rename a branch without switching: The second option works regardless of what branch you are currently on—the command works even if the branch you are attempting to rename is the current branch. This is why we always prefer using the second option. NOTE Most Git commands offer different ways of achieving the same thing. Having a consistent way of always doing something frees up your brain so you can think of more important things in life—like, is it a good idea to smear avocado on fruit? What does it mean to put fruit on fruit? NOTE Didn’t realize avocado is a fruit, did ya? See what we mean by more important things in life?
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 234 | location 3576-3582 | Added on Saturday, 20 January 2024 09:25:34

Turns out there is! Its name is HEAD. You’ve seen HEAD before. In fact, in Chapter 2 we even gave you a rhyme to help you remember what it means. Here it is again: MAKE IT STICK Violets are blue Roses are red The commit that you’re on Is referred to as HEAD.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 236 | location 3612-3613 | Added on Saturday, 20 January 2024 09:28:51

HEAD: Absolutely! The commit I am pointing to will always be the parent commit of the next commit in the repository. That’s HUGE!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 236 | location 3616-3630 | Added on Saturday, 20 January 2024 09:31:13

The role of HEAD Every time you switch branches, HEAD moves to reflect the branch you switched to. Consider a hypothetical commit history. Let’s say you are on the master branch, so HEAD points to the latest commit on that branch. When you switch branches, HEAD moves to the new branch: HEAD is simply a reference, like branches are. This difference is that a Git repository can have many branches, but there is only one HEAD. HEAD also serves as the launch point to decide how the commit history will change, in that the commit that HEAD points to will be the parent of the next commit—it’s how Git knows where to add the new commit in the commit history. Recall that every time you make a commit on a branch, Git rewrites the branch sticky note to point to the new commit on that branch. Well, there is one more thing that happens—Git moves HEAD to the new commit as well. In Chapter 2, we spoke of merging branches. We referred to the branch you are on as the proposer, and the branch that is being merged in as the proposee. Once you merge the two branches, the proposing branch moves to reflect the merge—in the case of a fast-forward merge, the proposing branch moves to the latest commit on the proposee branch. In the case of a merge that creates a merge commit, again, the proposing branch moves to the merge commit that is created. In both cases, HEAD moves as well.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 239 | location 3650-3652 | Added on Saturday, 20 January 2024 09:32:00

There is a scenario where HEAD points to a commit that isn’t the latest commit on a branch, but some arbitrary commit in your commit graph. This is called a “detached HEAD” state. We’ll revisit this in future chapters. Don’t touch that dial!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 239 | location 3653-3660 | Added on Saturday, 20 January 2024 09:33:38

Given that HEAD points to the commit you are on, you can reference other commits relative to HEAD. Git offers a special operator, the tilde (~), that allows you to do this. Consider this hypothetical commit history: A number n following the tilde operator represents the nth generational ancestor. For example, HEAD~1 references the first parent of the commit you are on. HEAD~2 means the parent of the parent of the commit you are, and so on and so forth. So how does this help you? Suppose you want to find the difference between the commit you are on and the previous commit, using the git diff command. Instead of having to look up commit IDs, here is how you would go about doing it: 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 239 | location 3662-3663 | Added on Saturday, 20 January 2024 09:33:50

HEAD~ is an alias for HEAD~1. We prefer to be explicit, but feel free to use one or the other.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 239 | location 3663-3674 | Added on Saturday, 20 January 2024 09:35:36

Traversing merge commits Merge commits, as we discussed in Chapter 2, are special. They have more than one parent. So how do you go about navigating from HEAD to the first parent? Or the second parent? Recall that the first parent is the latest commit on the proposing branch, and the second commit is the latest commit from the proposee branch. Git offers another operator that works with HEAD: the caret (^), which helps when you’re navigating from commits with multiple parents. Take a look to see how that works for this hypothetical commit graph: Like the tilde operator, the caret operator uses a number to figure out which parent of a merge commit you want to reference. Finally, you can combine the ~ operator and the ^ operator. Here is how HEAD^1~2 would traverse the commit history: SERIOUS CODING You can use the tilde and caret operators with commit IDs as well.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 241 | location 3681-3684 | Added on Saturday, 20 January 2024 09:36:18

What does HEAD~1 mean for a merge commit? A: That’s a great question. As you know, a merge commit has two parents. If you ask Git to look up HEAD~1 for a merge commit, which translates to the merge commit’s parent, Git will follow the path of the first parent. Essentially, HEAD~1 for a merge commit is the same as HEAD^1.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4610-4620 | Added on Saturday, 20 January 2024 09:41:18

There are two common ways data is distributed across multiple nodes: Replication Keeping a copy of the same data on several different nodes, potentially in different locations. Replication provides redundancy: if some nodes are unavailable, the data can still be served from the remaining nodes. Replication can also help improve performance. We discuss replication in Chapter 5. Partitioning Splitting a big database into smaller subsets called partitions so that different partitions can be assigned to different nodes (also known as sharding). We discuss partitioning in Chapter 6. These are separate mechanisms, but they often go hand in hand, as illustrated in Figure II-1. Figure II-1. A database split into two partitions, with two replicas per partition.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4685-4688 | Added on Saturday, 20 January 2024 09:47:07

Every write to the database needs to be processed by every replica; otherwise, the replicas would no longer contain the same data. The most common solution for this is called leader-based replication (also known as active/passive or master–slave replication) and is illustrated in Figure 5-1. It
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4685-4707 | Added on Saturday, 20 January 2024 09:47:38

Every write to the database needs to be processed by every replica; otherwise, the replicas would no longer contain the same data. The most common solution for this is called leader-based replication (also known as active/passive or master–slave replication) and is illustrated in Figure 5-1. It works as follows: One of the replicas is designated the leader (also known as master or primary). When clients want to write to the database, they must send their requests to the leader, which first writes the new data to its local storage. The other replicas are known as followers (read replicas, slaves, secondaries, or hot standbys).i Whenever the leader writes new data to its local storage, it also sends the data change to all of its followers as part of a replication log or change stream. Each follower takes the log from the leader and updates its local copy of the database accordingly, by applying all writes in the same order as they were processed on the leader. When a client wants to read from the database, it can query either the leader or any of the followers. However, writes are only accepted on the leader (the followers are read-only from the client’s point of view). Figure 5-1. Leader-based (master–slave) replication.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4737-4738 | Added on Saturday, 20 January 2024 09:51:46

Figure 5-2. Leader-based replication with one synchronous and one asynchronous follower.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4746-4751 | Added on Saturday, 20 January 2024 09:52:42

The advantage of synchronous replication is that the follower is guaranteed to have an up-to-date copy of the data that is consistent with the leader. If the leader suddenly fails, we can be sure that the data is still available on the follower. The disadvantage is that if the synchronous follower doesn’t respond (because it has crashed, or there is a network fault, or for any other reason), the write cannot be processed. The leader must block all writes and wait until the synchronous replica is available again.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4746-4756 | Added on Saturday, 20 January 2024 09:53:10

The advantage of synchronous replication is that the follower is guaranteed to have an up-to-date copy of the data that is consistent with the leader. If the leader suddenly fails, we can be sure that the data is still available on the follower. The disadvantage is that if the synchronous follower doesn’t respond (because it has crashed, or there is a network fault, or for any other reason), the write cannot be processed. The leader must block all writes and wait until the synchronous replica is available again. For that reason, it is impractical for all followers to be synchronous: any one node outage would cause the whole system to grind to a halt. In practice, if you enable synchronous replication on a database, it usually means that one of the followers is synchronous, and the others are asynchronous. If the synchronous follower becomes unavailable or slow, one of the asynchronous followers is made synchronous. This guarantees that you have an up-to-date copy of the data on at least two nodes: the leader and one synchronous follower. This configuration is sometimes also called semi-synchronous [7].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4782-4808 | Added on Saturday, 20 January 2024 09:56:25

Setting Up New Followers From time to time, you need to set up new followers—perhaps to increase the number of replicas, or to replace failed nodes. How do you ensure that the new follower has an accurate copy of the leader’s data? Simply copying data files from one node to another is typically not sufficient: clients are constantly writing to the database, and the data is always in flux, so a standard file copy would see different parts of the database at different points in time. The result might not make any sense. You could make the files on disk consistent by locking the database (making it unavailable for writes), but that would go against our goal of high availability. Fortunately, setting up a follower can usually be done without downtime. Conceptually, the process looks like this: Take a consistent snapshot of the leader’s database at some point in time—if possible, without taking a lock on the entire database. Most databases have this feature, as it is also required for backups. In some cases, third-party tools are needed, such as innobackupex for MySQL [12]. Copy the snapshot to the new follower node. The follower connects to the leader and requests all the data changes that have happened since the snapshot was taken. This requires that the snapshot is associated with an exact position in the leader’s replication log. That position has various names: for example, PostgreSQL calls it the log sequence number, and MySQL calls it the binlog coordinates. When the follower has processed the backlog of data changes since the snapshot, we say it has caught up. It can now continue to process data changes from the leader as they happen.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4817-4823 | Added on Saturday, 20 January 2024 09:57:41

Follower failure: Catch-up recovery On its local disk, each follower keeps a log of the data changes it has received from the leader. If a follower crashes and is restarted, or if the network between the leader and the follower is temporarily interrupted, the follower can recover quite easily: from its log, it knows the last transaction that was processed before the fault occurred. Thus, the follower can connect to the leader and request all the data changes that occurred during the time when the follower was disconnected. When it has applied these changes, it has caught up to the leader and can continue receiving a stream of data changes as before.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4823-4842 | Added on Saturday, 20 January 2024 09:59:22

Leader failure: Failover Handling a failure of the leader is trickier: one of the followers needs to be promoted to be the new leader, clients need to be reconfigured to send their writes to the new leader, and the other followers need to start consuming data changes from the new leader. This process is called failover. Failover can happen manually (an administrator is notified that the leader has failed and takes the necessary steps to make a new leader) or automatically. An automatic failover process usually consists of the following steps: Determining that the leader has failed. There are many things that could potentially go wrong: crashes, power outages, network issues, and more. There is no foolproof way of detecting what has gone wrong, so most systems simply use a timeout: nodes frequently bounce messages back and forth between each other, and if a node doesn’t respond for some period of time—say, 30 seconds—it is assumed to be dead. (If the leader is deliberately taken down for planned maintenance, this doesn’t apply.) Choosing a new leader. This could be done through an election process (where the leader is chosen by a majority of the remaining replicas), or a new leader could be appointed by a previously elected controller node. The best candidate for leadership is usually the replica with the most up-to-date data changes from the old leader (to minimize any data loss). Getting all the nodes to agree on a new leader is a consensus problem, discussed in detail in Chapter 9. Reconfiguring the system to use the new leader. Clients now need to send their write requests to the new leader (we discuss this in “Request Routing”). If the old leader comes back, it might still believe that it is the leader, not realizing that the other replicas have forced it to step down. The system needs to ensure that the old leader becomes a follower and recognizes the new leader.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 243 | location 3713-3719 | Added on Saturday, 20 January 2024 10:07:01

In other words, you want to move HEAD to HEAD~1. The command that allows you to do this is the git reset. You can supply git reset with a reference to a commit, either a commit ID or using one of the operators we spoke of, namely tilde (~) or caret (^). The git reset command has two immediate effects—it moves the HEAD and the branch to the commit you specify. But every commit that you make in a repository records a set of changes—you might have added or removed files, or edited existing files, or both. So what happens to those changes? Well, that’s the million-dollar question, isn’t it?
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 243 | location 3725-3726 | Added on Saturday, 20 January 2024 10:46:30

Let’s say your repository had two commits—a commit with ID B, and its parent A. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 243 | location 3725-3731 | Added on Saturday, 20 January 2024 10:48:33

Let’s say your repository had two commits—a commit with ID B, and its parent A. git reset --soft The git reset command can be given the --soft flag. This flag takes the edits you committed and moves them back into the index, and then from the index it copies those changes into the working directory. In other words, the edits you had committed (in commit B) are gone from the object database. It’s like you never made the commit to begin with! But because they are in the index, you’re just one git commit command away from committing them back. Those changes are still available to you—in the index and the working directory. HEAD now points to commit A.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 243 | location 3725-3732 | Added on Saturday, 20 January 2024 10:48:39

Let’s say your repository had two commits—a commit with ID B, and its parent A. git reset --soft The git reset command can be given the --soft flag. This flag takes the edits you committed and moves them back into the index, and then from the index it copies those changes into the working directory. In other words, the edits you had committed (in commit B) are gone from the object database. It’s like you never made the commit to begin with! But because they are in the index, you’re just one git commit command away from committing them back. Those changes are still available to you—in the index and the working directory. HEAD now points to commit A. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 244 | location 3739-3752 | Added on Saturday, 20 January 2024 10:51:47

Using git reset (or git reset --mixed) The git reset command’s default mode is --mixed, so you can invoke git reset or git reset --mixed with the same results. This is how to use it: git reset A     OR     git reset --mixed A The --mixed mode does a bit more work than the --soft mode does. It has two steps: First, it moves the changes in commit B (the commit you are undoing) into the index, and then copies those changes from the index into the working directory, just like --soft mode does. It then copies the contents of commit A into the index. That is, the index now looks exactly like the commit you just reset to. Contrasting the soft and mixed behavior: --soft mode leaves both the index and the working directory changed. But --mixed mode only leaves the working directory changed. With mixed mode, the changes you committed in “B” reside only in the working directory—the index looks like the changes in commit “A.”.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 246 | location 3758-3768 | Added on Saturday, 20 January 2024 10:53:49

git reset --hard Finally, the third flag that reset offers is --hard. Remember, the intent is to undo the changes in a commit. --soft mode moves the changes in the commit you are undoing and puts them in both the index and the working directory. --mixed mode on the other hand puts the changes in the commit you are undoing (“B”) into the working directory, but the index and the object database look like the commit you reset to (“A”). Effectively, --mixed mode takes the changes you had in the commit that you just undid, and makes them appear in the working directory. Finally, the --hard mode takes what the --mixed mode does to its logical end. In mixed mode, the second step copies the contents commited in “A” into the index, and stops there. --hard mode does not. It takes the contents of the index (which have the changes as they are in commit A) and overwrites the working directory. This means that the object database, the index, and the working directory all look the same. It’s as if commit B never happened! After a hard reset, the working directory, the index, and HEAD all look like commit “A.” 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 247 | location 3774-3778 | Added on Saturday, 20 January 2024 10:55:03

You mentioned that the reset command can take a commit reference. So can I reset to any commit, instead of just the parent commit? A: Yes, you can. For example, if you invoke git reset HEAD~3, you are asking that Git take you back three commits. Git will then collect the changes you made in all three commits (that you are undoing), and depending on the mode you specify (--soft, --mixed, or --reset), Git will place those changes in the index, working directory, or throw them away. But baby steps, right? Let’s take it one step at a time.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 247 | location 3779-3788 | Added on Saturday, 20 January 2024 10:57:02

Q: How is using git reset --mixed different than git restore with the --staged flag? They both copy the content of the object database into the index, right? A: First, the git restore command works at the file level, that is, it only works with one file at a time. The git reset command works at the commit level, effectively undoing all the changes committed. This might be more than one file that you potentially added, edited, or modified in the commit you are undoing. Second, the git restore command with the --staged flag takes the contents of the file you specify as they were last committed, and copies that into the index, effectively making the file in the index look exactly like it did since you last committed. It does not, however, move the HEAD—the git restore command does not modify your commit history. In contrast, while git reset --mixed does copy all of the files as they were last committed and move them into the index, it also moves the HEAD to the commit you specify. When you use the git reset command, you’re rewriting history by erasing history!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 248 | location 3789-3792 | Added on Saturday, 20 January 2024 10:57:20

Q: Can I reset a merge commit? A: Yes, you can. But remember, a merge commit has two parents. And the git reset command needs to know which commit to reset HEAD and the corresponding branch to. So, if you are going to reset a merge commit to one of its parents, you will need to supply which parent you wish to reset to using the caret (^) operator.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 250 | location 3825-3836 | Added on Saturday, 20 January 2024 11:00:03

Trinity has two options. The first approach is using the git reset command. However, Git offers us another approach, but before we get to that, let’s take a minute to talk about what a commit is. A commit records a set of changes—you might have edited a bunch of files, maybe added or deleted a few. You’ll see these changes if you use the git diff command to compare a commit with, say, its parent. They appear as a set of pluses (“+”) and minuses (“-”). This is referred to as the “delta,” or the variation between two commits. Another approach to undoing a commit is as simple as negating a commit—for every file added, you could delete it, and vice versa. For every line in every file that was added, you delete it, and for every line that was deleted, bring it back. Given that Git can calculate the differences introduced by a commit, it can also calculate the reverse of the differences, or if you like, the “anti-commit.” And you can use this to “undo” a commit. NOTE If it helps, think of matter and anti-matter coming in contact with each other. End result: complete annihilation!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 251 | location 3836-3847 | Added on Saturday, 20 January 2024 11:01:31

Reverting commits You can create “anti-commits” by using the git revert command. The revert command, like the reset command, can be given a commit ID or a reference to a commit. There is a big difference, though—the git revert command is to be given the ID or reference of the commit you want to undo. Consider our hypothetical repository again—let’s say you want to undo commit B. This is how you would use the git revert command: Git looks at the changes introduced in B and calculates the anti-commit. This is an actual commit that Git will prepare. Now just like any other commit, this commit needs a commit message. So Git will use your preconfigured editor and bring it up, prompting you to supply a message for the newly created commit: NOTE We have seen this before, in Chapter 2: when we merge two branches, that results in an merge commit. Recall that Git brings up your editor and prompts you for a commit message.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 251 | location 3836-3853 | Added on Saturday, 20 January 2024 11:02:05

Reverting commits You can create “anti-commits” by using the git revert command. The revert command, like the reset command, can be given a commit ID or a reference to a commit. There is a big difference, though—the git revert command is to be given the ID or reference of the commit you want to undo. Consider our hypothetical repository again—let’s say you want to undo commit B. This is how you would use the git revert command: Git looks at the changes introduced in B and calculates the anti-commit. This is an actual commit that Git will prepare. Now just like any other commit, this commit needs a commit message. So Git will use your preconfigured editor and bring it up, prompting you to supply a message for the newly created commit: NOTE We have seen this before, in Chapter 2: when we merge two branches, that results in an merge commit. Recall that Git brings up your editor and prompts you for a commit message. We usually prefer to keep the message as is. Once you close the editor, Git will confirm creating a new commit. So what is the effect of a revert? This is what your commit history will look like after a revert: Like the git reset command, the git revert command moves the HEAD and the branch, except in this case, you are not erasing commits. Rather, you are adding new commits. However, both commands allow you to “undo” commits.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 257 | location 3932-3934 | Added on Saturday, 20 January 2024 11:05:42

You are still required to make a commit to record the fact that you deleted one or more files. That is, removing files is a two-step process—git rm removes the files from the working directory and the index, and the subsequent commit records the deletion.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 257 | location 3936-3939 | Added on Saturday, 20 January 2024 11:06:42

You should only amend the tips of branches. When you amend a commit, you are not actually changing a commit. Git records a new commit with the new commit message and replaces the previous commit in your commit history. Git will eventually delete the older commit.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 280 | location 4286-4290 | Added on Saturday, 20 January 2024 11:18:11

So what just happened? The repository we created is under our account, which means that while you can see it, you can’t modify it. Forking is a GitHub feature that makes it easy to copy our repository (or any other publicly available repository) to your account. NOTE Not to beat a dead horse, but there is no such feature as “forking” in Git itself. Forking is a feature GitHub offers to make it easier to collaborate.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 281 | location 4305-4311 | Added on Saturday, 20 January 2024 14:49:13

Can I clone a repository without forking? If so, what does that mean? A: Absolutely. You could visit github.com right now, peruse any one of the millions of repositories available, and clone any one of them. However, if you wanted to collaborate on that project, you’d have to ask the owner of that repository for permissions. Throughout this chapter you are going to be making changes to the working-with-remotes repository. By forking it, you get a copy of our repository under your account in GitHub, and you can do with that whatever you like without us granting any additional permissions. Certainly makes things easier all around.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 285 | location 4360-4365 | Added on Saturday, 20 January 2024 14:53:30

Q: You made us fork the repository first, then clone it. Is this a usual workflow? A: That depends. For a project at work, you will most likely be made a collaborator on that project, which automatically gives you permissions to modify the repository. This means you wouldn’t have to fork the repository—you could simply clone it and start collaborating with your colleagues. However, if you want to play around with or contribute to an open source project, you’ll most likely need to fork the project. This makes it easier for the people managing the open source project, because they don’t have to explicitly add you as a collaborator.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 286 | location 4384-4402 | Added on Saturday, 20 January 2024 14:56:17

What happens when you clone? If you wish to clone a repository, your starting point is always another repository, which is referred to as the remote. And much like any repository you’ve worked with so far, the repository you clone consists of commits, branches, HEAD, commit history, and anything else a repository can have in it. When you clone such a repository, Git does a few things: Git first creates a folder in the directory where you ran the git clone command; the folder will have the same name as the repository you are cloning (unless you specify a different name). Inside that, it creates a .git folder. It then copies the entire commit graph, including all commits, branches, and a few other things, from the repository you are cloning into the .git folder it just created. Finally, it uses the git switch branch to check out the same branch that was checked out in the original (the one you are cloning from). NOTE This would be the same commit as HEAD points to. NOTE You know from Chapter 2 that when Git switches branches, it rewrites the working directory to look exactly like it did when you made the last commit on that branch. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 314 | location 4814-4817 | Added on Saturday, 20 January 2024 21:20:23

The terms upstream and downstream, while commonly used, are a bit confusing when you’re working with a distributed system like Git. When we clone a repository and it gets data and puts it onto our local machine, the local is downstream. When we push, or send data from the local to the remote, the remote is upstream from us. And yes, in our case, setting upstream is the same as setting the remote.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 323 | location 4942-4945 | Added on Saturday, 20 January 2024 21:28:50

GitHub’s default behavior is to always create a merge commit. GitHub uses a special flag when merging that forces Git to create a merge commit. GitHub does offer other ways to merge branches that don’t create a merge commit, but that’s a conversation for another time. For now, just remember that using the defaults in GitHub will create a merge commit.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4906-4910 | Added on Sunday, 21 January 2024 09:29:36

Statement-based replication was used in MySQL before version 5.1. It is still sometimes used today, as it is quite compact, but by default MySQL now switches to row-based replication (discussed shortly) if there is any nondeterminism in a statement. VoltDB uses statement-based replication, and makes it safe by requiring transactions to be deterministic [15].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4929-4933 | Added on Sunday, 21 January 2024 09:31:49

That may seem like a minor implementation detail, but it can have a big operational impact. If the replication protocol allows the follower to use a newer software version than the leader, you can perform a zero-downtime upgrade of the database software by first upgrading the followers and then performing a failover to make one of the upgraded nodes the new leader. If the replication protocol does not allow this version mismatch, as is often the case with WAL shipping, such upgrades require downtime.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4946-4951 | Added on Sunday, 21 January 2024 09:33:11

A transaction that modifies several rows generates several such log records, followed by a record indicating that the transaction was committed. MySQL’s binlog (when configured to use row-based replication) uses this approach [17]. Since a logical log is decoupled from the storage engine internals, it can more easily be kept backward compatible, allowing the leader and the follower to run different versions of the database software, or even different storage engines.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 4946-4956 | Added on Sunday, 21 January 2024 09:33:26

A transaction that modifies several rows generates several such log records, followed by a record indicating that the transaction was committed. MySQL’s binlog (when configured to use row-based replication) uses this approach [17]. Since a logical log is decoupled from the storage engine internals, it can more easily be kept backward compatible, allowing the leader and the follower to run different versions of the database software, or even different storage engines. A logical log format is also easier for external applications to parse. This aspect is useful if you want to send the contents of a database to an external system, such as a data warehouse for offline analysis, or for building custom indexes and caches [18]. This technique is called change data capture, and we will return to it in Chapter 11.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5016-5032 | Added on Sunday, 21 January 2024 09:38:24

Reading Your Own Writes Many applications let the user submit some data and then view what they have submitted. This might be a record in a customer database, or a comment on a discussion thread, or something else of that sort. When new data is submitted, it must be sent to the leader, but when the user views the data, it can be read from a follower. This is especially appropriate if data is frequently viewed but only occasionally written. With asynchronous replication, there is a problem, illustrated in Figure 5-3: if the user views the data shortly after making a write, the new data may not yet have reached the replica. To the user, it looks as though the data they submitted was lost, so they will be understandably unhappy. Figure 5-3. A user makes a write, followed by a read from a stale replica. To prevent this anomaly, we need read-after-write consistency. In this situation, we need read-after-write consistency, also known as read-your-writes consistency [24]. This is a guarantee that if the user reloads the page, they will always see any updates they submitted themselves. It makes no promises about other users: other users’ updates may not be visible until some later time. However, it reassures the user that their own input has been saved correctly.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5077-5084 | Added on Sunday, 21 January 2024 09:43:21

Monotonic reads [23] is a guarantee that this kind of anomaly does not happen. It’s a lesser guarantee than strong consistency, but a stronger guarantee than eventual consistency. When you read data, you may see an old value; monotonic reads only means that if one user makes several reads in sequence, they will not see time go backward—i.e., they will not read older data after having previously read newer data. One way of achieving monotonic reads is to make sure that each user always makes their reads from the same replica (different users can read from different replicas). For example, the replica can be chosen based on a hash of the user ID, rather than randomly. However, if that replica fails, the user’s queries will need to be rerouted to another replica.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5142-5158 | Added on Sunday, 21 January 2024 09:48:24

Use Cases for Multi-Leader Replication It rarely makes sense to use a multi-leader setup within a single datacenter, because the benefits rarely outweigh the added complexity. However, there are some situations in which this configuration is reasonable. Multi-datacenter operation Imagine you have a database with replicas in several different datacenters (perhaps so that you can tolerate failure of an entire datacenter, or perhaps in order to be closer to your users). With a normal leader-based replication setup, the leader has to be in one of the datacenters, and all writes must go through that datacenter. In a multi-leader configuration, you can have a leader in each datacenter. Figure 5-6 shows what this architecture might look like. Within each datacenter, regular leader–follower replication is used; between datacenters, each datacenter’s leader replicates its changes to the leaders in other datacenters. Figure 5-6. Multi-leader replication across multiple datacenters.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 358 | location 5476-5483 | Added on Sunday, 21 January 2024 15:14:17

These branches that Git creates when you clone (prefixed with the name of the remote) are called remote tracking branches. Git hints at their presence in the output of many commands—you’ve probably seen references to remote tracking branches when you check the status of your repository. For example: Remote tracking branches are different from the branches that you’ve worked with so far—you can’t switch to them, you can’t create or delete them. In fact, you have no control over these branches. They are meant to be managed by Git. On the prevous page, we listed several of the roles these remote tracking branches play. Now let’s dive into the details. NOTE This is an important point!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 360 | location 5517-5519 | Added on Sunday, 21 January 2024 15:18:22

As you can see, as soon as you push, your local branch, its counterpart in the remote, and the newly created remote tracking branch (origin/feat-a, in this case) all point to the same commit ID. Recall that once you set the upstream for a branch, you never have to do it again—and now you know the reason. Git records where to push a branch with the help of the remote tracking branch.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 367 | location 5621-5632 | Added on Sunday, 21 January 2024 15:24:27

 clone   Displays details about the remote   remote   Shows a list of all your branches.   branch   Lists all branches along with their remote tracking branches (if any)   push   Is another way to initialize a Git repository   branch -vv   Updates the remote branch with any new commits you made locally 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 369 | location 5647-5652 | Added on Sunday, 21 January 2024 21:41:30

You already know how to push a local branch to the remote. But how does another collaborator get that branch? The answer lies in another Git command, called fetch. The role of the git fetch command is to download all new commits and branches from the remote. But it does so with a twist! The git fetch command updates your clone without affecting any of your local branches. How, you ask? It updates the remote tracking branches. Consider a hypothetical repository where you only have one branch, called master. You just invoked the git pull command, so your clone is caught up with the remote. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 369 | location 5654-5655 | Added on Sunday, 21 January 2024 21:41:56

pull—fetch only updates the remote tracking branches, whereas pull, as you know, updates both the remote tracking branch and your local branch.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 378 | location 5787 | Added on Sunday, 21 January 2024 21:50:42


==========
Head First Git (Raju Gandhi)
- Your Highlight on page 381 | location 5831-5849 | Added on Sunday, 21 January 2024 21:56:39

Reason 4 for remote tracking branches: getting ready to push Remote tracking branches can tell you where your branch is in relation to the remote tracking branch. However, remember, remote tracking branches don’t update themselves. They wait for you to run the git fetch command. What does that mean? Let’s go back to a hypothetical repository where you have a master branch in the remote and in your clone, and you are merrily working away. There is a chance that, in the meantime, your fellow collaborator pushed a new commit on the master branch to the remote! Let’s take a look. Your clone is unaware of the new commit, since you haven’t fetched yet! This presents a conundrum. Precisely! As you can see, your master branch and its counterpart in the remote have diverged. Commit B’s child in the remote is commit D, while in your clone, commit B’s child is C. It’s not uncommon to see the remote counterpart of a branch diverge away from your local branch—especially when two or more collaborators are working together on the same branch and pushing to the remote. Suppose your local branch (say it’s master) has indeed diverged from its counterpart in the remote. What happens when you push? NOTE We’ll show you some best practices in a few. Git rejected your attempt to push. The reason is simple: Git sees new commits on the master branch in the remote and the master branch in your clone and cannot reconcile them automatically. So what do you do now? Well, this is where remote tracking branches really shine. The name—remote tracking branches—has two distinct parts: So how does any of this help with our current conundrum? Look to the next page.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 382 | location 5849-5879 | Added on Sunday, 21 January 2024 21:59:53

Reason 4 (still going) So far, you’ve discovered that remote tracking branches inform you that you might want to push commits (Reason 3), but they don’t seem to be of much help in letting you push—particularly if your local branch has diverged from its remote counterpart. Or are they? What happens if you invoke the git fetch command in that scenario? Let’s take a look: Remember, the git fetch command updates all remote tracking branches to look like their remote counterparts. In this scenario, the remote tracking branch origin/master now points to commit D (since that’s what the remote master branch is pointing to). If you want to push your changes (and you know Git won’t let you), you’ll need to help Git reconcile the difference between origin/master (which is what the remote master branch has, since you just fetched) and your local master branch. Let’s see how to do that next! BRAIN POWER Take a long, hard look at the commit history for the clone shown above. If you were to merge origin/master into the master branch, would that be a fast-forward merge, or would it create a merge commit? Hint: Have the two branches diverged? Reason 4 (Yep! Almost there!) You now know that remote tracking branches are, in fact, branches. Which means you can merge origin/master into your local master branch. Here’s what that would look like: Merging origin/master into your local master is just the same as any other merge. Recall from Chapter 2 that if the two branches have diverged, then Git will attempt to create a child commit and present you with your configured editor to type in a commit message. If the branches haven’t diverged, then it’ll be a fast-forward merge. After merging origin/master into your local master, your local master branch has both—the changes introduced in the remote master and your changes—which means you’ve reconciled the differences between the two branches. You can now attempt to push! NOTE You can’t merge into the remote tracking branch because you can’t switch to it. WATCH IT! You can get merge conflicts! When you merge changes that appear on the remote tracking branches into your local branches, there is a possibility that you will get one or more merge conflicts. Just remember—merging remote tracking branches into local branches is no different than any other merge.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 385 | location 5897-5901 | Added on Sunday, 21 January 2024 22:05:13

You aren’t wrong! That’s exactly right, in fact. Fetching gets you anything new in the remote, and merging the remote tracking branch into the local branch means your local is now “caught up” with its remote tracking branch. Which is exactly what git pull’s job is. And that is the secret we are going to share with you on the next page. But if you are looking for the teaser trailer, here it is—git pull is the same as doing a git fetch followed by a git merge!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 386 | location 5917-5922 | Added on Sunday, 21 January 2024 22:06:18

Use git fetch + git merge. Avoid git pull. We don’t like surprises (we don’t even do well even at our own birthday parties). Our take on this: git pull, though convenient, is too magical. Personally, we prefer to use git fetch followed by git merge to “catch up with the remote.” And we have good reasons for this! NOTE If you are wondering why we brought up git pull, well, you’ll see it being referenced in many a tutorial and blog post. We just want you to know what it does.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 391 | location 5984-5997 | Added on Sunday, 21 January 2024 22:10:47

In Scenario 1, you’ve added one or more commits to the master branch. But when you fetched, the remote had no new commits, so origin/master did not move. In Scenario 2, you’ve made no changes to your local master branch. However, when you fetched, you got some new commits on your remote tracking branch. In both cases, you can see that the remote tracking branch and its local counterpart have not diverged. Which means when you merge the remote tracking branch into the local branch, you will get a fast-forward merge. This is exactly what happened when we showed you the git pull command at the beginning of the chapter. Here is the console output from early on in this chapter: This is because git pull performs a merge under the covers. Even if you had fetched and merged origin/master into master, you would have gotten the same result. And a fast-forward merge is exactly what you want! So how do you get there? How can you make it so that when you do catch up with the remote, it’s always a fast-forward merge? NOTE We mentioned this in Chapter 2 as well—when merging, fast-forward is the best-case scenario.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 392 | location 5997-6018 | Added on Sunday, 21 January 2024 22:12:33

A typical workflow: getting started Here’s a summary of what you’ve learned so far. Things get complicated when your local branch diverges from its counterpart in the remote. Why? Because when you do attempt to catch up, it will result in a merge, and potentially merge conflicts. So can you avoid the merge? What if you try to make it so that the remote only sees commits that you push to it? In other words, no one else should be pushing to that branch. And how do you do that? Well, ideally, every contributor should work on their own feature branches. This way, no one execpt you pushes to your remote branch. Problem solved! NOTE If you were thinking this is Scenario 1 from the previous page, you are absolutely correct. Only your local branch introduces new commits. Let’s see what this looks like. You are assigned a new task, so you start by making sure that the integration branch (say, master) in your clone is “caught up” with the remote. NOTE This is important! You always want to try and create new feature branches from the latest commits on integration branches. NOTE Remember, catching up involves fetching, then merging origin/master into master. You then follow the same workflow we described in Chapter 2. Create a new branch based on the integration branch, make your commits, and when you think you are in a good place, push. The important takeaway here is that this feature branch is yours and yours alone. No one else is pushing to this branch, which means you’ll never see a merge (and potentially a corresponding merge conflict) between your local branch and the remote tracking branch. NOTE It’s a good habit to keep pushing your work to the remote, even if you aren’t done yet. This way there is a copy of your work on the remote in case something happens to your workstation. And now you are ready to merge.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 394 | location 6030-6048 | Added on Sunday, 21 January 2024 22:15:13

A typical workflow: getting ready to merge The majority of your workflow will consist of working on your local feature branch (and occasionally pushing). But eventually, you’ll want to get your code into an integration branch (for the sake of this example, we’ll call it master). So what does that look like? You’ve seen that you need to be sure that when you create a feature branch, you are always basing it on the latest commits on the master branch at that time. However, the role of the integration branch is to incorporate everyone’s work! Which means that while you were busy chugging away, your collaborators might have merged their work into master. Before you merge, it’s a good idea to know if your work will play well with theirs. How do you do that? Just before you merge your work, merge the work on master into your feature branch. Effectively, your feature branch is now caught up with the integration branch. There are two ways to go about doing this: Do a git fetch and merge origin/master into master. Then merge master into your feature branch. Do a git fetch, then merge origin/master into your feature branch. NOTE We alluded to this in the last “No dumb questions” segment. NOTE In case you are wondering, this is the first time in this book that we’ve merged the integration branch into a feature branch. Always a first time for everything, huh?
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 394 | location 6030-6056 | Added on Sunday, 21 January 2024 22:16:18

A typical workflow: getting ready to merge The majority of your workflow will consist of working on your local feature branch (and occasionally pushing). But eventually, you’ll want to get your code into an integration branch (for the sake of this example, we’ll call it master). So what does that look like? You’ve seen that you need to be sure that when you create a feature branch, you are always basing it on the latest commits on the master branch at that time. However, the role of the integration branch is to incorporate everyone’s work! Which means that while you were busy chugging away, your collaborators might have merged their work into master. Before you merge, it’s a good idea to know if your work will play well with theirs. How do you do that? Just before you merge your work, merge the work on master into your feature branch. Effectively, your feature branch is now caught up with the integration branch. There are two ways to go about doing this: Do a git fetch and merge origin/master into master. Then merge master into your feature branch. Do a git fetch, then merge origin/master into your feature branch. NOTE We alluded to this in the last “No dumb questions” segment. NOTE In case you are wondering, this is the first time in this book that we’ve merged the integration branch into a feature branch. Always a first time for everything, huh? Whichever option you pick, the end result will be the same. Your feature branch now contains all your new work and the work your contributors put into the integration branch. You can now do some spot checks or run tests to make sure it all works well together. Now you are ready to merge! WATCH IT! Obligatory merge conflict warning NOTE Our lawyers made us put this here. This workflow involves a merge, which can always lead to a merge conflict. Be advised!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 395 | location 6056-6068 | Added on Sunday, 21 January 2024 22:17:27

A typical workflow: merge locally, or issue pull requests? You know that you have two options to merge your work into the integration branch: you either merge locally into the integration branch, or push your branch upstream and issue a pull request. We spoke of the differences between the two at the end of Chapter 5: merging locally means that you are adding commits to the integration branch locally (which you’ll have to push upstream after the merge). The second option means that you will merge using your Git repository manager (like GitHub)—that is, the merge happens in the remote. We prefer using pull requests to merge our code into the integration branch for one simple reason: we want to avoid adding commits to integration branches in our clone. Remember, it’s not just you working on a shared repository. Your colleagues are working on it as well. Suppose you do merge into the integration branch locally—another contributor could be doing the same thing at the same time in their clone. If they beat you to the punch and push the integration branch to the remote, what happens when you attempt to push? Git will reject your push, because the remote branch has now diverged from your local copy. This is exactly the problem we’ve been trying to avoid! With pull requests, you are merging in the remote, of which there is only one. This means you are not updating the integration branch locally anymore.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 396 | location 6072-6081 | Added on Sunday, 21 January 2024 22:18:30

Q: Wait. We merge the integration branch into my feature branch, and then merge the feature branch back into the integration branch? Seems like a lot of merging is going on. Why not just merge my feature branch into the integration branch directly? A: The objective here is to get your work into the integration branch. However, it’s a good idea to check that everything will be well after the merge. When you merge the integration branch into your feature branch, you are essentially “catching up” with the integration branch. You can resolve any conflicts and check to make sure all is well. If something does not seem right, you can still create additional commits in your feature branch to fix those issues. The second merge, which involves merging your feature branch into the integration branch, gets you where you want to be—your work is now integrated. A typical workflow visualized 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 399 | location 6108-6115 | Added on Sunday, 21 January 2024 22:21:09

Recall that when you push a branch for the first time, you have to set the upstream (using either the --set-upstream or -u flags). When you do, Git creates the branch in the remote, then creates the remote tracking branch in your clone. Similarly, when you push a deletion, Git will first delete the branch in the remote, and then clean up the remote tracking branch in your clone. Doesn’t seem that counterintuitive anymore, does it? If you follow our recommended approach of using pull requests, delete the branch using the “Delete branch” button in GitHub after your pull request is merged in. This takes care of the branch in the remote. But it still leaves the remote tracking branch and the local branch. Solution? Next page.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 399 | location 6108-6122 | Added on Sunday, 21 January 2024 22:21:30

Recall that when you push a branch for the first time, you have to set the upstream (using either the --set-upstream or -u flags). When you do, Git creates the branch in the remote, then creates the remote tracking branch in your clone. Similarly, when you push a deletion, Git will first delete the branch in the remote, and then clean up the remote tracking branch in your clone. Doesn’t seem that counterintuitive anymore, does it? If you follow our recommended approach of using pull requests, delete the branch using the “Delete branch” button in GitHub after your pull request is merged in. This takes care of the branch in the remote. But it still leaves the remote tracking branch and the local branch. Solution? Next page. WATCH IT! Git errors out when you push a deletion If Git reports an error like error: failed to push some refs, that means that a branch with that name does not exist in the remote. Check the name of the origin and the branch you supplied to git push -d. You can always check GitHub and see if you see that branch in the branch drop-down menu. It might have already been deleted.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 400 | location 6122-6127 | Added on Sunday, 21 January 2024 22:22:39

Remote tracking branches are managed by Git, so it’s best to have Git delete them when they no longer have a remote counterpart. Remote tracking branches show up in the clone for two different reasons: you created a local branch and pushed it upstream, or a fellow collaborator created a branch, pushed upstream, and you did a fetch. The easiest way to clean up all remote tracking branches that no longer have a remote counterpart is use the -p (or --prune) flag that the fetch command supports. With this option, you get all the new branches and commits that show up in the remote but also clean up any remote tracking branches that no longer have a remote counterpart! A twofer? Yes, ma’am!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 402 | location 6159-6161 | Added on Sunday, 21 January 2024 22:23:46

We know we’ve been telling you to get in the habit of fetching often. The real advice here is to get in the habit of using git fetch -p (or --prune) often. This ensures that your list of remote tracking branches always reflects what’s available in the remote. This way you know which local branches you should delete locally.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5245-5249 | Added on Monday, 22 January 2024 09:30:58

In principle, you could make the conflict detection synchronous—i.e., wait for the write to be replicated to all replicas before telling the user that the write was successful. However, by doing so, you would lose the main advantage of multi-leader replication: allowing each replica to accept writes independently. If you want synchronous conflict detection, you might as well just use single-leader replication.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5276-5281 | Added on Monday, 22 January 2024 09:33:59

Give each write a unique ID (e.g., a timestamp, a long random number, a UUID, or a hash of the key and value), pick the write with the highest ID as the winner, and throw away the other writes. If a timestamp is used, this technique is known as last write wins (LWW). Although this approach is popular, it is dangerously prone to data loss [35]. We will discuss LWW in more detail at the end of this chapter (“Detecting Concurrent Writes”).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5382-5387 | Added on Monday, 22 January 2024 09:41:01

Figure 5-9. With multi-leader replication, writes may arrive in the wrong order at some replicas. In Figure 5-9, client A inserts a row into a table on leader 1, and client B updates that row on leader 3. However, leader 2 may receive the writes in a different order: it may first receive the update (which, from its point of view, is an update to a row that does not exist in the database) and only later receive the corresponding insert (which should have preceded the update).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5433-5446 | Added on Monday, 22 January 2024 09:45:22

On the other hand, in a leaderless configuration, failover does not exist. Figure 5-10 shows what happens: the client (user 1234) sends the write to all three replicas in parallel, and the two available replicas accept the write but the unavailable replica misses it. Let’s say that it’s sufficient for two out of three replicas to acknowledge the write: after user 1234 has received two ok responses, we consider the write to be successful. The client simply ignores the fact that one of the replicas missed the write. Figure 5-10. A quorum write, quorum read, and read repair after a node outage. Now imagine that the unavailable node comes back online, and clients start reading from it. Any writes that happened while the node was down are missing from that node. Thus, if you read from that node, you may get stale (outdated) values as responses. To solve that problem, when a client reads from the database, it doesn’t just send its request to one replica: read requests are also sent to several nodes in parallel. The client may get different responses from different nodes; i.e., the up-to-date value from one node and a stale value from another. Version numbers are used to determine which value is newer (see “Detecting Concurrent Writes”).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5462-5477 | Added on Monday, 22 January 2024 09:48:08

Quorums for reading and writing In the example of Figure 5-10, we considered the write to be successful even though it was only processed on two out of three replicas. What if only one out of three replicas accepted the write? How far can we push this? If we know that every successful write is guaranteed to be present on at least two out of three replicas, that means at most one replica can be stale. Thus, if we read from at least two replicas, we can be sure that at least one of the two is up to date. If the third replica is down or slow to respond, reads can nevertheless continue returning an up-to-date value. More generally, if there are n replicas, every write must be confirmed by w nodes to be considered successful, and we must query at least r nodes for each read. (In our example, n = 3, w = 2, r = 2.) As long as w + r > n, we expect to get an up-to-date value when reading, because at least one of the r nodes we’re reading from must be up to date. Reads and writes that obey these r and w values are called quorum reads and writes [44].vii You can think of r and w as the minimum number of votes required for the read or write to be valid.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5487-5498 | Added on Monday, 22 January 2024 09:49:22

If w < n, we can still process writes if a node is unavailable. If r < n, we can still process reads if a node is unavailable. With n = 3, w = 2, r = 2 we can tolerate one unavailable node. With n = 5, w = 3, r = 3 we can tolerate two unavailable nodes. This case is illustrated in Figure 5-11. Normally, reads and writes are always sent to all n replicas in parallel. The parameters w and r determine how many nodes we wait for—i.e., how many of the n nodes need to report success before we consider the read or write to be successful. Figure 5-11. If w + r > n, at least one of the r replicas you read from must have seen the most recent successful write.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5519-5523 | Added on Monday, 22 January 2024 09:51:01

With a smaller w and r you are more likely to read stale values, because it’s more likely that your read didn’t include the node with the latest value. On the upside, this configuration allows lower latency and higher availability: if there is a network interruption and many replicas become unreachable, there’s a higher chance that you can continue processing reads and writes. Only after the number of reachable replicas falls below w or r does the database become unavailable for writing or reading, respectively.
==========
_OceanofPDF.com_The_Secret_of_Nagas_-_Amish_Tripathi (Amish Tripathi)
- Your Highlight at location 461-462 | Added on Monday, 22 January 2024 20:14:59

‘Don’t sit at my feet, my friend. Sit beside me. The sound carries a little better there!’ Bhagirath smiled as Shiva patted him on the shoulder.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 432 | location 6623-6627 | Added on Monday, 22 January 2024 22:48:40

Seeing who changed what and when with git blame Every commit you make introduces “diffs”—files that were added or removed or edits to existing files, like adding or removing content—from the previous change. And Git is absolutely brilliant at tracking those changes: it can tell you exactly when a line was changed, who changed it, and the ID of the commit that introduced that change. To see this, use the git blame command: 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 433 | location 6639-6640 | Added on Monday, 22 January 2024 22:52:08

Furthermore, since git blame only looks at the lines in the file at the time you run it, it cannot tell you about deleted lines.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 434 | location 6651-6654 | Added on Monday, 22 January 2024 22:55:15

This means that we can ask git blame to show us the revision history of a file at any commit, simply by giving it the commit ID and the filename! Suppose one of the commits you see in the git blame output happens to be c3668177. You can supply that ID to git blame, and it will show you the revision history of the file as it looked at the moment the commit was made. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 437 | location 6695-6702 | Added on Monday, 22 January 2024 23:01:14

Let’s say you want to find all the places where you used Aref’s name. You can grep for it (using git grep Aref), and this is what Git will present you: There are a couple of things to note about git grep’s output. First, Git will list out every instance that contains the string you are searching for, which means you might see the same filename listed multiple times (if the word you are looking for happens to be in a file more than once). Git also lists files in alphabetical order, making it easier to scan if you are looking for a particular file. NOTE Uppercase letters appear before lowercase letters.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 439 | location 6728-6735 | Added on Monday, 22 January 2024 23:07:52

The git grep command’s functionality is very specific—by default, it only searches files that Git knows about. That is, git grep only searches files that Git is tracking. This means that if you have files in your repository that you haven’t added to the index yet, git grep will not search those! Also, there is a way to tell Git to ignore some files in a directory (more about this in the next chapter). Git’s grep command will also ignore these files. This is both a boon and a curse: it’s great if you don’t want to search these files because they aren’t technically part of your repository, but it works against you if you do want to search them for a particular use case. For the latter scenario, you might be better off using your editor’s search facilities or tools like Bash’s grep command.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 441 | location 6748-6753 | Added on Monday, 22 January 2024 23:10:27

Q: I am familiar with Bash’s grep command. Why would I prefer one over the other? A: Git’s grep, by default, does not search your files. Rather, it searches its index and database, so it can make good use of Git’s efficient internal storage. This means that Git’s grep can be a lot faster than Bash grep. On the other hand, if you wish to search all files in a project, including tracked and untracked files, Bash’s grep is your friend. However, it’s not an either/or—depending on the use case, we’ve found that we reach for one or the other.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 442 | location 6770-6771 | Added on Monday, 22 January 2024 23:42:38

However, Git blame works at a line level! Git blame can tell you when a particular line was last changed, but it can’t tell you what changed in that line when that commit was made. And finally, git blame only looks at one file at a time.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 443 | location 6782-6786 | Added on Monday, 22 January 2024 23:44:19

Well, Git knows the commits you’ve made, and you know that a commit records the state of the files as they were in the index at that time. Which means Git should be able to compare every commit with its predecessor and see if a particular piece of text was added or deleted. git log’s “pickaxe” capability (-S) NOTE It’s not as scary as it sounds. We pinky promise.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 443 | location 6788-6797 | Added on Monday, 22 January 2024 23:46:28

If you ever wanted to know when a particular piece of text was added or removed, you need look no further than our good friend and ally, the git log command. It offers several options to search the “diff” that each commit introduces—that is, git log can help you search the changes introduced by each commit. Consider the first two commits we showed you on the previous page: If you are interested in when the word “tired” first appeared or disappeared, you can use the git log command with the -S (uppercase “S”) flag. This lets you search the diffs of each commit like so: NOTE The search capabilities offered by git log are referred to as the “pickaxe” options. -S is one way to do this. We’ll show you another search option soon. And this is what Git will show you: 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 444 | location 6798-6804 | Added on Monday, 22 January 2024 23:47:09

git log -S versus blame There are a couple of differences between the git log’s search results and those of git blame. First, the pickaxe option (-S) is not restricted to a single file. In our example, using the pickaxe option to search for “tired” searches your entire repository—it’s not limited to a single file. You can restrict git log to only display the log for a single file by supplying the filename at the end. Think about it this way—git blame is a way to attribute changes in a single file, while git log’s pickaxe option is a search mechanism for your entire repository.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 445 | location 6822-6839 | Added on Monday, 22 January 2024 23:51:00

Using the “patch” flag with git log If you ever wanted to see the actual diff that each commit introduced, you can use yet another flag with git log, which is -p (shorthand for --patch). This is true for every instance of git log that we’ve shown you in this book. For example, you could combine the -p flag with our favorite combo of git log flags like so: With the “patch” flag, Git will display your commit graph just as you are used to seeing it, along with the differences introduced in each commit: Back to searching—combine the pickaxe flag (-S) with the -p (--patch) flag, and git log will show you every commit that has the search string in its diff, as well as the diff itself! So does this get us closer to knowing when the word “tired” appeared or was deleted? Let’s find out. If you provide the patch (-p) flag along with the search term (-S), here is what Git has to offer: Recall that the git log command displays commits in reverse chronological order, so the commit that introduced the word “tired” is at the bottom of the output, preceded by the commit that changed “tired” to “lazy.” And one last piece that’ll make your life easier—like the diff command, the log command also supports the --word-diff flag when displaying patches! So if the above is too verbose for you and you like your output to be as succinct as you can make it, here is
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5586-5596 | Added on Tuesday, 23 January 2024 08:59:32

Is it better to return errors to all requests for which we cannot reach a quorum of w or r nodes? Or should we accept writes anyway, and write them to some nodes that are reachable but aren’t among the n nodes on which the value usually lives? The latter is known as a sloppy quorum [37]: writes and reads still require w and r successful responses, but those may include nodes that are not among the designated n “home” nodes for a value. By analogy, if you lock yourself out of your house, you may knock on the neighbor’s door and ask whether you may stay on their couch temporarily. Once the network interruption is fixed, any writes that one node temporarily accepted on behalf of another node are sent to the appropriate “home” nodes. This is called hinted handoff. (Once you find the keys to your house again, your neighbor politely asks you to get off their couch and go home.)
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5665-5670 | Added on Tuesday, 23 January 2024 09:06:17

Even though the writes don’t have a natural ordering, we can force an arbitrary order on them. For example, we can attach a timestamp to each write, pick the biggest timestamp as the most “recent,” and discard any writes with an earlier timestamp. This conflict resolution algorithm, called last write wins (LWW), is the only supported conflict resolution method in Cassandra [53], and an optional feature in Riak [35].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5674-5679 | Added on Tuesday, 23 January 2024 09:07:14

There are some situations, such as caching, in which lost writes are perhaps acceptable. If losing data is not acceptable, LWW is a poor choice for conflict resolution. The only safe way of using a database with LWW is to ensure that a key is only written once and thereafter treated as immutable, thus avoiding any concurrent updates to the same key. For example, a recommended way of using Cassandra is to use a UUID as the key, thus giving each write operation a unique key [53].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5705-5710 | Added on Tuesday, 23 January 2024 09:09:16

For defining concurrency, exact time doesn’t matter: we simply call two operations concurrent if they are both unaware of each other, regardless of the physical time at which they occurred. People sometimes make a connection between this principle and the special theory of relativity in physics [54], which introduced the idea that information cannot travel faster than the speed of light. Consequently, two events that occur some distance apart cannot possibly affect each other if the time between the events is shorter than the time it takes light to travel the distance between them.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5744-5746 | Added on Tuesday, 23 January 2024 09:16:15

Figure 5-13. Capturing causal dependencies between two clients concurrently editing a shopping cart.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5751-5753 | Added on Tuesday, 23 January 2024 09:16:36

Figure 5-14. Graph of causal dependencies in Figure 5-13.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 448 | location 6856-6870 | Added on Tuesday, 23 January 2024 09:26:21

git log’s other “pickaxe” flag (-G) Git log’s -S flag can help you find every commit where the text you are looking for was either added or deleted, which is super handy. But what if you want to find every time a particular piece of text showed up in the diff of a commit? Let’s go back to our single-line-file example and take a look at the diffs of the last two commits—keep an eye out for the word “lazy”: The -S flag in this case will only list commit 2 because it only lists commits where the text you are searching for (“lazy” in this case) was either added or deleted. The -S flag will not list commit 3 because it does not affect the number of times lazy appears—rather, commit 3 affects the line that contains the word “lazy.” Why would you ever perform a search like this? Maybe someone introduced a typo somewhere on the line that contains the word “lazy”—searching for “lazy” will highlight anytime that line was changed in some way. Or if you want to see how the arguments of a function have changed over time—you could just search for the name of the function. As we discussed, git log’s -S flag will not do the trick for this. Rather, you want to use the -G option. You use it just like the -S option, and it will highlight every commit whose diff includes the word you are looking for. Everything that we’ve talked about with the -S flag applies to the -G flag—you can display the individual patches for each commit listed with the -p (or --patch) flag, and you can use --word-diff and --oneline flags as well.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 450 | location 6898-6901 | Added on Tuesday, 23 January 2024 09:28:51

Suppose you wanted to find every commit that uses the phrase “first draft” in its commit message: You can combine --grep with other flags like --graph and --oneline.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 451 | location 6912 | Added on Tuesday, 23 January 2024 09:29:27


==========
Head First Git (Raju Gandhi)
- Your Highlight on page 453 | location 6945-6947 | Added on Tuesday, 23 January 2024 09:32:28

We know what it means to check out a commit. So how do we go about checking out a particular commit? 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 454 | location 6948 | Added on Tuesday, 23 January 2024 09:33:14


==========
Head First Git (Raju Gandhi)
- Your Highlight on page 454 | location 6955-6963 | Added on Tuesday, 23 January 2024 09:34:53

Detached HEAD state When you check out a commit using its ID, Git says You are in 'detached HEAD' state. What this means is that you are no longer on a branch. And why does that matter? There are two things to keep in mind: The commit that HEAD points to will be the parent of the next commit. There is nothing stopping you from making edits to your repository and making a commit at this point! What would your history look like if you did make a commit? Here’s what your commit history would look like: 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 454 | location 6955-6966 | Added on Tuesday, 23 January 2024 09:36:12

Detached HEAD state When you check out a commit using its ID, Git says You are in 'detached HEAD' state. What this means is that you are no longer on a branch. And why does that matter? There are two things to keep in mind: The commit that HEAD points to will be the parent of the next commit. There is nothing stopping you from making edits to your repository and making a commit at this point! What would your history look like if you did make a commit? Here’s what your commit history would look like: As you can see, you’ve now created a new timeline, except there is no branch reference. While that might seem innocuous, what would happen if you then decided to switch back to the master branch? HEAD would move to the commit that the master branch points to—leaving your new commit behind. Whoops! 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 455 | location 6973-6977 | Added on Tuesday, 23 January 2024 09:37:09

The lesson here? If you ever want to see what your repository looked like at a particular point in time, use Git’s checkout facilities to do just that. However, be sure to create a branch first and switch to it before making any edits when you are in detached HEAD state! Remember, branches are cheap. If you decide later on that you don’t care to keep those changes around, simply delete the branch. This way, your work resides safely on a branch, and you can always switch back to it if you like, without running the risk of losing your changes. Win-win!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 459 | location 7025-7027 | Added on Tuesday, 23 January 2024 09:39:33

But let me show you another way to find out which commit introduced a particular change. It’s called git bisect. It helps you search all your commits using an efficient search algorithm called binary search.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 459 | location 7027-7036 | Added on Tuesday, 23 January 2024 09:40:14

Let’s say you have five commits in your repository. You know you have a typo in the latest commit, but it wasn’t there in the first commit. Now suppose I show you the state of the repository as it looked in commit 3, and after looking around you conclude the typo isn’t there. That is, commit 3 is “good.” What would that tell you? Armstrong: That means the typo appeared in commit 4 or 5! Trinity: Right! And what if commit 3 is “bad,” as in, the typo was there? Armstrong: We know it wasn’t in commit 1, so it has to be in 2 or 3 itself. Trinity: Yep. You just did a binary search of commits—you pick two commits and find one somewhere in between—say, commit 3. If the typo isn’t there, that means it’s either in commit 4 or 5. Otherwise you go further back, eventually zeroing in on the right commit. Armstrong: And Git can help you with this? That’s awesome!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 461 | location 7057-7061 | Added on Tuesday, 23 January 2024 10:36:29

Searching for commits using git bisect Git log’s pickaxe options (-S and -G) are incredibly powerful. However, they fall short when you don’t know exactly what to search for. Consider a scenario where you’ve found a bug in the master branch. You don’t know what’s causing it, so you don’t know what to search for—which means the pickaxe options are no help.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 462 | location 7074-7099 | Added on Tuesday, 23 January 2024 10:41:21

Using git bisect Let’s walk through a git bisect session together. We’ll use a hypothetical repository that has five commits. We just noticed that the latest commit has a bug in it. Let’s go ahead and assume that the first commit is good. To start bisecting commits, we have to first tell Git to kick off a bisecting session. Next you have to tell Git the “bad” commit ID—in this scenario, HEAD has the bug, so let’s tell Git that. Then you tell Git the “good” commit ID, which in this case is commit ID By telling Git where the “bad” and “good” commits are, you are giving Git a range of commits to search. Git immediately gets to work—starting a binary search. It finds a commit somewhere halfway between the “bad” and “good” commits, and uses the git checkout command to check out that commit. You are in business! Now go find that pesky commit, will ya? The git bisect session is all set up, and Git has already checked out a commit for you. Git status confirms this: Where do things stand? Recall that checking out a commit means Git has replaced all the files in your working directory to look like they did when you made that commit: At this point, you can look at the files in your project in your editor and see if you spot the bug. Or you could run the application, run your tests, what have you. You’ll probably draw one of two conclusions—the bug is in this commit, or the bug is not in this commit. If you do see the bug in this commit, then you tell Git just that: On the other hand, you might not see the bug. Then you use git bisect good. Telling Git whether a commit is bad or good tells Git which direction to keep searching in. If you say “bad”, Git knows to search in commits that came before the commit you are on. Otherwise, it will search commits that came after that one. Regardless, Git will simply repeat what it did when you started—check out another commit and give you a chance to keep inspecting commits till you finally home in on the commit that started the trouble. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 464 | location 7106 | Added on Tuesday, 23 January 2024 10:41:48


==========
Head First Git (Raju Gandhi)
- Your Highlight on page 466 | location 7136-7180 | Added on Tuesday, 23 January 2024 10:45:12

Git provides a variety of useful tools to search the contents of repositories, the commit log, and commits. You can annotate any tracked file in a Git repository using git blame. This will show you, on a per-line basis, details about the latest commit that changed that line, including the commit ID, the author info, and the date the change was made. Most Git repository managers like GitHub make it easy to annotate files using git blame in your browser. You can supply git blame a specific commit ID to see the revision history of a file at the time that commit was made. You can search the contents of all tracked files in your repository using the git grep command. The git grep command by default is case-sensitive when searching. You can use the -i (shorthand for --ignore-case) flag to make your search case-insensitive. The git grep command also supports the -n (shorthand for --line-number) flag that will display the line number for a match. The git grep command lists every match it finds. You can restrict the output to list just the names of the files using the -l (shorthand for --name-only) flag. To find which commit added or removed a piece of text, you can use the -S flag that the git log command supports. The -S flag is one of two “pickaxe” options that Git supports, and it accepts as its argument the text you want to search for. The pickaxe options search the entire commit history but can be limited to inspect the history of a single file by supplying the name of the file to the git log command. The git log command can also display the patch introduced in every commit using the -p (shorthand for --patch) flag. This can be combined with the -S flag to see if the search text was added or removed in a particular commit. Searching for text in a Git repository using the -S flag only reveals commits that added or removed that piece of text. To find all commits where the line that contains a piece of text changed, there is the -G flag that git log supports. The --grep flag with the git log command searches commit messages. You can “flip back” to any commit in your commit history using the git checkout command. When you check out a commit, Git will rewrite your working directory to look like it did when you made that commit. Checking out a commit puts you in “detached HEAD” state. This means that you are no longer working on a branch. You can continue to make edits and commits, but switching away from that commit history means you will abandon your commits (since they are not referenced by a branch). It’s best not to make any commits when you are in detached HEAD state. Always work on branches. You can search for commits that introduced a typo or a bug using the git bisect command, which uses the binary search algorithm to navigate your commit history, and quickly zero in on the commit you are looking for. At each step in a git bisect session, Git checks out a commit, leaving you in detached HEAD state. Since Git will rewrite your working directory, you can look around to see if you spot the unwelcome behavior. Depending on whether you see the issue, you can tell Git if the current commit is “good” or “bad,” which informs Git which direction in the commit history to search. This repeats till you’ve isolated the commit with the reported issue.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 484 | location 7419-7424 | Added on Tuesday, 23 January 2024 14:58:18

The global .gitconfig file What happens when you invoke the git config command with the --global flag? Git realizes you want a particular setting available across all of the repositories you work with, so it installs that setting in a file called .gitconfig in your home directory. For Linux and macOS users, your home directory will be ~/ and for Windows users, this defaults to the directory with your username under C:\Users. You can use your terminal to locate this file: 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 487 | location 7458-7460 | Added on Tuesday, 23 January 2024 15:00:42

But then you decide to work on a personal project or contribute to an open source project in your free time. Just for that project, you would rather record your personal email address for every commit. Git allows you to install a specific configuration for a particular repository, overriding the global one. Let’s see how to do that next.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 487 | location 7461-7470 | Added on Tuesday, 23 January 2024 15:01:19

Project-specific Git configuration The global Git configuration is a great place to store options that you want Git to use most of the time (like your name, which probably doesn’t change often). But every so often, you might prefer a different setting for a particular project. Git to the rescue—we can override global options for a particular project. The git config command supports another flag, --local, that writes a configuration file for a specific repository: Two points of note: the default behavior of the git config command is to install options locally. In other words, you can skip the --local flag and get the exact same behavior. You’d have to use the --global flag for it to not be a local install. Secondly, you have to be in a Git repository when you issue the git config command without the --global flag! Otherwise, Git will report a fatal: not in a git directory error. That makes sense—you are telling Git you want to set a specific option for a particular repository, the one you are in right now.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 487 | location 7461-7472 | Added on Tuesday, 23 January 2024 15:01:50

Project-specific Git configuration The global Git configuration is a great place to store options that you want Git to use most of the time (like your name, which probably doesn’t change often). But every so often, you might prefer a different setting for a particular project. Git to the rescue—we can override global options for a particular project. The git config command supports another flag, --local, that writes a configuration file for a specific repository: Two points of note: the default behavior of the git config command is to install options locally. In other words, you can skip the --local flag and get the exact same behavior. You’d have to use the --global flag for it to not be a local install. Secondly, you have to be in a Git repository when you issue the git config command without the --global flag! Otherwise, Git will report a fatal: not in a git directory error. That makes sense—you are telling Git you want to set a specific option for a particular repository, the one you are in right now. NOTE Git stores the local configuration in a file called “config” inside the hidden .git folder.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 487 | location 7461-7472 | Added on Tuesday, 23 January 2024 15:02:08

Project-specific Git configuration The global Git configuration is a great place to store options that you want Git to use most of the time (like your name, which probably doesn’t change often). But every so often, you might prefer a different setting for a particular project. Git to the rescue—we can override global options for a particular project. The git config command supports another flag, --local, that writes a configuration file for a specific repository: Two points of note: the default behavior of the git config command is to install options locally. In other words, you can skip the --local flag and get the exact same behavior. You’d have to use the --global flag for it to not be a local install. Secondly, you have to be in a Git repository when you issue the git config command without the --global flag! Otherwise, Git will report a fatal: not in a git directory error. That makes sense—you are telling Git you want to set a specific option for a particular repository, the one you are in right now. NOTE Git stores the local configuration in a file called “config” inside the hidden .git folder.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 489 | location 7484-7488 | Added on Tuesday, 23 January 2024 15:03:10

Exactly! Git first reads the global configuration file (in your home directory), followed by the one local to your repository—in that order—and then merges them into one. Sections and keys that are unique to each file will remain untouched—however, if you have the user.email key set to a different value in your local configuration than what’s in the global one, the local one wins. Just think of the “distance” between each configuration and your repository—the closer it is, the higher its priority.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 490 | location 7500-7506 | Added on Tuesday, 23 January 2024 15:04:02

The git config command offers an --unset flag that will remove an entry. Suppose you want to remove the value for user.email from the configuration of a specific repository—that is, you want to remove a “local” configuration. This is how you’d go about doing it: git config --local --unset user.email If this was a global configuration, you’d have to pass the --global flag alongside the --unset flag to affect the .gitconfig in your home directory. Also, recall that Git stores your configuration as a plain-text file. You can always choose to open the file using a text editor like Visual Studio Code and edit it. Be sure to make a backup first, though. (Better safe than sorry, right?)
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 491 | location 7515-7529 | Added on Tuesday, 23 January 2024 15:06:17

Listing your Git configuration Installing options and configuring Git to your whims is all fine and dandy, but sometimes you might just want to list everything you have configured. The git config command offers a --list flag that lists all the options you’ve set, global or local. Imagine you’ve set a bunch of options in the global configuration, and you’ve introduced a different email address using the git config with the --local flag. Here is what we see when we use the --list option on our own machine (yours will be different): As you can see, the --list flag lists all the options that Git sees, including some that Git sets up automatically. Recall that Git reads the global configuration first, followed by the local configuration. The --list flag lists the options in the order Git encounters them—entries at the top are global, followed by any local entries. You’ll notice that the previous listing displays user. email twice—the first is the value Git sees in the global configuration file; the second is the one that we installed locally in that repository. Naturally, you might be curious whether a particular option was set globally or locally. To answer that question the git config command supports another flag, --show-origin, which, alongside the --list option, will show you where Git picked up a particular setting. We aren’t done yet. We’ll soon show you another little trick that uses Git’s configuration capabilities. Stay tuned!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 494 | location 7565-7573 | Added on Tuesday, 23 January 2024 15:09:03

To make this happen, you can install an alias: This is just another piece of configuration, and as you might’ve guessed, it gets stuffed in the .gitconfig file in your home directory. Everything you’ve learned so far about adding/editing/viewing the Git configuration also applies to aliases. Now, instead of having to type git log --oneline --graph --all, you simply invoke git loga and you get the exact same output! How awesome is that?! When you “set” an alias, the section in the .gitconfig file is called “alias” (which you must get right) and the key can be anything you want it to be. Just be sure to make the key relevant and somewhat memorable—in our case we picked loga because we are invoking the log command with the oneline, graph, and all flags, not to mention it’s pretty similar to log (with the “a” at the end).
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 495 | location 7589-7590 | Added on Tuesday, 23 January 2024 15:10:45

Finally, always make your aliases lowercase. This fits with how Git commands work—and they are easier to type.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 496 | location 7591-7596 | Added on Tuesday, 23 January 2024 15:11:08

WATCH IT! Never define an alias name to match a Git command name! Let’s say you decide to define an alias, “log”, that expands into “log --oneline --graph”. Git will always look to see if there is a command called log before it looks to see if there is an alias called log. So, when you invoke git log, Git will find the log command and invoke that. In other words, you have no way of invoking the alias. Kinda defeats the purpose of having the alias to begin with, right?
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 501 | location 7668-7671 | Added on Tuesday, 23 January 2024 17:49:27

.gitignore file keeps untracked files out of your Git repository. Consider a hypothetical repository: NOTE Read that again—the .gitignore file is for untracked files only!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 507 | location 7761-7767 | Added on Tuesday, 23 January 2024 18:01:11

As you might have guessed, ignoring operating-system-specific files can get repetitive, especially if you have many Git repositories. Each one will essentially list the same set of files again and again. Git allows you to define a global .gitignore file to avoid the repetition. For any project, Git will combine the global .gitignore file with any project-specific .gitignore file you provide to generate a complete list of files to ignore. Thie setup, as you might have guessed, involves tweaking the .gitconfig file in your home directory. Once you have some more experience with Git, we encourage you to explore this some more. Search online for the phrase “global gitignore” to get started.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 510 | location 7820-7829 | Added on Tuesday, 23 January 2024 18:22:28

Here are some guidelines for writing a good commit message: Always use the imperative mood Avoid messages like “updated documentation” or “fixes login bug.” Write a commit message as if you were giving the computer a command, for example, “update documentation” and “fix intermittent bug when logging in.” NOTE We give credit where it’s due. This piece of advice comes from the prolific Tim Pope, published in a brilliant blog post that you can find here: https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html Avoid using the
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 510 | location 7820-7837 | Added on Tuesday, 23 January 2024 18:25:07

Here are some guidelines for writing a good commit message: Always use the imperative mood Avoid messages like “updated documentation” or “fixes login bug.” Write a commit message as if you were giving the computer a command, for example, “update documentation” and “fix intermittent bug when logging in.” NOTE We give credit where it’s due. This piece of advice comes from the prolific Tim Pope, published in a brilliant blog post that you can find here: https://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html Avoid using the -m (or --message) flag with the git commit command Throughout this book, we’ve asked you supply commit messages to the git commit command using the -m flag. But you’re ready to level up. Our advice going forward is to simply invoke the git commit command with no flags. This will prompt Git to bring up Visual Studio Code or your default configured editor so you can type a message. You can use all of your text editor’s capabilities to craft a good commit message. You can even introduce double and single quotes, new lines, ampersands, and other characters that are notoriously hard to enter at the command line. In other words, with a text editor at your disposal you no longer have to wrestle with the limitations of the command line. 
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 512 | location 7840 | Added on Tuesday, 23 January 2024 18:25:24


==========
Head First Git (Raju Gandhi)
- Your Highlight on page 512 | location 7841-7845 | Added on Tuesday, 23 January 2024 18:25:46

The most important thing to remember about a commit message is that it should focus on the why of a change, not the how or the what. Of course, this may not always be possible, but it’s a good ideal to keep in mind. Before we go further, it’s important to realize what this particular format buys you. You see, using the git log command with the --oneline flag will display the first line (header) for every commit. Here’s the log of the a-head-above repository you’ve been working with so far in this chapter:
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 513 | location 7851-7861 | Added on Tuesday, 23 January 2024 18:27:52

The anatomy of a good commit message: headers Let’s spend a few minutes dissecting our header, displayed here in its full glory: We’ll start with the type. We like to prefix our commit messages with the kind of change introduced in that commit. Here’s an abbreviated list of “types” we find useful: The commit type is usually obvious from the kind of task you’ve been assigned. You should work with your team to document a list of “types” so that everyone uses them consistently. The type is followed by a colon and a space, then the commit message describing the change (again, in imperative mood—that is, as if you are commanding the computer to take action on your part). Notice that our preference is to use all lowercase, unless we are spelling out acronyms (like CSS) or proper nouns (like Git). We usually end this by spelling out the ticket number (if there is one) wrapped in parentheses and prefixed with a hash mark.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 514 | location 7870-7888 | Added on Tuesday, 23 January 2024 18:29:35

The anatomy of a good commit message: bodies Getting the header right is a very good first step, and a descriptive header is often sufficient to describe why a particular commit was made. But for many commits, a single-line header isn’t enough. Perhaps you wish to provide more information about the change or explain why you chose a particular approach. This is where the body of the commit message comes into play. Here’s the commit message we laid out for you a few pages ago: There is only one rule—you must separate the body from the header using a blank line. Outside of that, the guidelines for writing the body are pretty relaxed—it’s free-form text and can be as short or long as you need it to be. If you decide to write more than one paragraph, then be sure to insert a blank line between paragraphs. That’s it! What should you say? We have found ourselves writing blocks of text to further elaborate on a change or add links to online documentation or blog posts. Sometimes we link to past issues that were solved using a similar technique to establish precedent. We’ve even included what we did to test out our work, particularly if the testing setup was elaborate. Anything you think will help someone reading the commit log make sense of a change is fair game. NOTE We prefer using hyphens in place of asterisks when creating lists, and we encourage you to do the same. This aligns well with the Markdown format, which you’ve used throughout this book. There you have it! Go forth and write perfect commit messages. NOTE And if you make a mistake or a typo when you commit? Don’t forget about the --amend option, which you learned about in Chapter 4. Amend away!
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 516 | location 7900-7901 | Added on Tuesday, 23 January 2024 18:54:11

https://github.com/angular/angular
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 516 | location 7902-7903 | Added on Tuesday, 23 January 2024 18:54:20

https://www.conventionalcommits.org).
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 517 | location 7919-7935 | Added on Tuesday, 23 January 2024 18:55:51

We bet you’re wondering if we have any thoughts on the subject. Funny you should ask! Here’s how we suggest you name your branches: We mentioned in Chapter 2 that Git allows forward slashes in branch names. We recommend using them to separate the different parts of the branch name. Let’s take a look at each segment of the branch name: rg Prefix the name of the branch with your initials. This makes it easy to discern who created which branches when you list them (using the git branch command with the -a or --all flag). 1618 We have always recommended that you check your Git status before adding files to the index or making commits. Since Git always displays the branch name in the output of the git status command, which will now include the ticket number, you’ll always have it when you’re about to commit. No need to dig up your notes or fire up the task tracking tool—it’s right there! remove-typos-in-documentation Finally, we arrive at a brief description of the task at hand. We usually just grab the title of the ticket, lowercase it, convert the spaces to hyphens, and remove any superfluous words. Done! By incorporating a clear (but short) description of the task, we leave ourselves a mental bookmark. If we have to switch tasks, this will make it easier for us to remember what we were working on when we come back.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 520 | location 7973-7990 | Added on Tuesday, 23 January 2024 19:11:00

 Features: Free. Available for macOS and Windows We’ve used Sourcetree, a brilliantly designed Git GUI, for years, and highly recommend it. We’ll discuss it more on the next page. URL:  https://www.sourcetreeapp.com   GitHub Desktop   Features: Free. Available for macOS and Windows GitHub’s official desktop app makes working with Git and GitHub easier. It allows you to fork repositories, create and view pull requests, and do plenty of things that are specific to GitHub. If you use GitHub as your repository manager, GitHub Desktop might just be the GUI tool you are looking for. URL:  https://desktop.github.com   Gitlens   NOTE Any editor worth its salt will have a plug-in or extension for Git.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 526 | location 8052-8084 | Added on Tuesday, 23 January 2024 19:15:05

Git is extremely customizable. You can set and override many settings using the git config command. The git config command, used with the --global flag, allows you to create settings that affect every repository you work in on that particular workstation. Using the git config command, you can set the value for a particular setting. All global settings are stored in a file called .gitconfig, which is stored in the home directory under your account. It consists of sections, and keys under a section, each associated with a value. You’ll have to configure some settings, like user.name and user.email, to be able to use Git. Others, like core.editor, override Git’s defaults and are optional. You can store certain settings at the repository level (that is, local to a specific repository) using the --local flag with the git config command. To list all settings, use the git config command with the --list option. Git allows you to create aliases, which act like shortcuts to invoke certain Git commands. Aliases can also include flags and arguments. Aliases are configurations, under the “alias” section. The key can be any word, and its value is what the alias will expand to. You can invoke an alias like you would any Git command (e.g., git loga). Most, if not all, projects require that some files never be committed. You can tell Git to ignore an untracked file. Once ignored, it will remain forever untracked. To tell Git to ignore a file, create a .gitignore file at the root of your repository that lists all the files you wish to ignore. “Commit early, commit often” is the mantra when it comes to working with Git. Recording snapshots of your work regularly is a good habit to develop. Think of each commit in terms of its scope, not its size. Try to group changes together logically. Use consistent and informative commit messages. This can be helpful when reading the output of the git log command or searching for a commit using git bisect (see Chapter 7), to name a few examples. Create contexual and meaningful branch names that help discern which branches are yours and what their purposes are. Consider using a graphical user interface (GUI) tool to aid in your work with Git. Remember, it’s not one or the other—you can and should use a GUI side by side with the command line.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 539 | location 8264-8280 | Added on Tuesday, 23 January 2024 20:59:28

#1 Tags (remember me forever) You know that Git branches are sticky notes—a branch is simply a named reference to a commit. You also know that if you make a new commit on a branch, Git moves the branch to point to the new commit ID on that branch. Tags, like branches, are also named references to commits, except that once they are created, they never move. Tags are very useful if you want to name a commit so you can find and get it to easily. We use tags to record “landmarks” in a project history. For example, we could tag the commit that marks a specific version of our software, like v1.0.0. Or the commit that fixed a particularly nasty bug. To create a tag, Git offers the git tag command: By default, the tag command will record the current ID (that is, where HEAD points to) in the tag. However, you can supply a specific commit ID after the tag name. Tag names follow the same rules as branch names. They don’t allow spaces (we like using hyphens instead), but they can have forward slashes and periods. To list all the tags in your repository, you can simply supply the -l (lowercase “L,” which is shorthand for --list) flag to the git tag command. Tags, like branches, are part of your commit history, and you can fetch (and push) tags from the remote to share them with the rest of your team. Both the fetch and push command support the --tags flag. Supplying this flag ensures that the commit history for everyone working on a shared repository accurately reflects all tags that are part of your commit history. NOTE The git pull command also supports the --tags flag.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 539 | location 8264-8285 | Added on Tuesday, 23 January 2024 20:59:57

#1 Tags (remember me forever) You know that Git branches are sticky notes—a branch is simply a named reference to a commit. You also know that if you make a new commit on a branch, Git moves the branch to point to the new commit ID on that branch. Tags, like branches, are also named references to commits, except that once they are created, they never move. Tags are very useful if you want to name a commit so you can find and get it to easily. We use tags to record “landmarks” in a project history. For example, we could tag the commit that marks a specific version of our software, like v1.0.0. Or the commit that fixed a particularly nasty bug. To create a tag, Git offers the git tag command: By default, the tag command will record the current ID (that is, where HEAD points to) in the tag. However, you can supply a specific commit ID after the tag name. Tag names follow the same rules as branch names. They don’t allow spaces (we like using hyphens instead), but they can have forward slashes and periods. To list all the tags in your repository, you can simply supply the -l (lowercase “L,” which is shorthand for --list) flag to the git tag command. Tags, like branches, are part of your commit history, and you can fetch (and push) tags from the remote to share them with the rest of your team. Both the fetch and push command support the --tags flag. Supplying this flag ensures that the commit history for everyone working on a shared repository accurately reflects all tags that are part of your commit history. NOTE The git pull command also supports the --tags flag. One thing to watch out for—try to avoid naming a tag the same name as a branch. Much like we encourage putting your initials in branch names, we encourage finding appropriate prefixes for tag names. We like using the letter “v” (for “version”) to label version numbers. SERIOUS CODING A tag, like a branch, is a named reference to a commit. As long as you have a tag pointing to a commit, it will always be reachable, even if it has no branch or child commit pointing to it.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 541 | location 8286-8310 | Added on Tuesday, 23 January 2024 21:07:08

#2 Cherry-pick (copying commits) Imagine you’re working on a new feature and notice a bug in the code. You fix the bug and make a commit (preferably prefixed with the “type” “fix”). Then you learn that your teammates are getting affected by the same bug. Your branch includes the fix, but you aren’t ready to merge your branch in just yet. So what’s to be done? The commit that contains the bug fix is on your feature branch—how can you apply just that fix to the integration branch? NOTE In case you were wondering where you heard the term cherry-pick before, we mentioned it in Chapter 3. You have two options. First, you could create a new branch based on the integration branch, manually reapply your bug fix, commit, and issue a pull request. Second, you could use another Git command, called cherry-pick, which allows you to copy a commit to another branch. Since you want the fix to be on the master branch, you’d first switch to the master branch. Let’s see how this would play out: Having the ability to cherry-pick commits does not mean you shouldn’t create a feature branch to apply your work, nor does it mean avoiding your team’s conventions around how that change is applied to the integration branch (issue a pull request or merge locally and push). It does, however, avoid you having to redo a change manually—you can rely on Git’s memory to confidently apply the changes introduced in a commit by simply asking it to copy them to a new location in your commit history. Note that you can get a merge conflict since Git will replay your changes on the master branch. Recall that when calculating the commit ID, Git uses the commit’s parent commit ID. This means that the cherry-picked commit will have a different commit ID than the original. This is yet another reason why separating your work into different types of commits is a good idea. You never know when you might have to reach and copy a commit over to another branch. WATCH IT! Don’t overuse cherry-picking! The best way to integrate your work is to merge your feature branch into the integration branch. Cherry-picking commits should be only used as a last-ditch effort, in situations where you absolutely can’t merge the branch where the work was done. Remember, when you are cherry-picking commits, you are making copies of those commits, which contain the same set of changes as the original. Doing this too often can make it hard to decipher your commit history.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 542 | location 8311-8348 | Added on Tuesday, 23 January 2024 21:10:35

#3 Stashes (pseudo-commits) You are knee deep in work. You’ve edited a bunch of files, maybe even added a few files to the index. You check your status and realize you are on the wrong branch! Oops. You should have been on your feature branch, but instead you’re on the master branch. Recall that when you switch branches, Git will rewrite your working directory to look like it did when you made the most recent commit on that branch. This means that if you’ve modified a file that looks different in the two branches, Git won’t let you switch because it would have to overwrite your changes. How can you switch branches now that you have a few changes in flight? Git allows you to stash away your changes using the git stash command. When you ask Git to stash your changes, Git stuffs them away in a special location. This leaves your working directory clean. You can now switch branches. NOTE Recall all those times when someone asked you to clean your room? You take everything in sight, shove it all in a drawer, and ta-da! Clean room. See, you’re already an expert in stashing. You can think of a stash as a sort of pseudo-commit. The difference is that stashing records the changes in both your working directory and the index, as opposed to a commit, which only records what is in your index. The other difference is that a commit adds to your commit history, while a stash does not. If you push, your stashes don’t go along for the ride—they remain in your local Git repository. NOTE This is important. Stashes are local to your repository and are not designed to be shared. So now that you’ve stashed your changes—how do you get them back? You switch branches, and now you’d like you all that work you stashed away back (pretty please with sugar on top). When you stash something, Git puts your work in a stack. This allows you to create multiple stashes, and much like a stack of pancakes, your latest stash created will be at the top. Git allows you to “pop” a stash. This means asking Git to take the topmost (latest) stash, recover all the changes recorded in it, and bring them back, just as they were recorded in the stash. NOTE Mmm...pancakes. NOTE This is often referred to as a “last in, first out” (LIFO) structure. Git diligently remembers which changes were in the index and which were in the working directory, and it puts them back. Now that you are on the right branch and those changes you made are in the right place, you can get back to work! There’s a lot more to stashes—you can supply them with a commit message (just like a standard commit message), list them, view the changes you’ve put in them and even apply specific stashes (rather than just popping the last one you created). And while stashing, by default, only stows away any changes to tracked files, Git allows you to pick whether you want all files (tracked and untracked), only files in the index, or even individual files. WATCH IT! Don’t overuse stashes It’s tempting to use stashes to store “work in progress” items. Sometimes stashes may seem like a good way to stuff away some work while you try an alternative approach to solving a problem. But you already have a solution for this exact problem: branches! We’ll admit—we don’t use stashes very often. (That’s why they are in the appendix of this book!) One of the times we reach for them is when we are faced with the exact scenario we just described, where we’ve made some edits, haven’t committed just yet, and find ourselves on the wrong branch.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 545 | location 8349-8367 | Added on Tuesday, 23 January 2024 21:13:14

#4 reflog (reference log) You know that every time you switch branches or check out a specific Git commit using the git checkout command, HEAD moves. You also know that when you make a commit on a branch, both the branch and HEAD move to the new commit on that branch. What happens when you do a reset? HEAD moves to the commit you reset to. Turns out, a lot of operations involve HEAD, like moving around in Git repositories, or adding to (or removing from) your commit history. Git maintains a log called the reflog (short for reference log), which is updated every time HEAD moves. You can see the reflog for any repository using the git reflog command: Looking closely at one entry in the reflog, we can discern a lot about what happened: Reading the reflog and getting used to all the information Git records in it can take a little. However, it’s important because the reflog is your safety net. Suppose you reset a commit (which might make a commit unreachable) and then change your mind. Well, since the git reset command moves both HEAD and the branch pointer, the reflog can tell you where you were before you reset. Here’s another example: say you are in detached HEAD state. You switch away to another branch or commit, but now you can’t recall which commit you had checked out previously. Reflog to the rescue! Stashes and the reflog have a lot in common. Like the stashes list, the reflog is maintained last-in, first-out (LIFO): the latest movement of HEAD is listed at the top. If you were to make another commit or switch branches, that would be inserted at the top of the list, and the current topmost item would move down one. Another thing stashes and the reflog share is that the reflog, like your stashes, is local to your repository—it is not shared. While the reflog isn’t something you’ll use a lot in your day-to-day work with Git, it is certainly a powerful ally if you ever find yourself in a pickle. So stay calm and use reflog.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 546 | location 8367-8402 | Added on Tuesday, 23 January 2024 21:18:08

#5 rebase (another way to merge) Merging branches is an integral part of working with Git. A merge unites work from separate branches. You know that when you merge two branches, you can either get a fast-forward merge (where the proposing branch jumps forward) or a merge commit. Git offers another way to merge your work: rebase. Before we dive into the details of what rebase offers us and how it is different than doing a merge, let’s consider a hypothetical scenario: suppose you are working on a feature branch (rg/feat-a in this case) and are ready to merge. However, your feature branch and the integration branch (master) have diverged. You already know what will happen if you merge your feature branch into the integration branch—you’ll get a merge commit: Here, the merge commit (E), which Git created, represents the union of the work that happened in the two branches. What if, instead of creating a branch off commit A, you had created the rg/feat-a branch branch after commit B (on the master branch) had already been created? In other words, you do the same work (same diff) in commits C and D, but instead of building off commit A, you build your work on top of commit B? If you think about it, commit D′ (D prime) is effectively the union of the work in the master and the rg/feat-a branch, because it started with everything the master branch had to offer! That is, D′ is the merge of the master and feat-a branches. NOTE If you were to merge rg/feat-a into the master branch, it would be a fast-forward merge, which further solidifies our argument. And this is exactly what Git’s rebase capability allows you to do—it allows you to merge two branches by moving one branch on top of another, effectively merging the two without actually merging. When you rebase one branch onto another, you are asking Git to replay all the commits on the current branch on top of the latest commit on the other branch. Perhaps this is best explained by an example—let’s revisit the one example from the previous page: Performing a rebase involves another Git command, called git rebase. You start by switching to the branch you want to rebase—rg/feat-a branch in this case. If you rebase this branch on master, Git iterates over all the commits in the feature branch, starting with the first commit (C). It records a new commit (C′) that has the same changes contained in commit C, except the new commit’s parent will be B (as opposed to A). It then proceeds to the next commit on the feature branch, D in this case, and records a new commit (D′) with the same changes as D—except its parent will be the C′. It does this till all the commits have been re-recorded, then it moves the feature branch to point to the latest commit (D′). Note that the branch being rebased moves to the newly recorded commit (D′), as opposed to merging, where the proposing branch moves to the merge point. As you can see, there are a few differences between merging and rebasing. Your history is very different. Rebasing “flattens” the history—you end up with a straight line, with C′ being the parent of D′, B being the parent of C′, and so forth. Rebasing is also more involved than merging, since Git rewrites your commits, which changes their IDs, as opposed to merging, which leaves commit IDs the same. This means that you should not rebase public commits. If merging and rebasing have the same results, which one should you reach for when aiming to integrate your work? Merging is much more straightforward and does not involve Git having to rewrite your commit history. This means you can safely merge branches, even those with public commits. Since you are just learning the ropes, use merges. As you get more familiar with Git, and the different kinds of workflows that teams use, you can decide whether you should merge or rebase.
==========
Head First Git (Raju Gandhi)
- Your Highlight on page 548 | location 8403-8404 | Added on Tuesday, 23 January 2024 21:18:20

https://i-love-git.com
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5843-5849 | Added on Tuesday, 23 January 2024 23:43:52

We discussed three main approaches to replication: Single-leader replication Clients send all writes to a single node (the leader), which sends a stream of data change events to the other replicas (followers). Reads can be performed on any replica, but reads from followers might be stale. Multi-leader replication Clients send each write to one of several leader nodes, any of which can accept writes. The leaders send streams of data change events to each other and to any follower nodes. Leaderless replication Clients send each write to several nodes, and read from several nodes in parallel in order to detect and correct nodes with stale data.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 5855-5865 | Added on Tuesday, 23 January 2024 23:47:07

We looked at some strange effects that can be caused by replication lag, and we discussed a few consistency models which are helpful for deciding how an application should behave under replication lag: Read-after-write consistency Users should always see data that they submitted themselves. Monotonic reads After users have seen the data at one point in time, they shouldn’t later see the data from some earlier point in time. Consistent prefix reads Users should see the data in a state that makes causal sense: for example, seeing a question and its reply in the correct order. Finally, we discussed the concurrency issues that are inherent in multi-leader and leaderless replication approaches: because they allow multiple writes to happen concurrently, conflicts may occur. We examined an algorithm that a database might use to determine whether one operation happened before another, or whether they happened concurrently. We also touched on methods for resolving conflicts by merging together concurrent updates.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6081-6088 | Added on Wednesday, 24 January 2024 08:45:13

Terminological confusion What we call a partition here is called a shard in MongoDB, Elasticsearch, and SolrCloud; it’s known as a region in HBase, a tablet in Bigtable, a vnode in Cassandra and Riak, and a vBucket in Couchbase. However, partitioning is the most established term, so we’ll stick with that.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6107-6116 | Added on Wednesday, 24 January 2024 08:48:16

Partitioning and Replication Partitioning is usually combined with replication so that copies of each partition are stored on multiple nodes. This means that, even though each record belongs to exactly one partition, it may still be stored on several different nodes for fault tolerance. A node may store more than one partition. If a leader–follower replication model is used, the combination of partitioning and replication can look like Figure 6-1. Each partition’s leader is assigned to one node, and its followers are assigned to other nodes. Each node may be the leader for some partitions and a follower for other partitions. Everything we discussed in Chapter 5 about replication of databases applies equally to replication of partitions. The choice of partitioning scheme is mostly independent of the choice of replication scheme, so we will keep things simple and ignore replication in this chapter.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6117-6119 | Added on Wednesday, 24 January 2024 08:48:53

Figure 6-1. Combining replication and partitioning: each node acts as leader for some partitions and follower for other partitions.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6135-6146 | Added on Wednesday, 24 January 2024 08:52:10

Partitioning by Key Range One way of partitioning is to assign a continuous range of keys (from some minimum to some maximum) to each partition, like the volumes of a paper encyclopedia (Figure 6-2). If you know the boundaries between the ranges, you can easily determine which partition contains a given key. If you also know which partition is assigned to which node, then you can make your request directly to the appropriate node (or, in the case of the encyclopedia, pick the correct book off the shelf). Figure 6-2. A print encyclopedia is partitioned by key range. The ranges of keys are not necessarily evenly spaced, because your data may not be evenly distributed. For example, in Figure 6-2, volume 1 contains words starting with A and B, but volume 12 contains words starting with T, U, V, X, Y, and Z. Simply having one volume per two letters of the alphabet would lead to some volumes being much bigger than others. In order to distribute the data evenly, the partition
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6189-6193 | Added on Wednesday, 24 January 2024 08:54:38

Once you have a suitable hash function for keys, you can assign each partition a range of hashes (rather than a range of keys), and every key whose hash falls within a partition’s range will be stored in that partition. This is illustrated in Figure 6-3. Figure 6-3. Partitioning by hash of key.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6223-6236 | Added on Wednesday, 24 January 2024 08:57:26

Cassandra achieves a compromise between the two partitioning strategies [11, 12, 13]. A table in Cassandra can be declared with a compound primary key consisting of several columns. Only the first part of that key is hashed to determine the partition, but the other columns are used as a concatenated index for sorting the data in Cassandra’s SSTables. A query therefore cannot search for a range of values within the first column of a compound key, but if it specifies a fixed value for the first column, it can perform an efficient range scan over the other columns of the key. The concatenated index approach enables an elegant data model for one-to-many relationships. For example, on a social media site, one user may post many updates. If the primary key for updates is chosen to be (user_id, update_timestamp), then you can efficiently retrieve all updates made by a particular user within some time interval, sorted by timestamp. Different users may be stored on different partitions, but within each user, the updates are stored ordered by timestamp on a single partition.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6273-6275 | Added on Wednesday, 24 January 2024 09:00:47

The problem with secondary indexes is that they don’t map neatly to partitions. There are two main approaches to partitioning a database with secondary indexes: document-based partitioning and term-based partitioning.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6314-6317 | Added on Wednesday, 24 January 2024 09:04:47

Most database vendors recommend that you structure your partitioning scheme so that secondary index queries can be served from a single partition, but that is not always possible, especially when you’re using multiple secondary indexes in a single query (such as filtering cars by color and by make at the same time).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6317-6319 | Added on Wednesday, 24 January 2024 09:05:01

Figure 6-5. Partitioning secondary indexes by term.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6336-6343 | Added on Wednesday, 24 January 2024 09:07:29

The advantage of a global (term-partitioned) index over a document-partitioned index is that it can make reads more efficient: rather than doing scatter/gather over all partitions, a client only needs to make a request to the partition containing the term that it wants. However, the downside of a global index is that writes are slower and more complicated, because a write to a single document may now affect multiple partitions of the index (every term in the document might be on a different partition, on a different node). In an ideal world, the index would always be up to date, and every document written to the database would immediately be reflected in the index. However, in a term-partitioned index, that would require a distributed transaction across all partitions affected by a write, which is not supported in all databases (see Chapter 7 and Chapter 9).
==========
_OceanofPDF.com_The_Secret_of_Nagas_-_Amish_Tripathi (Amish Tripathi)
- Your Highlight at location 1467-1470 | Added on Wednesday, 24 January 2024 23:45:01

‘I didn’t answer the question because I don’t have the answer. But if people believe that sins of the past life can impact this life, won’t they at least try to lead a better life this time around?’ Shiva smiled. Are these people just talented wordsmiths or great philosophers?
==========
_OceanofPDF.com_The_Secret_of_Nagas_-_Amish_Tripathi (Amish Tripathi)
- Your Highlight at location 1467-1470 | Added on Wednesday, 24 January 2024 23:45:09

‘I didn’t answer the question because I don’t have the answer. But if people believe that sins of the past life can impact this life, won’t they at least try to lead a better life this time around?’ Shiva smiled. Are these people just talented wordsmiths or great philosophers? The Pandit smiled back. Once again, I don’t have the answer!
==========
_OceanofPDF.com_The_Secret_of_Nagas_-_Amish_Tripathi (Amish Tripathi)
- Your Highlight at location 1554-1555 | Added on Wednesday, 24 January 2024 23:54:56

Sati smiled softly. ‘It’s a boy. Looks like I won, darling!’ ‘That’s true,’ whispered Shiva, scared of touching his son. ‘But I haven’t lost anything!’
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6384-6390 | Added on Thursday, 25 January 2024 09:09:49

The problem with the mod N approach is that if the number of nodes N changes, most of the keys will need to be moved from one node to another. For example, say hash(key) = 123456. If you initially have 10 nodes, that key starts out on node 6 (because 123456 mod 10 = 6). When you grow to 11 nodes, the key needs to move to node 3 (123456 mod 11 = 3), and when you grow to 12 nodes, it needs to move to node 0 (123456 mod 12 = 0). Such frequent moves make rebalancing excessively expensive. We need an approach that doesn’t move data around more than necessary.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6442-6452 | Added on Thursday, 25 January 2024 09:15:42

An advantage of dynamic partitioning is that the number of partitions adapts to the total data volume. If there is only a small amount of data, a small number of partitions is sufficient, so overheads are small; if there is a huge amount of data, the size of each individual partition is limited to a configurable maximum [23]. However, a caveat is that an empty database starts off with a single partition, since there is no a priori information about where to draw the partition boundaries. While the dataset is small—until it hits the point at which the first partition is split—all writes have to be processed by a single node while the other nodes sit idle. To mitigate this issue, HBase and MongoDB allow an initial set of partitions to be configured on an empty database (this is called pre-splitting). In the case of key-range partitioning, pre-splitting requires that you already know what the key distribution is going to look like [4, 26].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6513-6522 | Added on Thursday, 25 January 2024 09:20:23

On a high level, there are a few different approaches to this problem (illustrated in Figure 6-7): Allow clients to contact any node (e.g., via a round-robin load balancer). If that node coincidentally owns the partition to which the request applies, it can handle the request directly; otherwise, it forwards the request to the appropriate node, receives the reply, and passes the reply along to the client. Send all requests from clients to a routing tier first, which determines the node that should handle each request and forwards it accordingly. This routing tier does not itself handle any requests; it only acts as a partition-aware load balancer. Require that clients be aware of the partitioning and the assignment of partitions to nodes. In this case, a client can connect directly to the appropriate node, without any intermediary.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6530-6536 | Added on Thursday, 25 January 2024 09:21:21

Many distributed data systems rely on a separate coordination service such as ZooKeeper to keep track of this cluster metadata, as illustrated in Figure 6-8. Each node registers itself in ZooKeeper, and ZooKeeper maintains the authoritative mapping of partitions to nodes. Other actors, such as the routing tier or the partitioning-aware client, can subscribe to this information in ZooKeeper. Whenever a partition changes ownership, or a node is added or removed, ZooKeeper notifies the routing tier so that it can keep its routing information up to date. Figure 6-8. Using ZooKeeper to keep track of assignment of partitions to nodes.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6565-6569 | Added on Thursday, 25 January 2024 09:58:38

However, massively parallel processing (MPP) relational database products, often used for analytics, are much more sophisticated in the types of queries they support. A typical data warehouse query contains several join, filtering, grouping, and aggregation operations. The MPP query optimizer breaks this complex query into a number of execution stages and partitions, many of which can be executed in parallel on different nodes of the database cluster. Queries that involve scanning over large parts of the dataset particularly benefit from such parallel execution.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6578-6592 | Added on Thursday, 25 January 2024 10:01:19

The goal of partitioning is to spread the data and query load evenly across multiple machines, avoiding hot spots (nodes with disproportionately high load). This requires choosing a partitioning scheme that is appropriate to your data, and rebalancing the partitions when nodes are added to or removed from the cluster. We discussed two main approaches to partitioning: Key range partitioning, where keys are sorted, and a partition owns all the keys from some minimum up to some maximum. Sorting has the advantage that efficient range queries are possible, but there is a risk of hot spots if the application often accesses keys that are close together in the sorted order. In this approach, partitions are typically rebalanced dynamically by splitting the range into two subranges when a partition gets too big. Hash partitioning, where a hash function is applied to each key, and a partition owns a range of hashes. This method destroys the ordering of keys, making range queries inefficient, but may distribute load more evenly. When partitioning by hash, it is common to create a fixed number of partitions in advance, to assign several partitions to each node, and to move entire partitions from one node to another when nodes are added or removed. Dynamic partitioning can also be used.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6743-6751 | Added on Friday, 26 January 2024 09:23:28

How do you figure out whether you need transactions? In order to answer that question, we first need to understand exactly what safety guarantees transactions can provide, and what costs are associated with them. Although transactions seem straightforward at first glance, there are actually many subtle but important details that come into play. In this chapter, we will examine many examples of things that can go wrong, and explore the algorithms that databases use to guard against those issues. We will go especially deep in the area of concurrency control, discussing various kinds of race conditions that can occur and how databases implement isolation levels such as read committed, snapshot isolation, and serializability. This chapter applies to both single-node and distributed databases; in Chapter 8 we will focus the discussion on the particular challenges that arise only in distributed systems.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6764-6767 | Added on Friday, 26 January 2024 09:24:14

Transactions were the main casualty of this movement: many of this new generation of databases abandoned transactions entirely, or redefined the word to describe a much weaker set of guarantees than had previously been understood [4].
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6803-6807 | Added on Friday, 26 January 2024 09:27:33

Rather, ACID atomicity describes what happens if a client wants to make several writes, but a fault occurs after some of the writes have been processed—for example, a process crashes, a network connection is interrupted, a disk becomes full, or some integrity constraint is violated. If the writes are grouped together into an atomic transaction, and the transaction cannot be completed (committed) due to a fault, then the transaction is aborted and the database must discard or undo any writes it has made so far in that transaction.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6813-6833 | Added on Friday, 26 January 2024 09:29:02

Consistency The word consistency is terribly overloaded: In Chapter 5 we discussed replica consistency and the issue of eventual consistency that arises in asynchronously replicated systems (see “Problems with Replication Lag”). Consistent hashing is an approach to partitioning that some systems use for rebalancing (see “Consistent Hashing”). In the CAP theorem (see Chapter 9), the word consistency is used to mean linearizability (see “Linearizability”). In the context of ACID, consistency refers to an application-specific notion of the database being in a “good state.” It’s unfortunate that the same word is used with at least four different meanings. The idea of ACID consistency is that you have certain statements about your data (invariants) that must always be true—for example, in an accounting system, credits and debits across all accounts must always be balanced. If a transaction starts with a database that is valid according to these invariants, and any writes during the transaction preserve the validity, then you can be sure that the invariants are always satisfied.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6837-6842 | Added on Friday, 26 January 2024 09:29:53

Atomicity, isolation, and durability are properties of the database, whereas consistency (in the ACID sense) is a property of the application. The application may rely on the database’s atomicity and isolation properties in order to achieve consistency, but it’s not up to the database alone. Thus, the letter C doesn’t really belong in ACID.i
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6853-6861 | Added on Friday, 26 January 2024 09:30:52

Isolation in the sense of ACID means that concurrently executing transactions are isolated from each other: they cannot step on each other’s toes. The classic database textbooks formalize isolation as serializability, which means that each transaction can pretend that it is the only transaction running on the entire database. The database ensures that when the transactions have committed, the result is the same as if they had run serially (one after another), even though in reality they may have run concurrently [10]. Figure 7-1. A race condition between two clients concurrently incrementing a counter.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6871-6873 | Added on Friday, 26 January 2024 09:32:11

Durability is the promise that once a transaction has committed successfully, any data it has written will not be forgotten, even if there is a hardware fault or the database crashes.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6871-6879 | Added on Friday, 26 January 2024 09:32:32

Durability is the promise that once a transaction has committed successfully, any data it has written will not be forgotten, even if there is a hardware fault or the database crashes. In a single-node database, durability typically means that the data has been written to nonvolatile storage such as a hard drive or SSD. It usually also involves a write-ahead log or similar (see “Making B-trees reliable”), which allows recovery in the event that the data structures on disk are corrupted. In a replicated database, durability may mean that the data has been successfully copied to some number of nodes. In order to provide a durability guarantee, a database must wait until these writes or replications are complete before reporting a transaction as successfully committed. As discussed in “Reliability”, perfect durability does not exist: if all your hard disks and all your backups are destroyed at the same time, there’s obviously nothing your database can do to save you.
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6946-6948 | Added on Friday, 26 January 2024 09:41:44

Figure 7-2. Violating isolation: one transaction reads another transaction’s uncommitted writes (a “dirty read”).
==========
_OceanofPDF.com_Designing_Data-Intensive_Applications_-_Martin_Kleppmann (Kleppmann, Martin)
- Your Highlight at location 6955-6963 | Added on Friday, 26 January 2024 09:43:21

Multi-object transactions require some way of determining which read and write operations belong to the same transaction. In relational databases, that is typically done based on the client’s TCP connection to the database server: on any particular connection, everything between a BEGIN TRANSACTION and a COMMIT statement is considered to be part of the same transaction.iii On the other hand, many nonrelational databases don’t have such a way of grouping operations together. Even if there is a multi-object API (for example, a key-value store may have a multi-put operation that updates several keys in one operation), that doesn’t necessarily mean it has transaction semantics: the command may succeed for some keys and fail for others, leaving the database in a partially updated state.
==========
